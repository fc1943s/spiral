#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = bool
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
type System_IO_FileInfo = bool
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
type IFs = abstract realpathSync: path: string -> string
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
type IPathBasename = abstract basename: path: string -> string
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = bool
  type DataReceivedEventArgs = bool
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
    | US4_5 of f5_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and Mut5 = {mutable l0 : int32}
and [<Struct>] US12 =
    | US12_0
    | US12_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : string
    | US13_1 of f1_0 : string
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_path_PathBuf
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_path_PathBuf
    | US15_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US16 =
    | US16_0
    | US16_1 of f1_0 : std_string_String
and [<Struct>] US17 =
    | US17_0 of f0_0 : string * f0_1 : US5
    | US17_1 of f1_0 : string
and [<Struct>] US18 =
    | US18_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US18_1 of f1_0 : string
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) * UH1
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : char
    | US20_1
and [<Struct>] US21 =
    | US21_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US22_1 of f1_0 : string
and [<Struct>] US23 =
    | US23_0 of f0_0 : US20 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and [<Struct>] US24 =
    | US24_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US24_1 of f1_0 : string
and [<Struct>] US25 =
    | US25_0 of f0_0 : (string [])
    | US25_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US26 =
    | US26_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US26_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) * UH3
and [<Struct>] US27 =
    | US27_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US27_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_string_String
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : std_process_Output
    | US32_1 of f1_0 : std_string_String
and [<Struct>] US33 =
    | US33_0 of f0_0 : int32
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US34_1
and [<Struct>] US35 =
    | US35_0 of f0_0 : System.Threading.CancellationToken
    | US35_1
and [<Struct>] US38 =
    | US38_0
    | US38_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : US38
    | US37_1
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : string
    | US40_1 of f1_0 : string
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US41 =
    | US41_0
    | US41_1
    | US41_2
and [<Struct>] US42 =
    | US42_0 of f0_0 : US41
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * string * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US43_1
and [<Struct>] US44 =
    | US44_0 of f0_0 : int32 * f0_1 : string
    | US44_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US45 =
    | US45_0 of f0_0 : std_collections_HashMap<string, string>
    | US45_1
and [<Struct>] US46 =
    | US46_0 of f0_0 : US5
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * bool * UH5
and [<Struct>] US47 =
    | US47_0
    | US47_1 of f1_0 : string
and [<Struct>] US48 =
    | US48_0 of f0_0 : std_fs_FileType
    | US48_1 of f1_0 : std_string_String
and [<Struct>] US49 =
    | US49_0
    | US49_1
    | US49_2
and [<Struct>] US50 =
    | US50_0 of f0_0 : async_walkdir_DirEntry
    | US50_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : string * f0_1 : string
    | US51_1
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "gleam"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "gleam-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'g') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "target"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 't') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v62 : string = "JavaScript"
    let v63 : (unit -> string) = v62.ToLower
    let v64 : string = v63 ()
    let v69 : string = "Erlang"
    let v70 : (unit -> string) = v69.ToLower
    let v71 : string = v70 ()
    let v74 : string list = []
    let v76 : string list = v64 :: v74 
    let v80 : string list = v71 :: v76 
    let v84 : (string list -> (string [])) = List.toArray
    let v85 : (string []) = v84 v80
    let v88 : string = "$0.to_vec()"
    let v89 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v85 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr () v92 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "&*$0"
    let v100 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "&*$0"
    let v102 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v93 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v114 
    #endif
#else
    let v118 : Ref<Str> = v93 |> unbox<Ref<Str>>
    let _run_target_args'_v98 = v118 
    #endif
    let v121 : Ref<Str> = _run_target_args'_v98 
    (* run_target_args'
    let v131 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v132 : string = "String::from($0)"
    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v132 
    let _run_target_args'_v131 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string = "String::from($0)"
    let v135 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v134 
    let _run_target_args'_v131 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : string = "String::from($0)"
    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v136 
    let _run_target_args'_v131 = v137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v143 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v143 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v147 
    #endif
#else
    let v151 : std_string_String = v121 |> unbox<std_string_String>
    let _run_target_args'_v131 = v151 
    #endif
    let v154 : std_string_String = _run_target_args'_v131 
    let v160 : string = "Box::new($0)"
    let v161 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v154 v160 
    let v162 : string = "Box::leak($0)"
    let v163 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v161 v162 
    let v164 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v165 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "true; $0 }).collect::<Vec<_>>()"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : string = "_vec_map"
    let v169 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v168 
    let v170 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v171 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let v172 : string = "$0.value_parser($1)"
    let v173 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v171) v172 
    let v174 : string = "clap::Command::arg($0, $1)"
    let v175 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v173) v174 
    let v176 : string = "NAME"
    let v177 : string = "r#\"" + v176 + "\"#"
    let v178 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v177 
    let v179 : string = "VERSION"
    let v180 : string = "r#\"" + v179 + "\"#"
    let v181 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v180 
    let v182 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v178; v181|]
    let v184 : unativeint = 1 |> unativeint 
    let v188 : unativeint = 0 |> unativeint 
    let v192 : unativeint = 0 |> unativeint 
    let v196 : bool = v188 = v192 
    let v204 : clap_builder_ValueRange =
        if v196 then
            let v199 : string = "clap::builder::ValueRange::new($0..)"
            let v200 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v184 v199 
            v200
        else
            let v201 : string = ""
            let v202 : string = "clap::builder::ValueRange::new($0.." + v201 + "$1)"
            let v203 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v184, v188) v202 
            v203
    let v205 : string = "deps"
    let v206 : string = "r#\"" + v205 + "\"#"
    let v207 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v206 
    let v208 : string = "clap::Arg::new($0)"
    let v209 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let v210 : string = "$0.short($1)"
    let v211 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v209, 'd') v210 
    let v212 : string = "r#\"" + v205 + "\"#"
    let v213 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v212 
    let v214 : string = "$0.long($1)"
    let v215 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v211, v213) v214 
    let v216 : string = "$0.to_vec()"
    let v217 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v182 v216 
    let v218 : string = "$0.value_names($1)"
    let v219 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v215, v217) v218 
    let v220 : string = "$0.num_args($1)"
    let v221 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v219, v204) v220 
    let v222 : string = "clap::ArgAction::Append"
    let v223 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v222 
    let v224 : string = "$0.action($1)"
    let v225 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v221, v223) v224 
    let v226 : string = "clap::Command::arg($0, $1)"
    let v227 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v175, v225) v226 
    let v228 : string = "clap::Command::subcommand($0, v227)"
    let v229 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v228 
    let v230 : string = "cuda"
    let v231 : string = "r#\"" + v230 + "\"#"
    let v232 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v231 
    let v233 : string = "clap::Command::new($0)"
    let v234 : clap_Command = Fable.Core.RustInterop.emitRustExpr v232 v233 
    let v235 : string = "py-path"
    let v236 : string = "r#\"" + v235 + "\"#"
    let v237 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v236 
    let v238 : string = "clap::Arg::new($0)"
    let v239 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v237 v238 
    let v240 : string = "$0.short($1)"
    let v241 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v239, 'p') v240 
    let v242 : string = "r#\"" + v235 + "\"#"
    let v243 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v242 
    let v244 : string = "$0.long($1)"
    let v245 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v241, v243) v244 
    let v246 : string = "$0.required($1)"
    let v247 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v245, true) v246 
    let v248 : string = "clap::Command::arg($0, $1)"
    let v249 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v234, v247) v248 
    let v250 : string = "env"
    let v251 : string = "r#\"" + v250 + "\"#"
    let v252 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "clap::Arg::new($0)"
    let v254 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "$0.short($1)"
    let v256 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v254, 'e') v255 
    let v257 : string = "r#\"" + v250 + "\"#"
    let v258 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "$0.long($1)"
    let v260 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v256, v258) v259 
    
    
    let v263 : string = "Poetry"
    let v264 : (unit -> string) = v263.ToLower
    let v265 : string = v264 ()
    let v270 : string = "Pip"
    let v271 : (unit -> string) = v270.ToLower
    let v272 : string = v271 ()
    let v275 : string list = []
    let v277 : string list = v265 :: v275 
    let v281 : string list = v272 :: v277 
    let v285 : (string list -> (string [])) = List.toArray
    let v286 : (string []) = v285 v281
    let v289 : string = "$0.to_vec()"
    let v290 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v286 v289 
    let v291 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v292 : bool = Fable.Core.RustInterop.emitRustExpr v290 v291 
    let v293 : string = "x"
    let v294 : string = Fable.Core.RustInterop.emitRustExpr () v293 
    (* run_target_args'
    let v299 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v300 : string = "&*$0"
    let v301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v300 
    let _run_target_args'_v299 = v301 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v302 : string = "&*$0"
    let v303 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v302 
    let _run_target_args'_v299 = v303 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v304 : string = "&*$0"
    let v305 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v304 
    let _run_target_args'_v299 = v305 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v307 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v307 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v311 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v315 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v315 
    #endif
#else
    let v319 : Ref<Str> = v294 |> unbox<Ref<Str>>
    let _run_target_args'_v299 = v319 
    #endif
    let v322 : Ref<Str> = _run_target_args'_v299 
    (* run_target_args'
    let v332 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v333 : string = "String::from($0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v333 
    let _run_target_args'_v332 = v334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v335 : string = "String::from($0)"
    let v336 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v335 
    let _run_target_args'_v332 = v336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : string = "String::from($0)"
    let v338 : std_string_String = Fable.Core.RustInterop.emitRustExpr v322 v337 
    let _run_target_args'_v332 = v338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v340 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v340 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v348 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v348 
    #endif
#else
    let v352 : std_string_String = v322 |> unbox<std_string_String>
    let _run_target_args'_v332 = v352 
    #endif
    let v355 : std_string_String = _run_target_args'_v332 
    let v361 : string = "Box::new($0)"
    let v362 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v355 v361 
    let v363 : string = "Box::leak($0)"
    let v364 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v362 v363 
    let v365 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v366 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v364 v365 
    let v367 : string = "true; $0 }).collect::<Vec<_>>()"
    let v368 : bool = Fable.Core.RustInterop.emitRustExpr v366 v367 
    let v369 : string = "_vec_map"
    let v370 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v369 
    let v371 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v372 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v370 v371 
    let v373 : string = "$0.value_parser($1)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v260, v372) v373 
    let v375 : string = "clap::Command::arg($0, $1)"
    let v376 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v249, v374) v375 
    let v377 : string = "r#\"" + v176 + "\"#"
    let v378 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "r#\"" + v179 + "\"#"
    let v380 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v379 
    let v381 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v378; v380|]
    let v383 : unativeint = 1 |> unativeint 
    let v387 : unativeint = 0 |> unativeint 
    let v391 : unativeint = 0 |> unativeint 
    let v395 : bool = v387 = v391 
    let v403 : clap_builder_ValueRange =
        if v395 then
            let v398 : string = "clap::builder::ValueRange::new($0..)"
            let v399 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v383 v398 
            v399
        else
            let v400 : string = ""
            let v401 : string = "clap::builder::ValueRange::new($0.." + v400 + "$1)"
            let v402 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v383, v387) v401 
            v402
    let v404 : string = "r#\"" + v205 + "\"#"
    let v405 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v404 
    let v406 : string = "clap::Arg::new($0)"
    let v407 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v405 v406 
    let v408 : string = "$0.short($1)"
    let v409 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v407, 'd') v408 
    let v410 : string = "r#\"" + v205 + "\"#"
    let v411 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v410 
    let v412 : string = "$0.long($1)"
    let v413 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v409, v411) v412 
    let v414 : string = "$0.to_vec()"
    let v415 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v381 v414 
    let v416 : string = "$0.value_names($1)"
    let v417 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v413, v415) v416 
    let v418 : string = "$0.num_args($1)"
    let v419 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v417, v403) v418 
    let v420 : string = "clap::ArgAction::Append"
    let v421 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v420 
    let v422 : string = "$0.action($1)"
    let v423 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v419, v421) v422 
    let v424 : string = "clap::Command::arg($0, $1)"
    let v425 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v376, v423) v424 
    let v426 : string = "clap::Command::subcommand($0, v425)"
    let v427 : clap_Command = Fable.Core.RustInterop.emitRustExpr v229 v426 
    let v428 : string = "fable"
    let v429 : string = "r#\"" + v428 + "\"#"
    let v430 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v429 
    let v431 : string = "clap::Command::new($0)"
    let v432 : clap_Command = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let v433 : string = "fs-path"
    let v434 : string = "r#\"" + v433 + "\"#"
    let v435 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v434 
    let v436 : string = "clap::Arg::new($0)"
    let v437 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v435 v436 
    let v438 : string = "$0.short($1)"
    let v439 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v437, 'f') v438 
    let v440 : string = "r#\"" + v433 + "\"#"
    let v441 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v440 
    let v442 : string = "$0.long($1)"
    let v443 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v439, v441) v442 
    let v444 : string = "$0.required($1)"
    let v445 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v443, true) v444 
    let v446 : string = "clap::Command::arg($0, $1)"
    let v447 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v432, v445) v446 
    let v448 : string = "r#\"" + v0 + "\"#"
    let v449 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v448 
    let v450 : string = "clap::Arg::new($0)"
    let v451 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v449 v450 
    let v452 : string = "$0.short($1)"
    let v453 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v451, 'c') v452 
    let v454 : string = "r#\"" + v0 + "\"#"
    let v455 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v454 
    let v456 : string = "$0.long($1)"
    let v457 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v453, v455) v456 
    let v458 : string = "clap::Command::arg($0, $1)"
    let v459 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v447, v457) v458 
    let v460 : string = "clap::Command::subcommand($0, v459)"
    let v461 : clap_Command = Fable.Core.RustInterop.emitRustExpr v427 v460 
    let v462 : string = "rust"
    let v463 : string = "r#\"" + v462 + "\"#"
    let v464 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v463 
    let v465 : string = "clap::Command::new($0)"
    let v466 : clap_Command = Fable.Core.RustInterop.emitRustExpr v464 v465 
    let v467 : string = "r#\"" + v433 + "\"#"
    let v468 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v467 
    let v469 : string = "clap::Arg::new($0)"
    let v470 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v468 v469 
    let v471 : string = "$0.short($1)"
    let v472 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v470, 'f') v471 
    let v473 : string = "r#\"" + v433 + "\"#"
    let v474 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v473 
    let v475 : string = "$0.long($1)"
    let v476 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v472, v474) v475 
    let v477 : string = "$0.required($1)"
    let v478 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v476, true) v477 
    let v479 : string = "clap::Command::arg($0, $1)"
    let v480 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v466, v478) v479 
    let v481 : string = "r#\"" + v176 + "\"#"
    let v482 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v481 
    let v483 : string = "r#\"" + v179 + "\"#"
    let v484 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v483 
    let v485 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v482; v484|]
    let v487 : unativeint = 1 |> unativeint 
    let v491 : unativeint = 0 |> unativeint 
    let v495 : unativeint = 0 |> unativeint 
    let v499 : bool = v491 = v495 
    let v507 : clap_builder_ValueRange =
        if v499 then
            let v502 : string = "clap::builder::ValueRange::new($0..)"
            let v503 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v487 v502 
            v503
        else
            let v504 : string = ""
            let v505 : string = "clap::builder::ValueRange::new($0.." + v504 + "$1)"
            let v506 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v487, v491) v505 
            v506
    let v508 : string = "r#\"" + v205 + "\"#"
    let v509 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v508 
    let v510 : string = "clap::Arg::new($0)"
    let v511 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let v512 : string = "$0.short($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v511, 'd') v512 
    let v514 : string = "r#\"" + v205 + "\"#"
    let v515 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v514 
    let v516 : string = "$0.long($1)"
    let v517 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v515) v516 
    let v518 : string = "$0.to_vec()"
    let v519 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v485 v518 
    let v520 : string = "$0.value_names($1)"
    let v521 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v517, v519) v520 
    let v522 : string = "$0.num_args($1)"
    let v523 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v521, v507) v522 
    let v524 : string = "clap::ArgAction::Append"
    let v525 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v524 
    let v526 : string = "$0.action($1)"
    let v527 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v523, v525) v526 
    let v528 : string = "clap::Command::arg($0, $1)"
    let v529 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v480, v527) v528 
    let v531 : unativeint = 0 |> unativeint 
    let v535 : unativeint = 1 |> unativeint 
    let v539 : unativeint = 0 |> unativeint 
    let v543 : bool = v535 = v539 
    let v551 : clap_builder_ValueRange =
        if v543 then
            let v546 : string = "clap::builder::ValueRange::new($0..)"
            let v547 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v531 v546 
            v547
        else
            let v548 : string = "="
            let v549 : string = "clap::builder::ValueRange::new($0.." + v548 + "$1)"
            let v550 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v531, v535) v549 
            v550
    let v552 : string = "wasm"
    let v553 : string = "r#\"" + v552 + "\"#"
    let v554 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v553 
    let v555 : string = "clap::Arg::new($0)"
    let v556 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v554 v555 
    let v557 : string = "$0.short($1)"
    let v558 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v556, 'w') v557 
    let v559 : string = "r#\"" + v552 + "\"#"
    let v560 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v559 
    let v561 : string = "$0.long($1)"
    let v562 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v558, v560) v561 
    let v563 : string = "$0.num_args($1)"
    let v564 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v562, v551) v563 
    let v565 : string = "$0.require_equals($1)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v564, true) v565 
    let v567 : string = ""
    let v568 : string = "r#\"" + v567 + "\"#"
    let v569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v568 
    let v570 : string = "$0.default_missing_value($1)"
    let v571 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v566, v569) v570 
    let v572 : string = "clap::Command::arg($0, $1)"
    let v573 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v529, v571) v572 
    let v575 : unativeint = 0 |> unativeint 
    let v579 : unativeint = 1 |> unativeint 
    let v583 : unativeint = 0 |> unativeint 
    let v587 : bool = v579 = v583 
    let v595 : clap_builder_ValueRange =
        if v587 then
            let v590 : string = "clap::builder::ValueRange::new($0..)"
            let v591 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v575 v590 
            v591
        else
            let v592 : string = "="
            let v593 : string = "clap::builder::ValueRange::new($0.." + v592 + "$1)"
            let v594 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v575, v579) v593 
            v594
    let v596 : string = "contract"
    let v597 : string = "r#\"" + v596 + "\"#"
    let v598 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v597 
    let v599 : string = "clap::Arg::new($0)"
    let v600 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v598 v599 
    let v601 : string = "$0.short($1)"
    let v602 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v600, 'c') v601 
    let v603 : string = "r#\"" + v596 + "\"#"
    let v604 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v603 
    let v605 : string = "$0.long($1)"
    let v606 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v602, v604) v605 
    let v607 : string = "$0.num_args($1)"
    let v608 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v606, v595) v607 
    let v609 : string = "$0.require_equals($1)"
    let v610 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v608, true) v609 
    let v611 : string = "r#\"" + v567 + "\"#"
    let v612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v611 
    let v613 : string = "$0.default_missing_value($1)"
    let v614 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v610, v612) v613 
    let v615 : string = "clap::Command::arg($0, $1)"
    let v616 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v573, v614) v615 
    let v617 : string = "cleanup"
    let v618 : string = "r#\"" + v617 + "\"#"
    let v619 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v618 
    let v620 : string = "clap::Arg::new($0)"
    let v621 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v619 v620 
    let v622 : string = "$0.short($1)"
    let v623 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v621, 'l') v622 
    let v624 : string = "r#\"" + v617 + "\"#"
    let v625 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v624 
    let v626 : string = "$0.long($1)"
    let v627 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v623, v625) v626 
    let v628 : string = "true"
    let v629 : string = "r#\"" + v628 + "\"#"
    let v630 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = "$0.default_value($1)"
    let v632 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v627, v630) v631 
    let v633 : string = "clap::ArgAction::SetFalse"
    let v634 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v633 
    let v635 : string = "$0.action($1)"
    let v636 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v632, v634) v635 
    let v637 : string = "clap::Command::arg($0, $1)"
    let v638 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v616, v636) v637 
    let v639 : string = "clap::Command::subcommand($0, v638)"
    let v640 : clap_Command = Fable.Core.RustInterop.emitRustExpr v461 v639 
    let v641 : string = "typescript"
    let v642 : string = "r#\"" + v641 + "\"#"
    let v643 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v642 
    let v644 : string = "clap::Command::new($0)"
    let v645 : clap_Command = Fable.Core.RustInterop.emitRustExpr v643 v644 
    let v646 : string = "r#\"" + v433 + "\"#"
    let v647 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v646 
    let v648 : string = "clap::Arg::new($0)"
    let v649 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v647 v648 
    let v650 : string = "$0.short($1)"
    let v651 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v649, 'f') v650 
    let v652 : string = "r#\"" + v433 + "\"#"
    let v653 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v652 
    let v654 : string = "$0.long($1)"
    let v655 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v651, v653) v654 
    let v656 : string = "$0.required($1)"
    let v657 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v655, true) v656 
    let v658 : string = "clap::Command::arg($0, $1)"
    let v659 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v645, v657) v658 
    let v660 : string = "r#\"" + v176 + "\"#"
    let v661 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v660 
    let v662 : string = "r#\"" + v179 + "\"#"
    let v663 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v662 
    let v664 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v661; v663|]
    let v666 : unativeint = 1 |> unativeint 
    let v670 : unativeint = 0 |> unativeint 
    let v674 : unativeint = 0 |> unativeint 
    let v678 : bool = v670 = v674 
    let v685 : clap_builder_ValueRange =
        if v678 then
            let v681 : string = "clap::builder::ValueRange::new($0..)"
            let v682 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v666 v681 
            v682
        else
            let v683 : string = "clap::builder::ValueRange::new($0.." + v567 + "$1)"
            let v684 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v666, v670) v683 
            v684
    let v686 : string = "r#\"" + v205 + "\"#"
    let v687 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v686 
    let v688 : string = "clap::Arg::new($0)"
    let v689 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v687 v688 
    let v690 : string = "$0.short($1)"
    let v691 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v689, 'd') v690 
    let v692 : string = "r#\"" + v205 + "\"#"
    let v693 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v692 
    let v694 : string = "$0.long($1)"
    let v695 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v691, v693) v694 
    let v696 : string = "$0.to_vec()"
    let v697 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v664 v696 
    let v698 : string = "$0.value_names($1)"
    let v699 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v695, v697) v698 
    let v700 : string = "$0.num_args($1)"
    let v701 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v699, v685) v700 
    let v702 : string = "clap::ArgAction::Append"
    let v703 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v702 
    let v704 : string = "$0.action($1)"
    let v705 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v701, v703) v704 
    let v706 : string = "clap::Command::arg($0, $1)"
    let v707 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v659, v705) v706 
    let v708 : string = "clap::Command::subcommand($0, v707)"
    let v709 : clap_Command = Fable.Core.RustInterop.emitRustExpr v640 v708 
    let v710 : string = "python"
    let v711 : string = "r#\"" + v710 + "\"#"
    let v712 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v711 
    let v713 : string = "clap::Command::new($0)"
    let v714 : clap_Command = Fable.Core.RustInterop.emitRustExpr v712 v713 
    let v715 : string = "r#\"" + v433 + "\"#"
    let v716 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v715 
    let v717 : string = "clap::Arg::new($0)"
    let v718 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v716 v717 
    let v719 : string = "$0.short($1)"
    let v720 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v718, 'f') v719 
    let v721 : string = "r#\"" + v433 + "\"#"
    let v722 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v721 
    let v723 : string = "$0.long($1)"
    let v724 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v720, v722) v723 
    let v725 : string = "$0.required($1)"
    let v726 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v724, true) v725 
    let v727 : string = "clap::Command::arg($0, $1)"
    let v728 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v714, v726) v727 
    let v729 : string = "r#\"" + v176 + "\"#"
    let v730 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v729 
    let v731 : string = "r#\"" + v179 + "\"#"
    let v732 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v731 
    let v733 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v730; v732|]
    let v735 : unativeint = 1 |> unativeint 
    let v739 : unativeint = 0 |> unativeint 
    let v743 : unativeint = 0 |> unativeint 
    let v747 : bool = v739 = v743 
    let v754 : clap_builder_ValueRange =
        if v747 then
            let v750 : string = "clap::builder::ValueRange::new($0..)"
            let v751 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v735 v750 
            v751
        else
            let v752 : string = "clap::builder::ValueRange::new($0.." + v567 + "$1)"
            let v753 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v735, v739) v752 
            v753
    let v755 : string = "r#\"" + v205 + "\"#"
    let v756 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v755 
    let v757 : string = "clap::Arg::new($0)"
    let v758 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v756 v757 
    let v759 : string = "$0.short($1)"
    let v760 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v758, 'd') v759 
    let v761 : string = "r#\"" + v205 + "\"#"
    let v762 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v761 
    let v763 : string = "$0.long($1)"
    let v764 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v760, v762) v763 
    let v765 : string = "$0.to_vec()"
    let v766 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v733 v765 
    let v767 : string = "$0.value_names($1)"
    let v768 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v764, v766) v767 
    let v769 : string = "$0.num_args($1)"
    let v770 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v768, v754) v769 
    let v771 : string = "clap::ArgAction::Append"
    let v772 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v771 
    let v773 : string = "$0.action($1)"
    let v774 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v770, v772) v773 
    let v775 : string = "clap::Command::arg($0, $1)"
    let v776 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v728, v774) v775 
    let v777 : string = "clap::Command::subcommand($0, v776)"
    let v778 : clap_Command = Fable.Core.RustInterop.emitRustExpr v709 v777 
    let v779 : string = "dib"
    let v780 : string = "r#\"" + v779 + "\"#"
    let v781 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v780 
    let v782 : string = "clap::Command::new($0)"
    let v783 : clap_Command = Fable.Core.RustInterop.emitRustExpr v781 v782 
    let v784 : string = "path"
    let v785 : string = "r#\"" + v784 + "\"#"
    let v786 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v785 
    let v787 : string = "clap::Arg::new($0)"
    let v788 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v786 v787 
    let v789 : string = "$0.short($1)"
    let v790 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v788, 'p') v789 
    let v791 : string = "r#\"" + v784 + "\"#"
    let v792 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v791 
    let v793 : string = "$0.long($1)"
    let v794 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v790, v792) v793 
    let v795 : string = "$0.required($1)"
    let v796 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v794, true) v795 
    let v797 : string = "clap::Command::arg($0, $1)"
    let v798 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v783, v796) v797 
    let v799 : string = "u8"
    let v800 : string = "clap::value_parser!(" + v799 + ").into()"
    let v801 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v800 
    let v802 : string = "retries"
    let v803 : string = "r#\"" + v802 + "\"#"
    let v804 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v803 
    let v805 : string = "clap::Arg::new($0)"
    let v806 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v804 v805 
    let v807 : string = "$0.short($1)"
    let v808 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v806, 'r') v807 
    let v809 : string = "r#\"" + v802 + "\"#"
    let v810 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v809 
    let v811 : string = "$0.long($1)"
    let v812 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v808, v810) v811 
    let v813 : string = "$0.value_parser($1)"
    let v814 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v812, v801) v813 
    let v815 : string = "clap::Command::arg($0, $1)"
    let v816 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v798, v814) v815 
    let v817 : string = "working-directory"
    let v818 : string = "r#\"" + v817 + "\"#"
    let v819 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v818 
    let v820 : string = "clap::Arg::new($0)"
    let v821 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v819 v820 
    let v822 : string = "$0.short($1)"
    let v823 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v821, 'w') v822 
    let v824 : string = "r#\"" + v817 + "\"#"
    let v825 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v824 
    let v826 : string = "$0.long($1)"
    let v827 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v823, v825) v826 
    let v828 : string = "clap::Command::arg($0, $1)"
    let v829 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v816, v827) v828 
    let v830 : string = "clap::Command::subcommand($0, v829)"
    let v831 : clap_Command = Fable.Core.RustInterop.emitRustExpr v778 v830 
    v831
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = method4(v0)
    let v7 : string = "std::env::var(&*$0)"
    let v8 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "x"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "fable_library_rust::String_::fromString($0)"
    let v14 : string = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "true; $0 })"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "_result_map_"
    let v18 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = method5()
    let v20 : string = "$0.unwrap_or($1)"
    let v21 : string = Fable.Core.RustInterop.emitRustExpr struct (v18, v19) v20 
    let _run_target_args'_v5 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : US3 = US3_1
    let v23 : US4 = US4_3(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _run_target_args'_v5 = v25 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v26 : US3 = US3_2
    let v27 : US4 = US4_3(v26)
    let v28 : string = $"env.get_environment_variable / target: {v27} / var: {v0}"
    let v29 : string = failwith<string> v28
    let _run_target_args'_v5 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : string = "process.env[$0] ?? \"\""
    let v31 : string = Fable.Core.JsInterop.emitJsExpr v0 v30 
    let _run_target_args'_v5 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : string = "os"
    let v34 : IOsEnviron = Fable.Core.PyInterop.importAll v33 
    let v35 : string = "v34.environ"
    let v36 : obj = Fable.Core.PyInterop.emitPyExpr () v35 
    let v40 : string = "v36.get($0)"
    let v41 : string = Fable.Core.PyInterop.emitPyExpr v0 v40 
    let mutable _v41 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v45 : (string -> string option) = Option.ofObj
    let v46 : string option = v45 v41
    v46 
    #else
    Some v41 
    #endif
    |> fun x -> _v41 <- Some x
    let v47 : string option = match _v41 with Some x -> x | None -> failwith "optionm'.of_obj / _v41=None"
    let v52 : (string -> US5) = method6()
    let v53 : US5 option = v47 |> Option.map v52 
    let v73 : US5 = US5_1
    let v74 : US5 = v53 |> Option.defaultValue v73 
    let v81 : string =
        match v74 with
        | US5_1 -> (* None *)
            let v79 : string = ""
            v79
        | US5_0(v78) -> (* Some *)
            v78
    let _run_target_args'_v5 = v81 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v82 : US3 = US3_1
    let v83 : US4 = US4_1(v82)
    let v84 : string = $"env.get_environment_variable / target: {v83} / var: {v0}"
    let v85 : string = failwith<string> v84
    let _run_target_args'_v5 = v85 
    #endif
#else
    let v86 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v87 : string = v86 v0
    let mutable _v87 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v89 : (string -> string option) = Option.ofObj
    let v90 : string option = v89 v87
    v90 
    #else
    Some v87 
    #endif
    |> fun x -> _v87 <- Some x
    let v91 : string option = match _v87 with Some x -> x | None -> failwith "optionm'.of_obj / _v87=None"
    let v96 : (string -> US5) = method6()
    let v97 : US5 option = v91 |> Option.map v96 
    let v117 : US5 = US5_1
    let v118 : US5 = v97 |> Option.defaultValue v117 
    let v125 : string =
        match v118 with
        | US5_1 -> (* None *)
            let v123 : string = ""
            v123
        | US5_0(v122) -> (* Some *)
            v122
    let _run_target_args'_v5 = v125 
    #endif
    let v126 : string = _run_target_args'_v5 
    v126
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    
    
    
    
    
    let v4 : string = "Critical"
    let v5 : (unit -> string) = v4.ToLower
    let v6 : string = v5 ()
    let v11 : string = "Warning"
    let v12 : (unit -> string) = v11.ToLower
    let v13 : string = v12 ()
    let v18 : string = "Info"
    let v19 : (unit -> string) = v18.ToLower
    let v20 : string = v19 ()
    let v25 : string = "Debug"
    let v26 : (unit -> string) = v25.ToLower
    let v27 : string = v26 ()
    let v32 : string = "Verbose"
    let v33 : (unit -> string) = v32.ToLower
    let v34 : string = v33 ()
    let v37 : bool = "Verbose" = v1
    let v41 : US1 =
        if v37 then
            let v38 : US0 = US0_0
            US1_0(v38)
        else
            US1_1
    let v127 : US1 =
        match v41 with
        | US1_1 -> (* None *)
            let v44 : bool = "Debug" = v1
            let v48 : US1 =
                if v44 then
                    let v45 : US0 = US0_1
                    US1_0(v45)
                else
                    US1_1
            match v48 with
            | US1_1 -> (* None *)
                let v51 : bool = "Info" = v1
                let v55 : US1 =
                    if v51 then
                        let v52 : US0 = US0_2
                        US1_0(v52)
                    else
                        US1_1
                match v55 with
                | US1_1 -> (* None *)
                    let v58 : bool = "Warning" = v1
                    let v62 : US1 =
                        if v58 then
                            let v59 : US0 = US0_3
                            US1_0(v59)
                        else
                            US1_1
                    match v62 with
                    | US1_1 -> (* None *)
                        let v65 : bool = "Critical" = v1
                        let v69 : US1 =
                            if v65 then
                                let v66 : US0 = US0_4
                                US1_0(v66)
                            else
                                US1_1
                        match v69 with
                        | US1_1 -> (* None *)
                            let v72 : bool = v34 = v1
                            let v76 : US1 =
                                if v72 then
                                    let v73 : US0 = US0_0
                                    US1_0(v73)
                                else
                                    US1_1
                            match v76 with
                            | US1_1 -> (* None *)
                                let v79 : bool = v27 = v1
                                let v83 : US1 =
                                    if v79 then
                                        let v80 : US0 = US0_1
                                        US1_0(v80)
                                    else
                                        US1_1
                                match v83 with
                                | US1_1 -> (* None *)
                                    let v86 : bool = v20 = v1
                                    let v90 : US1 =
                                        if v86 then
                                            let v87 : US0 = US0_2
                                            US1_0(v87)
                                        else
                                            US1_1
                                    match v90 with
                                    | US1_1 -> (* None *)
                                        let v93 : bool = v13 = v1
                                        let v97 : US1 =
                                            if v93 then
                                                let v94 : US0 = US0_3
                                                US1_0(v94)
                                            else
                                                US1_1
                                        match v97 with
                                        | US1_1 -> (* None *)
                                            let v100 : bool = v6 = v1
                                            let v104 : US1 =
                                                if v100 then
                                                    let v101 : US0 = US0_4
                                                    US1_0(v101)
                                                else
                                                    US1_1
                                            match v104 with
                                            | US1_1 -> (* None *)
                                                US1_1
                                            | US1_0(v105) -> (* Some *)
                                                US1_0(v105)
                                        | US1_0(v98) -> (* Some *)
                                            US1_0(v98)
                                    | US1_0(v91) -> (* Some *)
                                        US1_0(v91)
                                | US1_0(v84) -> (* Some *)
                                    US1_0(v84)
                            | US1_0(v77) -> (* Some *)
                                US1_0(v77)
                        | US1_0(v70) -> (* Some *)
                            US1_0(v70)
                    | US1_0(v63) -> (* Some *)
                        US1_0(v63)
                | US1_0(v56) -> (* Some *)
                    US1_0(v56)
            | US1_0(v49) -> (* Some *)
                US1_0(v49)
        | US1_0(v42) -> (* Some *)
            US1_0(v42)
    let v128 : string = "AUTOMATION"
    let v129 : string = method3(v128)
    let v132 : string = "True"
    let v133 : bool = v129 <> v132 
    let v200 : US2 =
        if v133 then
            US2_1
        else
            (* run_target_args'
            let v139 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v140 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v140 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v141 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v141 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v143 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v139 = v143 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v146 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v146 
            #endif
#if FABLE_COMPILER_PYTHON
            let v147 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v147 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v148 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v148 
            #endif
#else
            let v149 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v139 = v149 
            #endif
            let v150 : System.DateTime = _run_target_args'_v139 
            (* run_target_args'
            let v158 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v159 : (System.DateTime -> int64) = _.Ticks
            let v160 : int64 = v159 v150
            let _run_target_args'_v158 = v160 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v161 : (System.DateTime -> int64) = _.Ticks
            let v162 : int64 = v161 v150
            let _run_target_args'_v158 = v162 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v164 : int64 = null |> unbox<int64>
            let _run_target_args'_v158 = v164 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v167 : (System.DateTime -> int64) = _.Ticks
            let v168 : int64 = v167 v150
            let _run_target_args'_v158 = v168 
            #endif
#if FABLE_COMPILER_PYTHON
            let v169 : (System.DateTime -> int64) = _.Ticks
            let v170 : int64 = v169 v150
            let _run_target_args'_v158 = v170 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v171 : (System.DateTime -> int64) = _.Ticks
            let v172 : int64 = v171 v150
            let _run_target_args'_v158 = v172 
            #endif
#else
            let v173 : (System.DateTime -> int64) = _.Ticks
            let v174 : int64 = v173 v150
            let _run_target_args'_v158 = v174 
            #endif
            let v175 : int64 = _run_target_args'_v158 
            let v196 : int64 = v175 |> int64 
            US2_0(v196)
    struct (v127, v200)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v4 : US1, v5 : US2) = method2()
    let _run_target_args'_v3 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : US1 = US1_1
    let v7 : US2 = US2_1
    let _run_target_args'_v3 = struct (v6, v7) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "AUTOMATION"
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "String::from($0)"
    let v22 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v15 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : std_string_String = v15 |> unbox<std_string_String>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : std_string_String = _run_target_args'_v20 
    let v49 : string = "fable_library_rust::String_::fromString($0)"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _run_target_args'_v13 = v50 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v51 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v51 
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "String::from($0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "String::from($0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "String::from($0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v65 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v65 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v73 
    #endif
#else
    let v77 : std_string_String = v52 |> unbox<std_string_String>
    let _run_target_args'_v57 = v77 
    #endif
    let v80 : std_string_String = _run_target_args'_v57 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _run_target_args'_v13 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "option_env!(\"" + v8 + "\").unwrap_or(\"\")"
    let v89 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v88 
    (* run_target_args'
    let v94 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v95 
    let _run_target_args'_v94 = v96 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v97 : string = "String::from($0)"
    let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v97 
    let _run_target_args'_v94 = v98 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v99 : string = "String::from($0)"
    let v100 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v99 
    let _run_target_args'_v94 = v100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v102 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v110 
    #endif
#else
    let v114 : std_string_String = v89 |> unbox<std_string_String>
    let _run_target_args'_v94 = v114 
    #endif
    let v117 : std_string_String = _run_target_args'_v94 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v117 v123 
    let _run_target_args'_v13 = v124 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v126 : string = null |> unbox<string>
    let _run_target_args'_v13 = v126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : string = null |> unbox<string>
    let _run_target_args'_v13 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v134 : string = null |> unbox<string>
    let _run_target_args'_v13 = v134 
    #endif
#else
    let v138 : string = null |> unbox<string>
    let _run_target_args'_v13 = v138 
    #endif
    let v141 : string = _run_target_args'_v13 
    let v149 : string = "True"
    let v150 : bool = v141 <> v149 
    let v162 : US2 =
        if v150 then
            US2_1
        else
            let v154 : string = $"near_sdk::env::block_timestamp()"
            let v155 : uint64 = Fable.Core.RustInterop.emitRustExpr () v154 
            let v157 : (uint64 -> int64) = int64
            let v158 : int64 = v157 v155
            US2_0(v158)
    let v163 : US1 = US1_1
    let _run_target_args'_v3 = struct (v163, v162) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v164 : US1, v165 : US2) = method2()
    let _run_target_args'_v3 = struct (v164, v165) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v166 : US1, v167 : US2) = method2()
    let _run_target_args'_v3 = struct (v166, v167) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v168 : US1, v169 : US2) = method2()
    let _run_target_args'_v3 = struct (v168, v169) 
    #endif
#else
    let struct (v170 : US1, v171 : US2) = method2()
    let _run_target_args'_v3 = struct (v170, v171) 
    #endif
    let struct (v172 : US1, v173 : US2) = _run_target_args'_v3 
    let v178 : Mut0 = {l0 = 1L} : Mut0
    let v179 : (string -> unit) = closure4()
    let v180 : Mut1 = {l0 = v179} : Mut1
    let v181 : Mut2 = {l0 = true} : Mut2
    let v182 : string = ""
    let v183 : Mut3 = {l0 = v182} : Mut3
    let v186 : US0 =
        match v172 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v184) -> (* Some *)
            v184
    let v187 : Mut4 = {l0 = v186} : Mut4
    let v198 : int64 option =
        match v173 with
        | US2_1 -> (* None *)
            let v194 : int64 option = None
            v194
        | US2_0(v188) -> (* Some *)
            let v190 : int64 option = Some v188 
            v190
    struct (v178, v180, v181, v183, v187, v198)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v9 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v9 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : US0 = v28.l0
    let v43 : bool = v26.l0
    let v44 : bool = v43 = false
    if v44 then
        false
    else
        let v45 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v46 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v42
        let v47 : bool = v45 >= v46
        v47
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    (* run_target_args'
    let v173 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v176 : (int64 -> US2) = method9()
    let v177 : US2 option = v5 |> Option.map v176 
    let v197 : US2 = US2_1
    let v198 : US2 = v177 |> Option.defaultValue v197 
    let v316 : System.DateTime =
        match v198 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v299 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v300 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v299 = v300 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v301 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v299 = v301 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v303 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v299 = v303 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v306 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v299 = v306 
            #endif
#if FABLE_COMPILER_PYTHON
            let v307 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v299 = v307 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v308 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v299 = v308 
            #endif
#else
            let v309 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v299 = v309 
            #endif
            let v310 : System.DateTime = _run_target_args'_v299 
            v310
        | US2_0(v202) -> (* Some *)
            (* run_target_args'
            let v205 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v206 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v205 = v206 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v207 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v205 = v207 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v209 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v205 = v209 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v212 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v205 = v212 
            #endif
#if FABLE_COMPILER_PYTHON
            let v213 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v205 = v213 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v214 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v205 = v214 
            #endif
#else
            let v215 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v205 = v215 
            #endif
            let v216 : System.DateTime = _run_target_args'_v205 
            (* run_target_args'
            let v224 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v225 : (System.DateTime -> int64) = _.Ticks
            let v226 : int64 = v225 v216
            let _run_target_args'_v224 = v226 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v227 : (System.DateTime -> int64) = _.Ticks
            let v228 : int64 = v227 v216
            let _run_target_args'_v224 = v228 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v230 : int64 = null |> unbox<int64>
            let _run_target_args'_v224 = v230 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v233 : (System.DateTime -> int64) = _.Ticks
            let v234 : int64 = v233 v216
            let _run_target_args'_v224 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v235 : (System.DateTime -> int64) = _.Ticks
            let v236 : int64 = v235 v216
            let _run_target_args'_v224 = v236 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v237 : (System.DateTime -> int64) = _.Ticks
            let v238 : int64 = v237 v216
            let _run_target_args'_v224 = v238 
            #endif
#else
            let v239 : (System.DateTime -> int64) = _.Ticks
            let v240 : int64 = v239 v216
            let _run_target_args'_v224 = v240 
            #endif
            let v241 : int64 = _run_target_args'_v224 
            let v262 : int64 = v241 |> int64 
            let v265 : int64 = v262 - v202
            let v268 : System.TimeSpan = v265 |> System.TimeSpan 
            let v274 : (System.TimeSpan -> int32) = _.Hours
            let v275 : int32 = v274 v268
            let v279 : (System.TimeSpan -> int32) = _.Minutes
            let v280 : int32 = v279 v268
            let v284 : (System.TimeSpan -> int32) = _.Seconds
            let v285 : int32 = v284 v268
            let v289 : (System.TimeSpan -> int32) = _.Milliseconds
            let v290 : int32 = v289 v268
            let v294 : System.DateTime = System.DateTime (1, 1, 1, v275, v280, v285, v290)
            v294
    let v318 : string = method10()
    let v322 : bool = v318 = ""
    let v324 : string =
        if v322 then
            let v323 : string = "M-d-y hh:mm:ss tt"
            v323
        else
            v318
    let v325 : (string -> string) = v316.ToString
    let v326 : string = v325 v324
    let _run_target_args'_v173 = v326 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v343 : (int64 -> US2) = method9()
    let v344 : US2 option = v5 |> Option.map v343 
    let v364 : US2 = US2_1
    let v365 : US2 = v344 |> Option.defaultValue v364 
    let v483 : System.DateTime =
        match v365 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v466 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v467 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v466 = v467 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v468 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v466 = v468 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v470 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v466 = v470 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v473 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v466 = v473 
            #endif
#if FABLE_COMPILER_PYTHON
            let v474 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v466 = v474 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v475 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v466 = v475 
            #endif
#else
            let v476 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v466 = v476 
            #endif
            let v477 : System.DateTime = _run_target_args'_v466 
            v477
        | US2_0(v369) -> (* Some *)
            (* run_target_args'
            let v372 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v373 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v372 = v373 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v374 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v372 = v374 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v376 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v372 = v376 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v379 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v372 = v379 
            #endif
#if FABLE_COMPILER_PYTHON
            let v380 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v372 = v380 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v381 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v372 = v381 
            #endif
#else
            let v382 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v372 = v382 
            #endif
            let v383 : System.DateTime = _run_target_args'_v372 
            (* run_target_args'
            let v391 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v392 : (System.DateTime -> int64) = _.Ticks
            let v393 : int64 = v392 v383
            let _run_target_args'_v391 = v393 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v394 : (System.DateTime -> int64) = _.Ticks
            let v395 : int64 = v394 v383
            let _run_target_args'_v391 = v395 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v397 : int64 = null |> unbox<int64>
            let _run_target_args'_v391 = v397 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v400 : (System.DateTime -> int64) = _.Ticks
            let v401 : int64 = v400 v383
            let _run_target_args'_v391 = v401 
            #endif
#if FABLE_COMPILER_PYTHON
            let v402 : (System.DateTime -> int64) = _.Ticks
            let v403 : int64 = v402 v383
            let _run_target_args'_v391 = v403 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v404 : (System.DateTime -> int64) = _.Ticks
            let v405 : int64 = v404 v383
            let _run_target_args'_v391 = v405 
            #endif
#else
            let v406 : (System.DateTime -> int64) = _.Ticks
            let v407 : int64 = v406 v383
            let _run_target_args'_v391 = v407 
            #endif
            let v408 : int64 = _run_target_args'_v391 
            let v429 : int64 = v408 |> int64 
            let v432 : int64 = v429 - v369
            let v435 : System.TimeSpan = v432 |> System.TimeSpan 
            let v441 : (System.TimeSpan -> int32) = _.Hours
            let v442 : int32 = v441 v435
            let v446 : (System.TimeSpan -> int32) = _.Minutes
            let v447 : int32 = v446 v435
            let v451 : (System.TimeSpan -> int32) = _.Seconds
            let v452 : int32 = v451 v435
            let v456 : (System.TimeSpan -> int32) = _.Milliseconds
            let v457 : int32 = v456 v435
            let v461 : System.DateTime = System.DateTime (1, 1, 1, v442, v447, v452, v457)
            v461
    let v485 : string = method10()
    let v489 : bool = v485 = ""
    let v491 : string =
        if v489 then
            let v490 : string = "M-d-y hh:mm:ss tt"
            v490
        else
            v485
    let v492 : (string -> string) = v483.ToString
    let v493 : string = v492 v491
    let _run_target_args'_v173 = v493 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v508 : string = $"near_sdk::env::block_timestamp()"
    let v509 : uint64 = Fable.Core.RustInterop.emitRustExpr () v508 
    let v512 : (int64 -> US2) = method9()
    let v513 : US2 option = v5 |> Option.map v512 
    let v533 : US2 = US2_1
    let v534 : US2 = v513 |> Option.defaultValue v533 
    let v546 : uint64 =
        match v534 with
        | US2_1 -> (* None *)
            v509
        | US2_0(v538) -> (* Some *)
            let v540 : (int64 -> uint64) = uint64
            let v541 : uint64 = v540 v538
            let v544 : uint64 = v509 - v541
            v544
    let v547 : uint64 = v546 / 1000000000UL
    let v548 : uint64 = v547 % 60UL
    let v549 : uint64 = v547 / 60UL
    let v550 : uint64 = v549 % 60UL
    let v551 : uint64 = v547 / 3600UL
    let v552 : uint64 = v551 % 24UL
    let v553 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v554 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v552, v550, v548) v553 
    let v555 : string = "fable_library_rust::String_::fromString($0)"
    let v556 : string = Fable.Core.RustInterop.emitRustExpr v554 v555 
    let _run_target_args'_v173 = v556 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v559 : (int64 -> US2) = method9()
    let v560 : US2 option = v5 |> Option.map v559 
    let v580 : US2 = US2_1
    let v581 : US2 = v560 |> Option.defaultValue v580 
    let v699 : System.DateTime =
        match v581 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v682 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v683 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v682 = v683 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v684 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v682 = v684 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v686 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v682 = v686 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v689 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v682 = v689 
            #endif
#if FABLE_COMPILER_PYTHON
            let v690 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v682 = v690 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v691 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v682 = v691 
            #endif
#else
            let v692 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v682 = v692 
            #endif
            let v693 : System.DateTime = _run_target_args'_v682 
            v693
        | US2_0(v585) -> (* Some *)
            (* run_target_args'
            let v588 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v589 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v589 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v590 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v590 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v592 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v588 = v592 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v595 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v595 
            #endif
#if FABLE_COMPILER_PYTHON
            let v596 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v596 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v597 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v597 
            #endif
#else
            let v598 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v588 = v598 
            #endif
            let v599 : System.DateTime = _run_target_args'_v588 
            (* run_target_args'
            let v607 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v608 : (System.DateTime -> int64) = _.Ticks
            let v609 : int64 = v608 v599
            let _run_target_args'_v607 = v609 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v610 : (System.DateTime -> int64) = _.Ticks
            let v611 : int64 = v610 v599
            let _run_target_args'_v607 = v611 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v613 : int64 = null |> unbox<int64>
            let _run_target_args'_v607 = v613 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v616 : (System.DateTime -> int64) = _.Ticks
            let v617 : int64 = v616 v599
            let _run_target_args'_v607 = v617 
            #endif
#if FABLE_COMPILER_PYTHON
            let v618 : (System.DateTime -> int64) = _.Ticks
            let v619 : int64 = v618 v599
            let _run_target_args'_v607 = v619 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v620 : (System.DateTime -> int64) = _.Ticks
            let v621 : int64 = v620 v599
            let _run_target_args'_v607 = v621 
            #endif
#else
            let v622 : (System.DateTime -> int64) = _.Ticks
            let v623 : int64 = v622 v599
            let _run_target_args'_v607 = v623 
            #endif
            let v624 : int64 = _run_target_args'_v607 
            let v645 : int64 = v624 |> int64 
            let v648 : int64 = v645 - v585
            let v651 : System.TimeSpan = v648 |> System.TimeSpan 
            let v657 : (System.TimeSpan -> int32) = _.Hours
            let v658 : int32 = v657 v651
            let v662 : (System.TimeSpan -> int32) = _.Minutes
            let v663 : int32 = v662 v651
            let v667 : (System.TimeSpan -> int32) = _.Seconds
            let v668 : int32 = v667 v651
            let v672 : (System.TimeSpan -> int32) = _.Milliseconds
            let v673 : int32 = v672 v651
            let v677 : System.DateTime = System.DateTime (1, 1, 1, v658, v663, v668, v673)
            v677
    let v701 : string = method11()
    let v705 : bool = v701 = ""
    let v707 : string =
        if v705 then
            let v706 : string = "M-d-y hh:mm:ss tt"
            v706
        else
            v701
    let v708 : (string -> string) = v699.ToString
    let v709 : string = v708 v707
    let _run_target_args'_v173 = v709 
    #endif
#if FABLE_COMPILER_PYTHON
    let v726 : (int64 -> US2) = method9()
    let v727 : US2 option = v5 |> Option.map v726 
    let v747 : US2 = US2_1
    let v748 : US2 = v727 |> Option.defaultValue v747 
    let v866 : System.DateTime =
        match v748 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v849 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v850 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v849 = v850 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v851 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v849 = v851 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v853 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v849 = v853 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v856 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v849 = v856 
            #endif
#if FABLE_COMPILER_PYTHON
            let v857 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v849 = v857 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v858 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v849 = v858 
            #endif
#else
            let v859 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v849 = v859 
            #endif
            let v860 : System.DateTime = _run_target_args'_v849 
            v860
        | US2_0(v752) -> (* Some *)
            (* run_target_args'
            let v755 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v756 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v755 = v756 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v757 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v755 = v757 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v759 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v755 = v759 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v762 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v755 = v762 
            #endif
#if FABLE_COMPILER_PYTHON
            let v763 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v755 = v763 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v764 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v755 = v764 
            #endif
#else
            let v765 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v755 = v765 
            #endif
            let v766 : System.DateTime = _run_target_args'_v755 
            (* run_target_args'
            let v774 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v775 : (System.DateTime -> int64) = _.Ticks
            let v776 : int64 = v775 v766
            let _run_target_args'_v774 = v776 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v777 : (System.DateTime -> int64) = _.Ticks
            let v778 : int64 = v777 v766
            let _run_target_args'_v774 = v778 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v780 : int64 = null |> unbox<int64>
            let _run_target_args'_v774 = v780 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v783 : (System.DateTime -> int64) = _.Ticks
            let v784 : int64 = v783 v766
            let _run_target_args'_v774 = v784 
            #endif
#if FABLE_COMPILER_PYTHON
            let v785 : (System.DateTime -> int64) = _.Ticks
            let v786 : int64 = v785 v766
            let _run_target_args'_v774 = v786 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v787 : (System.DateTime -> int64) = _.Ticks
            let v788 : int64 = v787 v766
            let _run_target_args'_v774 = v788 
            #endif
#else
            let v789 : (System.DateTime -> int64) = _.Ticks
            let v790 : int64 = v789 v766
            let _run_target_args'_v774 = v790 
            #endif
            let v791 : int64 = _run_target_args'_v774 
            let v812 : int64 = v791 |> int64 
            let v815 : int64 = v812 - v752
            let v818 : System.TimeSpan = v815 |> System.TimeSpan 
            let v824 : (System.TimeSpan -> int32) = _.Hours
            let v825 : int32 = v824 v818
            let v829 : (System.TimeSpan -> int32) = _.Minutes
            let v830 : int32 = v829 v818
            let v834 : (System.TimeSpan -> int32) = _.Seconds
            let v835 : int32 = v834 v818
            let v839 : (System.TimeSpan -> int32) = _.Milliseconds
            let v840 : int32 = v839 v818
            let v844 : System.DateTime = System.DateTime (1, 1, 1, v825, v830, v835, v840)
            v844
    let v868 : string = method11()
    let v872 : bool = v868 = ""
    let v874 : string =
        if v872 then
            let v873 : string = "M-d-y hh:mm:ss tt"
            v873
        else
            v868
    let v875 : (string -> string) = v866.ToString
    let v876 : string = v875 v874
    let _run_target_args'_v173 = v876 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v893 : (int64 -> US2) = method9()
    let v894 : US2 option = v5 |> Option.map v893 
    let v914 : US2 = US2_1
    let v915 : US2 = v894 |> Option.defaultValue v914 
    let v1033 : System.DateTime =
        match v915 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1016 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1017 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1016 = v1017 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1018 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1016 = v1018 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1020 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1016 = v1020 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1023 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1016 = v1023 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1024 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1016 = v1024 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1025 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1016 = v1025 
            #endif
#else
            let v1026 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1016 = v1026 
            #endif
            let v1027 : System.DateTime = _run_target_args'_v1016 
            v1027
        | US2_0(v919) -> (* Some *)
            (* run_target_args'
            let v922 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v923 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v922 = v923 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v924 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v922 = v924 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v926 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v922 = v926 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v929 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v922 = v929 
            #endif
#if FABLE_COMPILER_PYTHON
            let v930 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v922 = v930 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v931 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v922 = v931 
            #endif
#else
            let v932 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v922 = v932 
            #endif
            let v933 : System.DateTime = _run_target_args'_v922 
            (* run_target_args'
            let v941 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v942 : (System.DateTime -> int64) = _.Ticks
            let v943 : int64 = v942 v933
            let _run_target_args'_v941 = v943 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v944 : (System.DateTime -> int64) = _.Ticks
            let v945 : int64 = v944 v933
            let _run_target_args'_v941 = v945 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v947 : int64 = null |> unbox<int64>
            let _run_target_args'_v941 = v947 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v950 : (System.DateTime -> int64) = _.Ticks
            let v951 : int64 = v950 v933
            let _run_target_args'_v941 = v951 
            #endif
#if FABLE_COMPILER_PYTHON
            let v952 : (System.DateTime -> int64) = _.Ticks
            let v953 : int64 = v952 v933
            let _run_target_args'_v941 = v953 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v954 : (System.DateTime -> int64) = _.Ticks
            let v955 : int64 = v954 v933
            let _run_target_args'_v941 = v955 
            #endif
#else
            let v956 : (System.DateTime -> int64) = _.Ticks
            let v957 : int64 = v956 v933
            let _run_target_args'_v941 = v957 
            #endif
            let v958 : int64 = _run_target_args'_v941 
            let v979 : int64 = v958 |> int64 
            let v982 : int64 = v979 - v919
            let v985 : System.TimeSpan = v982 |> System.TimeSpan 
            let v991 : (System.TimeSpan -> int32) = _.Hours
            let v992 : int32 = v991 v985
            let v996 : (System.TimeSpan -> int32) = _.Minutes
            let v997 : int32 = v996 v985
            let v1001 : (System.TimeSpan -> int32) = _.Seconds
            let v1002 : int32 = v1001 v985
            let v1006 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1007 : int32 = v1006 v985
            let v1011 : System.DateTime = System.DateTime (1, 1, 1, v992, v997, v1002, v1007)
            v1011
    let v1035 : string = method11()
    let v1039 : bool = v1035 = ""
    let v1041 : string =
        if v1039 then
            let v1040 : string = "M-d-y hh:mm:ss tt"
            v1040
        else
            v1035
    let v1042 : (string -> string) = v1033.ToString
    let v1043 : string = v1042 v1041
    let _run_target_args'_v173 = v1043 
    #endif
#else
    let v1060 : (int64 -> US2) = method9()
    let v1061 : US2 option = v5 |> Option.map v1060 
    let v1081 : US2 = US2_1
    let v1082 : US2 = v1061 |> Option.defaultValue v1081 
    let v1200 : System.DateTime =
        match v1082 with
        | US2_1 -> (* None *)
            (* run_target_args'
            let v1183 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1184 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1183 = v1184 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1185 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1183 = v1185 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1187 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1183 = v1187 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1190 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1183 = v1190 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1191 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1183 = v1191 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1192 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1183 = v1192 
            #endif
#else
            let v1193 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1183 = v1193 
            #endif
            let v1194 : System.DateTime = _run_target_args'_v1183 
            v1194
        | US2_0(v1086) -> (* Some *)
            (* run_target_args'
            let v1089 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1090 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1089 = v1090 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1091 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1089 = v1091 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1093 : System.DateTime = null |> unbox<System.DateTime>
            let _run_target_args'_v1089 = v1093 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1096 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1089 = v1096 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1097 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1089 = v1097 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1098 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1089 = v1098 
            #endif
#else
            let v1099 : System.DateTime = System.DateTime.Now
            let _run_target_args'_v1089 = v1099 
            #endif
            let v1100 : System.DateTime = _run_target_args'_v1089 
            (* run_target_args'
            let v1108 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1109 : (System.DateTime -> int64) = _.Ticks
            let v1110 : int64 = v1109 v1100
            let _run_target_args'_v1108 = v1110 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1111 : (System.DateTime -> int64) = _.Ticks
            let v1112 : int64 = v1111 v1100
            let _run_target_args'_v1108 = v1112 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1114 : int64 = null |> unbox<int64>
            let _run_target_args'_v1108 = v1114 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1117 : (System.DateTime -> int64) = _.Ticks
            let v1118 : int64 = v1117 v1100
            let _run_target_args'_v1108 = v1118 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1119 : (System.DateTime -> int64) = _.Ticks
            let v1120 : int64 = v1119 v1100
            let _run_target_args'_v1108 = v1120 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1121 : (System.DateTime -> int64) = _.Ticks
            let v1122 : int64 = v1121 v1100
            let _run_target_args'_v1108 = v1122 
            #endif
#else
            let v1123 : (System.DateTime -> int64) = _.Ticks
            let v1124 : int64 = v1123 v1100
            let _run_target_args'_v1108 = v1124 
            #endif
            let v1125 : int64 = _run_target_args'_v1108 
            let v1146 : int64 = v1125 |> int64 
            let v1149 : int64 = v1146 - v1086
            let v1152 : System.TimeSpan = v1149 |> System.TimeSpan 
            let v1158 : (System.TimeSpan -> int32) = _.Hours
            let v1159 : int32 = v1158 v1152
            let v1163 : (System.TimeSpan -> int32) = _.Minutes
            let v1164 : int32 = v1163 v1152
            let v1168 : (System.TimeSpan -> int32) = _.Seconds
            let v1169 : int32 = v1168 v1152
            let v1173 : (System.TimeSpan -> int32) = _.Milliseconds
            let v1174 : int32 = v1173 v1152
            let v1178 : System.DateTime = System.DateTime (1, 1, 1, v1159, v1164, v1169, v1174)
            v1178
    let v1202 : string = method11()
    let v1206 : bool = v1202 = ""
    let v1208 : string =
        if v1206 then
            let v1207 : string = "M-d-y hh:mm:ss tt"
            v1207
        else
            v1202
    let v1209 : (string -> string) = v1200.ToString
    let v1210 : string = v1209 v1208
    let _run_target_args'_v173 = v1210 
    #endif
    let v1225 : string = _run_target_args'_v173 
    v1225
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v2 : string = "Debug"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_bright_blue"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_bright_blue"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_bright_blue"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[94m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[94m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[94m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[94m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "args"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"%A{v0}"
    let v41 : string = $"{v37}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v2, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = " }"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v2, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = v2.l0
    v60
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v4 : (char list -> (char [])) = List.toArray
    let v5 : (char []) = v4 v1
    let v8 : string = v0.TrimStart v5 
    let v40 : char list = []
    let v42 : char list = '/' :: v40 
    let v46 : char list = ' ' :: v42 
    let v51 : (char list -> (char [])) = List.toArray
    let v52 : (char []) = v51 v46
    let v55 : string = v8.TrimEnd v52 
    v55
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.main"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure8(v24)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : (string -> unit) = closure9()
    (* run_target_args'
    let v48 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v49 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = v27.l0
    let v52 : bool = v51 = ""
    let v60 : string =
        if v52 then
            v0
        else
            let v53 : bool = v0 = ""
            if v53 then
                let v54 : string = v27.l0
                v54
            else
                let v55 : string = v27.l0
                let v56 : string = "\n"
                let v57 : string = v55 + v56 
                let v58 : string = v57 + v0 
                v58
    (* run_target_args'
    let v65 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _run_target_args'_v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "&*$0"
    let v69 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _run_target_args'_v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "&*$0"
    let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _run_target_args'_v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v81 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v81 
    #endif
#else
    let v85 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v65 = v85 
    #endif
    let v88 : Ref<Str> = _run_target_args'_v65 
    let v94 : string = $"$0.chars()"
    let v95 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v88 v94 
    let v96 : string = "$0"
    let v97 : _ = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "$0.collect::<Vec<_>>()"
    let v99 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v101 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v99 v100 
    let v102 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = "x"
    let v105 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v104 
    let v106 : string = "String::from_iter($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "true; $0 }).collect::<Vec<_>>()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_vec_map"
    let v111 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "$0.len()"
    let v113 : unativeint = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v119 : int32 = v113 |> int32 
    let v129 : string = ""
    let v130 : bool = v0 <> v129 
    let v134 : bool =
        if v130 then
            let v133 : bool = v119 <= 1
            v133
        else
            false
    if v134 then
        v27.l0 <- v60
        ()
    else
        v27.l0 <- v129
        let v135 : string = "true; $0.into_iter().for_each(|x| { //"
        let v136 : bool = Fable.Core.RustInterop.emitRustExpr v111 v135 
        let v137 : string = "x"
        let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v137 
        let v139 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v140 : bool = Fable.Core.RustInterop.emitRustExpr v138 v139 
        let v141 : string = $"true"
        let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
        let v143 : string = "true; }); //"
        let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
        ()
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v47 v0
    #endif
#if FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v47 v0
    #endif
#else
    v47 v0
    #endif
    // run_target_args' is_unit
    let v145 : (string -> unit) = v25.l0
    v145 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method16(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "String::from($0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "String::from($0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = v0 |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "gleam-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "target"
    v0
and method25 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method26 () : (Vec<std_string_String> -> US11) =
    closure14()
and method27 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method28 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "extension"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "new_code"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method30 () : string =
    let v0 : string = ""
    v0
and method31 (v0 : string) : string =
    v0
and method32 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method33 () : string =
    let v0 : string = ""
    v0
and method29 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v7 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v8 : (string -> (uint8 [])) = v7 v6
    let v9 : (uint8 []) = v8 v0
    let v10 : string = "$0.to_vec()"
    let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "std::io::Cursor::new(v11)"
    let v13 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "std::io::BufReader::new($0)"
    let v15 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "true; let mut v15 = v15"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v18 
    let v19 : string = "result"
    let v20 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "true; let mut v20 = v20"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v24 : unativeint = 0 |> unativeint 
    let v27 : string = "[$0; 1024]"
    let v28 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v27 
    let v29 : string = "true; loop { // rust.loop"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "true; let mut v28 = v28"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "std::io::Read::read(&mut v15, &mut v28)"
    let v34 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v33 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "$0.unwrap()"
    let v38 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "$0.unwrap()"
    let v40 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "$0.unwrap()"
    let v42 : unativeint = Fable.Core.RustInterop.emitRustExpr v34 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v45 
    #endif
#else
    let v46 : unativeint = match v34 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v36 = v46 
    #endif
    let v47 : unativeint = _run_target_args'_v36 
    let v51 : bool = v47 = v24 
    if v51 then
        let v54 : string = "true; break"
        let v55 : bool = Fable.Core.RustInterop.emitRustExpr () v54 
        ()
    let v57 : unativeint = v47 |> unativeint 
    let v61 : unativeint = v57 |> unbox<unativeint>
    let v64 : string = "v28.len()"
    let v65 : unativeint = Fable.Core.RustInterop.emitRustExpr () v64 
    let v67 : bool = v61 = v65 
    let v74 : Ref<Slice'<uint8>> =
        if v67 then
            let v70 : string = "&v28[v24..]"
            let v71 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v70 
            v71
        else
            let v72 : string = "&v28[$0..$1]"
            let v73 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v24, v57) v72 
            v73
    let v75 : string = "sha2::Digest::update(&mut v20, v74)"
    Fable.Core.RustInterop.emitRustExpr () v75 
    let v76 : string = "true; } // rust.loop"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "true; } // rust.loop"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "true; } // rust.loop"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "true; { // rust.loop"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "true; { // rust.loop"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "&sha2::Digest::finalize(v20)"
    let v87 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v89 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "x"
    let v93 : uint8 = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "format!(\"{:02x}\", $0)"
    let v95 : std_string_String = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "fable_library_rust::String_::fromString($0)"
    let v97 : string = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "true; $0 }).collect::<Vec<_>>()"
    let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "_vec_map"
    let v101 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v103 : (string []) = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v108 : unit = ()
    let _let'_v108 =
        seq {
            for i = 0 to v103.Length - 1 do yield v103.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v111 : string seq = _let'_v108 
    let v117 : string = method30()
    let v119 : bool = v117 = "\n"
    let v121 : string =
        if v119 then
            method31(v117)
        else
            v117
    let v122 : (string -> (string seq -> string)) = String.concat
    let v123 : (string seq -> string) = v122 v121
    let v124 : string = v123 v111
    let v128 : Result<string, std_io_Error> = Ok v124 
    (* run_target_args'
    let v132 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "$0.unwrap()"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v128 v133 
    let _run_target_args'_v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "$0.unwrap()"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v128 v135 
    let _run_target_args'_v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "$0.unwrap()"
    let v138 : string = Fable.Core.RustInterop.emitRustExpr v128 v137 
    let _run_target_args'_v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v141 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v141 
    #endif
#else
    let v142 : string = match v128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v132 = v142 
    #endif
    let v143 : string = _run_target_args'_v132 
    let _run_target_args'_v5 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = null |> unbox<string>
    let _run_target_args'_v5 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v151 : string = null |> unbox<string>
    let _run_target_args'_v5 = v151 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v154 : string = "crypto"
    let v155 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v154 
    let v156 : string = "v155.createHash($0)"
    let v157 : string = "sha256"
    let v158 : obj = Fable.Core.JsInterop.emitJsExpr v157 v156 
    let v159 : string = "$0.update($1, 'utf8')"
    let v160 : obj = Fable.Core.JsInterop.emitJsExpr struct (v158, v0) v159 
    let v161 : string = "$0.digest($1)"
    let v162 : string = "hex"
    let v163 : string = Fable.Core.JsInterop.emitJsExpr struct (v160, v162) v161 
    let _run_target_args'_v5 = v163 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : string = "hashlib"
    let v166 : IHashlibSha256 = Fable.Core.PyInterop.importAll v165 
    let v167 : string = "v166.sha256()"
    let v168 : obj = Fable.Core.PyInterop.emitPyExpr () v167 
    let v172 : string = "$0.encode($1)"
    let v173 : string = "utf-8"
    let v174 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v173) v172 
    let v177 : string = "v168.update($0)"
    Fable.Core.PyInterop.emitPyExpr v174 v177 
    let v179 : string = "v168.hexdigest()"
    let v180 : string = Fable.Core.PyInterop.emitPyExpr () v179 
    let _run_target_args'_v5 = v180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v184 : string = null |> unbox<string>
    let _run_target_args'_v5 = v184 
    #endif
#else
    let v187 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v188 : System.Security.Cryptography.SHA256 = v187 ()
    use v188 = v188 
    let v189 : System.Security.Cryptography.SHA256 = v188 
    let v190 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v191 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v192 : (string -> (uint8 [])) = v191 v190
    let v193 : (uint8 []) = v192 v0
    let v194 : ((uint8 []) -> (uint8 [])) = v189.ComputeHash
    let v195 : (uint8 []) = v194 v193
    let v196 : int32 = v195.Length
    let v197 : (string []) = Array.zeroCreate<string> (v196)
    let v198 : Mut5 = {l0 = 0} : Mut5
    while method32(v196, v198) do
        let v200 : int32 = v198.l0
        let v201 : uint8 = v195.[int v200]
        let v202 : (string -> string) = v201.ToString
        let v203 : string = "x2"
        let v204 : string = v202 v203
        v197.[int v200] <- v204
        let v205 : int32 = v200 + 1
        v198.l0 <- v205
        ()
    let v210 : unit = ()
    let _let'_v210 =
        seq {
            for i = 0 to v197.Length - 1 do yield v197.[i]
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v213 : string seq = _let'_v210 
    let v219 : string = method33()
    let v221 : bool = v219 = "\n"
    let v223 : string =
        if v221 then
            method31(v219)
        else
            v219
    let v224 : (string -> (string seq -> string)) = String.concat
    let v225 : (string seq -> string) = v224 v223
    let v226 : string = v225 v213
    let _run_target_args'_v5 = v226 
    #endif
    let v229 : string = _run_target_args'_v5 
    v229
and method34 () : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "std::env::current_dir()"
    let v6 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : std_path_PathBuf = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : std_path_PathBuf = _run_target_args'_v8 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "$0.display()"
    let v28 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "$0.display()"
    let v30 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "$0.display()"
    let v32 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v19 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v42 
    #endif
#else
    let v46 : std_path_Display = v19 |> unbox<std_path_Display>
    let _run_target_args'_v26 = v46 
    #endif
    let v49 : std_path_Display = _run_target_args'_v26 
    (* run_target_args'
    let v59 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "format!(\"{}\", $0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v60 
    let _run_target_args'_v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "format!(\"{}\", $0)"
    let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v62 
    let _run_target_args'_v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "format!(\"{}\", $0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v49 v64 
    let _run_target_args'_v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v75 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v75 
    #endif
#else
    let v79 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v59 = v79 
    #endif
    let v82 : std_string_String = _run_target_args'_v59 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _run_target_args'_v4 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = null |> unbox<string>
    let _run_target_args'_v4 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = null |> unbox<string>
    let _run_target_args'_v4 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = "fs"
    let v99 : IFs = Fable.Core.JsInterop.importAll v98 
    let v100 : string = "fs.realpathSync('.')"
    let v101 : string = Fable.Core.JsInterop.emitJsExpr () v100 
    let _run_target_args'_v4 = v101 
    #endif
#if FABLE_COMPILER_PYTHON
    let v103 : string = null |> unbox<string>
    let _run_target_args'_v4 = v103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = null |> unbox<string>
    let _run_target_args'_v4 = v107 
    #endif
#else
    let v110 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v111 : string = v110 ()
    let _run_target_args'_v4 = v111 
    #endif
    let v112 : string = _run_target_args'_v4 
    v112
and method36 (v0 : string, v1 : string) : string =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
#else
    let v31 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v31 
    #endif
    let v34 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v44 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v45 
    let _run_target_args'_v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v47 
    let _run_target_args'_v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v34 v49 
    let _run_target_args'_v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v60 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v60 
    #endif
#else
    let v64 : std_string_String = v34 |> unbox<std_string_String>
    let _run_target_args'_v44 = v64 
    #endif
    let v67 : std_string_String = _run_target_args'_v44 
    (* run_target_args'
    let v77 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "std::path::PathBuf::from($0)"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v78 
    let _run_target_args'_v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "std::path::PathBuf::from($0)"
    let v81 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v80 
    let _run_target_args'_v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "std::path::PathBuf::from($0)"
    let v83 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v67 v82 
    let _run_target_args'_v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v85 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v93 
    #endif
#else
    let v97 : std_path_PathBuf = v67 |> unbox<std_path_PathBuf>
    let _run_target_args'_v77 = v97 
    #endif
    let v100 : std_path_PathBuf = _run_target_args'_v77 
    (* run_target_args'
    let v110 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v111 
    let _run_target_args'_v110 = v112 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v113 
    let _run_target_args'_v110 = v114 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : string = "&*$0"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v115 
    let _run_target_args'_v110 = v116 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v122 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v122 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v126 
    #endif
#else
    let v130 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v110 = v130 
    #endif
    let v133 : Ref<Str> = _run_target_args'_v110 
    (* run_target_args'
    let v143 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "String::from($0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v144 
    let _run_target_args'_v143 = v145 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = "String::from($0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v146 
    let _run_target_args'_v143 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "String::from($0)"
    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v133 v148 
    let _run_target_args'_v143 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v155 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v155 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v159 
    #endif
#else
    let v163 : std_string_String = v133 |> unbox<std_string_String>
    let _run_target_args'_v143 = v163 
    #endif
    let v166 : std_string_String = _run_target_args'_v143 
    let v172 : string = "$0.join($1)"
    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v100, v166) v172 
    (* run_target_args'
    let v178 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v179 : string = "$0.display()"
    let v180 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v179 
    let _run_target_args'_v178 = v180 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v181 : string = "$0.display()"
    let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v181 
    let _run_target_args'_v178 = v182 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v183 : string = "$0.display()"
    let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v173 v183 
    let _run_target_args'_v178 = v184 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v186 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v186 
    #endif
#if FABLE_COMPILER_PYTHON
    let v190 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v190 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v194 
    #endif
#else
    let v198 : std_path_Display = v173 |> unbox<std_path_Display>
    let _run_target_args'_v178 = v198 
    #endif
    let v201 : std_path_Display = _run_target_args'_v178 
    (* run_target_args'
    let v211 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v212 : string = "format!(\"{}\", $0)"
    let v213 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v212 
    let _run_target_args'_v211 = v213 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v214 : string = "format!(\"{}\", $0)"
    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v214 
    let _run_target_args'_v211 = v215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v216 : string = "format!(\"{}\", $0)"
    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v216 
    let _run_target_args'_v211 = v217 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v219 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v219 
    #endif
#if FABLE_COMPILER_PYTHON
    let v223 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v223 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v227 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v227 
    #endif
#else
    let v231 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v211 = v231 
    #endif
    let v234 : std_string_String = _run_target_args'_v211 
    let v240 : string = "fable_library_rust::String_::fromString($0)"
    let v241 : string = Fable.Core.RustInterop.emitRustExpr v234 v240 
    let _run_target_args'_v6 = v241 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v242 : US3 = US3_1
    let v243 : US4 = US4_3(v242)
    let v244 : string = $"file_system.(</>) / target: {v243} / a: {v0} / b: {v1}"
    let v245 : string = failwith<string> v244
    let _run_target_args'_v6 = v245 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v247 : string = null |> unbox<string>
    let _run_target_args'_v6 = v247 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v250 : string = "path"
    let v251 : IPathJoin = Fable.Core.JsInterop.importAll v250 
    let v252 : string = "v251.join($0, $1)"
    let v253 : string = Fable.Core.JsInterop.emitJsExpr struct (v0, v1) v252 
    let _run_target_args'_v6 = v253 
    #endif
#if FABLE_COMPILER_PYTHON
    let v254 : US3 = US3_0
    let v255 : US4 = US4_5(v254)
    let v256 : string = $"file_system.(</>) / target: {v255} / a: {v0} / b: {v1}"
    let v257 : string = failwith<string> v256
    let _run_target_args'_v6 = v257 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v258 : US3 = US3_1
    let v259 : US4 = US4_1(v258)
    let v260 : string = $"file_system.(</>) / target: {v259} / a: {v0} / b: {v1}"
    let v261 : string = failwith<string> v260
    let _run_target_args'_v6 = v261 
    #endif
#else
    let v262 : string = System.IO.Path.Combine (v0, v1)
    let _run_target_args'_v6 = v262 
    #endif
    let v263 : string = _run_target_args'_v6 
    v263
and method38 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_file()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.File.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure15 () (v0 : string) : bool =
    method38(v0)
and method39 (v0 : string) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v109 : bool =
        if v106 then
            let v107 : string = "$0.is_dir()"
            let v108 : bool = Fable.Core.RustInterop.emitRustExpr v99 v107 
            v108
        else
            false
    let _run_target_args'_v5 = v109 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v111 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v115 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = "fs"
    let v119 : IFsExistsSync = Fable.Core.JsInterop.importAll v118 
    let v120 : string = "$0.existsSync($1)"
    let v121 : bool = Fable.Core.JsInterop.emitJsExpr struct (v119, v0) v120 
    let _run_target_args'_v5 = v121 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v127 
    #endif
#else
    let v130 : (string -> bool) = System.IO.Directory.Exists
    let v131 : bool = v130 v0
    let _run_target_args'_v5 = v131 
    #endif
    let v132 : bool = _run_target_args'_v5 
    v132
and closure16 () (v0 : string) : bool =
    method39(v0)
and method41 (v0 : string) : string option =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v106 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v109 
    (* run_target_args'
    let v115 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : string = "$0.display()"
    let v117 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v110 v116 
    let _run_target_args'_v115 = v117 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v118 : string = "$0.display()"
    let v119 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v110 v118 
    let _run_target_args'_v115 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v120 : string = "$0.display()"
    let v121 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v110 v120 
    let _run_target_args'_v115 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v131 
    #endif
#else
    let v135 : std_path_Display = v110 |> unbox<std_path_Display>
    let _run_target_args'_v115 = v135 
    #endif
    let v138 : std_path_Display = _run_target_args'_v115 
    (* run_target_args'
    let v148 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "format!(\"{}\", $0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v149 
    let _run_target_args'_v148 = v150 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v151 : string = "format!(\"{}\", $0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v151 
    let _run_target_args'_v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v153 : string = "format!(\"{}\", $0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v153 
    let _run_target_args'_v148 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v160 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v160 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v164 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v164 
    #endif
#else
    let v168 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v148 = v168 
    #endif
    let v171 : std_string_String = _run_target_args'_v148 
    let v177 : string = "fable_library_rust::String_::fromString($0)"
    let v178 : string = Fable.Core.RustInterop.emitRustExpr v171 v177 
    let v179 : string = "true; $0 })"
    let v180 : bool = Fable.Core.RustInterop.emitRustExpr v178 v179 
    let v181 : string = "_optionm_map_"
    let v182 : string option = Fable.Core.RustInterop.emitRustExpr () v181 
    let _run_target_args'_v5 = v182 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string option = None
    let _run_target_args'_v5 = v184 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v188 : string option = None
    let _run_target_args'_v5 = v188 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : string = "path"
    let v192 : IPathDirname = Fable.Core.JsInterop.importAll v191 
    let v193 : string = "v192.dirname($0)"
    let v194 : string = Fable.Core.JsInterop.emitJsExpr v0 v193 
    let v195 : bool = v194 = v0
    let v198 : US5 =
        if v195 then
            US5_1
        else
            US5_0(v194)
    let v209 : string option =
        match v198 with
        | US5_1 -> (* None *)
            let v205 : string option = None
            v205
        | US5_0(v199) -> (* Some *)
            let v201 : string option = Some v199 
            v201
    let _run_target_args'_v5 = v209 
    #endif
#if FABLE_COMPILER_PYTHON
    let v211 : string option = None
    let _run_target_args'_v5 = v211 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v215 : string option = None
    let _run_target_args'_v5 = v215 
    #endif
#else
    let v218 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v219 : System_IO_DirectoryInfo = v218 v0
    let v221 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v225 : bool = v219 = v221 
    let v267 : US5 =
        if v225 then
            US5_1
        else
            (* run_target_args'
            let v233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v235 : string = null |> unbox<string>
            let _run_target_args'_v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v239 : string = null |> unbox<string>
            let _run_target_args'_v233 = v239 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v243 : string = null |> unbox<string>
            let _run_target_args'_v233 = v243 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v247 : string = null |> unbox<string>
            let _run_target_args'_v233 = v247 
            #endif
#if FABLE_COMPILER_PYTHON
            let v251 : string = null |> unbox<string>
            let _run_target_args'_v233 = v251 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v255 : string = null |> unbox<string>
            let _run_target_args'_v233 = v255 
            #endif
#else
            let v258 : (System_IO_DirectoryInfo -> string) = _.FullName
            let v259 : string = v258 v219
            let _run_target_args'_v233 = v259 
            #endif
            let v260 : string = _run_target_args'_v233 
            US5_0(v260)
    let v278 : string option =
        match v267 with
        | US5_1 -> (* None *)
            let v274 : string option = None
            v274
        | US5_0(v268) -> (* Some *)
            let v270 : string option = Some v268 
            v270
    let _run_target_args'_v5 = v278 
    #endif
    let v279 : string option = _run_target_args'_v5 
    v279
and method42 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool), v4 : string) : US13 =
    let v5 : string = method36(v4, v0)
    let v6 : bool = v3 v5
    if v6 then
        US13_0(v4)
    else
        let v8 : string option = method41(v4)
        let v11 : (string -> US5) = method6()
        let v12 : US5 option = v8 |> Option.map v11 
        let v32 : US5 = US5_1
        let v33 : US5 = v12 |> Option.defaultValue v32 
        match v33 with
        | US5_1 -> (* None *)
            let v39 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v40 : string = $" '{v0}' at '{v1}' (until '{v4}')"
            let v41 : string = v39 + v40 
            US13_1(v41)
        | US5_0(v37) -> (* Some *)
            method42(v0, v1, v2, v3, v37)
and method40 (v0 : string, v1 : string, v2 : bool, v3 : (string -> bool)) : US13 =
    let v4 : string = method36(v1, v0)
    let v5 : bool = v3 v4
    if v5 then
        US13_0(v1)
    else
        let v7 : string option = method41(v1)
        let v10 : (string -> US5) = method6()
        let v11 : US5 option = v7 |> Option.map v10 
        let v31 : US5 = US5_1
        let v32 : US5 = v11 |> Option.defaultValue v31 
        match v32 with
        | US5_1 -> (* None *)
            let v38 : string = $"""file_system.find_parent / No parent for {if v2 then "file" else "dir"}"""
            let v39 : string = $" '{v0}' at '{v1}' (until '{v1}')"
            let v40 : string = v38 + v39 
            US13_1(v40)
        | US5_0(v36) -> (* Some *)
            method42(v0, v1, v2, v3, v36)
and method37 (v0 : US12, v1 : string, v2 : string) : US13 =
    let v3 : bool =
        match v0 with
        | US12_0 -> (* File *)
            true
        | _ ->
            false
    let v6 : (string -> bool) =
        if v3 then
            closure15()
        else
            closure16()
    method40(v1, v2, v3, v6)
and method43 () : string =
    
    
    
    
    
    let v2 : string = "Warning"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_yellow"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_yellow"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_yellow"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[93m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[93m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[93m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[93m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method45 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "dir"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "error"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method44 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method45(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.get_workspace_root"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure17 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_3
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method43()
        let v47 : string = method44(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method50 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v7 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "format!(\"{:#?}\", $0)"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v16 
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let _run_target_args'_v7 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : string = $"%A{v0}"
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : string = $"%A{v0}"
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : string = $"%A{v0}"
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : string = $"%A{v0}"
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : string = _run_target_args'_v7 
    let v43 : string = $"{v36}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v2, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = v2.l0
    v51
and closure18 () (v0 : std_io_Error) : string =
    method50(v0)
and method49 () : (std_io_Error -> string) =
    closure18()
and closure19 () (v0 : std_path_PathBuf) : US14 =
    US14_0(v0)
and method51 () : (std_path_PathBuf -> US14) =
    closure19()
and closure20 () (v0 : string) : US14 =
    US14_1(v0)
and method52 () : (string -> US14) =
    closure20()
and method55 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v179 : US5 = US5_1
    let v180 : US5 = v159 |> Option.defaultValue v179 
    let v187 : string =
        match v180 with
        | US5_1 -> (* None *)
            let v185 : string = ""
            v185
        | US5_0(v184) -> (* Some *)
            v184
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v188 : US3 = US3_1
    let v189 : US4 = US4_3(v188)
    let v190 : string = $"file_system.get_file_name / target: {v189} / path: {v0}"
    let v191 : string = failwith<string> v190
    let _run_target_args'_v5 = v191 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = null |> unbox<string>
    let _run_target_args'_v5 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v196 : string = "path"
    let v197 : IPathBasename = Fable.Core.JsInterop.importAll v196 
    let v198 : string = "v197.basename($0)"
    let v199 : string = Fable.Core.JsInterop.emitJsExpr v0 v198 
    let _run_target_args'_v5 = v199 
    #endif
#if FABLE_COMPILER_PYTHON
    let v200 : US3 = US3_0
    let v201 : US4 = US4_5(v200)
    let v202 : string = $"file_system.get_file_name / target: {v201} / path: {v0}"
    let v203 : string = failwith<string> v202
    let _run_target_args'_v5 = v203 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : US3 = US3_1
    let v205 : US4 = US4_1(v204)
    let v206 : string = $"file_system.get_file_name / target: {v205} / path: {v0}"
    let v207 : string = failwith<string> v206
    let _run_target_args'_v5 = v207 
    #endif
#else
    let v208 : (string -> string) = System.IO.Path.GetFileName
    let v209 : string = v208 v0
    let _run_target_args'_v5 = v209 
    #endif
    let v210 : string = _run_target_args'_v5 
    v210
and method56 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"{v0}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = v2.l0
    v12
and method54 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method55(v4)
    let v6 : string option = method41(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method56(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v74 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v75 : string = "Err($0)"
        let v76 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v75 
        let _run_target_args'_v74 = v76 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v77 
        let _run_target_args'_v74 = v78 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v79 
        let _run_target_args'_v74 = v80 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v81 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v81 
        #endif
#if FABLE_COMPILER_PYTHON
        let v82 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v82 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v83 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v83 
        #endif
#else
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v84 
        #endif
        let v85 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v74 
        v85
    else
        match v31 with
        | US5_0(v88) -> (* Some *)
            let v91 : string = ""
            let v92 : bool = v4 <> v91 
            if v92 then
                let v95 : uint8 = v2 + 1uy
                let v96 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v95
                let v97 : Result<std_path_PathBuf, std_io_Error> = v96 v88
                let v98 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v100 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v101 : string = "$0.map_err(|x| $1(x))"
                let v102 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v101 
                let _run_target_args'_v100 = v102 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v103 
                let _run_target_args'_v100 = v104 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v105 
                let _run_target_args'_v100 = v106 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v107 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v107 
                #endif
#if FABLE_COMPILER_PYTHON
                let v108 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v108 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v109 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v109 
                #endif
#else
                let v110 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v110 
                #endif
                let v111 : Result<std_path_PathBuf, string> = _run_target_args'_v100 
                let v114 : (std_path_PathBuf -> US14) = method51()
                let v115 : (string -> US14) = method52()
                let v117 : US14 = match v111 with Ok x -> v114 x | Error x -> v115 x
                match v117 with
                | US14_1(v273) -> (* Error *)
                    let v274 : string = $"file_system.read_link / "
                    let v275 : string = $"error': {v273} / error: {v35} / name: {v5}"
                    let v276 : string = v274 + v275 
                    (* run_target_args'
                    let v281 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v282 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v283 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v276 v282 
                    let _run_target_args'_v281 = v283 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v284 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v285 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v276 v284 
                    let _run_target_args'_v281 = v285 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v286 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v287 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v276 v286 
                    let _run_target_args'_v281 = v287 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v289 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v289 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v293 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v293 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v297 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v297 
                    #endif
#else
                    let v301 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v301 
                    #endif
                    let v304 : std_io_Error = _run_target_args'_v281 
                    (* run_target_args'
                    let v311 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v312 : string = "Err($0)"
                    let v313 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v304 v312 
                    let _run_target_args'_v311 = v313 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v314 : string = "Err($0)"
                    let v315 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v304 v314 
                    let _run_target_args'_v311 = v315 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v316 : string = "Err($0)"
                    let v317 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v304 v316 
                    let _run_target_args'_v311 = v317 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v318 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v318 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v319 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v319 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v320 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v320 
                    #endif
#else
                    let v321 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v321 
                    #endif
                    let v322 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v311 
                    v322
                | US14_0(v120) -> (* Ok *)
                    (* run_target_args'
                    let v125 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v126 : string = "$0.display()"
                    let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v120 v126 
                    let _run_target_args'_v125 = v127 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v120 v128 
                    let _run_target_args'_v125 = v129 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v120 v130 
                    let _run_target_args'_v125 = v131 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v133 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v133 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v137 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v137 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v141 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v141 
                    #endif
#else
                    let v145 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v145 
                    #endif
                    let v148 : std_path_Display = _run_target_args'_v125 
                    let v155 : string = v148 |> string 
                    let v158 : string = method36(v155, v5)
                    (* run_target_args'
                    let v163 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v164 : string = "&*$0"
                    let v165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v164 
                    let _run_target_args'_v163 = v165 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v166 : string = "&*$0"
                    let v167 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v166 
                    let _run_target_args'_v163 = v167 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v168 : string = "&*$0"
                    let v169 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v168 
                    let _run_target_args'_v163 = v169 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v171 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v171 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v175 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v175 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v179 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v179 
                    #endif
#else
                    let v183 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v183 
                    #endif
                    let v186 : Ref<Str> = _run_target_args'_v163 
                    (* run_target_args'
                    let v196 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v197 : string = "String::from($0)"
                    let v198 : std_string_String = Fable.Core.RustInterop.emitRustExpr v186 v197 
                    let _run_target_args'_v196 = v198 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v199 : string = "String::from($0)"
                    let v200 : std_string_String = Fable.Core.RustInterop.emitRustExpr v186 v199 
                    let _run_target_args'_v196 = v200 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v201 : string = "String::from($0)"
                    let v202 : std_string_String = Fable.Core.RustInterop.emitRustExpr v186 v201 
                    let _run_target_args'_v196 = v202 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v204 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v204 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v208 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v208 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v212 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v212 
                    #endif
#else
                    let v216 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v216 
                    #endif
                    let v219 : std_string_String = _run_target_args'_v196 
                    (* run_target_args'
                    let v229 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v230 : string = "std::path::PathBuf::from($0)"
                    let v231 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v219 v230 
                    let _run_target_args'_v229 = v231 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v232 : string = "std::path::PathBuf::from($0)"
                    let v233 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v219 v232 
                    let _run_target_args'_v229 = v233 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v234 : string = "std::path::PathBuf::from($0)"
                    let v235 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v219 v234 
                    let _run_target_args'_v229 = v235 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v237 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v237 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v241 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v241 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v245 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v245 
                    #endif
#else
                    let v249 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v249 
                    #endif
                    let v252 : std_path_PathBuf = _run_target_args'_v229 
                    (* run_target_args'
                    let v259 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v260 : string = "Ok($0)"
                    let v261 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v252 v260 
                    let _run_target_args'_v259 = v261 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v262 : string = "Ok($0)"
                    let v263 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v252 v262 
                    let _run_target_args'_v259 = v263 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v264 : string = "Ok($0)"
                    let v265 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v252 v264 
                    let _run_target_args'_v259 = v265 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v266 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v266 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v267 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v267 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v268 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v268 
                    #endif
#else
                    let v269 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v269 
                    #endif
                    let v270 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v259 
                    v270
            else
                let v327 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v328 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v329 : string = v327 + v328 
                (* run_target_args'
                let v334 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v335 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v336 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v329 v335 
                let _run_target_args'_v334 = v336 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v337 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v338 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v329 v337 
                let _run_target_args'_v334 = v338 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v339 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v340 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v329 v339 
                let _run_target_args'_v334 = v340 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v342 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v342 
                #endif
#if FABLE_COMPILER_PYTHON
                let v346 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v346 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v350 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v350 
                #endif
#else
                let v354 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v354 
                #endif
                let v357 : std_io_Error = _run_target_args'_v334 
                (* run_target_args'
                let v364 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v365 : string = "Err($0)"
                let v366 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v357 v365 
                let _run_target_args'_v364 = v366 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v367 : string = "Err($0)"
                let v368 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v357 v367 
                let _run_target_args'_v364 = v368 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v369 : string = "Err($0)"
                let v370 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v357 v369 
                let _run_target_args'_v364 = v370 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v371 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v371 
                #endif
#if FABLE_COMPILER_PYTHON
                let v372 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v372 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v373 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v373 
                #endif
#else
                let v374 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v374 
                #endif
                let v375 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v364 
                v375
        | _ ->
            let v379 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v380 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v381 : string = v379 + v380 
            (* run_target_args'
            let v386 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v387 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v388 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v381 v387 
            let _run_target_args'_v386 = v388 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v389 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v390 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v381 v389 
            let _run_target_args'_v386 = v390 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v391 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v392 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v381 v391 
            let _run_target_args'_v386 = v392 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v394 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v394 
            #endif
#if FABLE_COMPILER_PYTHON
            let v398 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v398 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v402 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v402 
            #endif
#else
            let v406 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v406 
            #endif
            let v409 : std_io_Error = _run_target_args'_v386 
            (* run_target_args'
            let v416 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v417 : string = "Err($0)"
            let v418 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v409 v417 
            let _run_target_args'_v416 = v418 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v419 : string = "Err($0)"
            let v420 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v409 v419 
            let _run_target_args'_v416 = v420 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v421 : string = "Err($0)"
            let v422 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v409 v421 
            let _run_target_args'_v416 = v422 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v423 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v423 
            #endif
#if FABLE_COMPILER_PYTHON
            let v424 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v424 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v425 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v425 
            #endif
#else
            let v426 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v426 
            #endif
            let v427 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v416 
            v427
and method53 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "std::fs::read_link(&*$0)"
    let v9 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v9, v10) v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v21 
    #endif
#else
    let v22 : Result<std_path_PathBuf, string> = match v9 with Ok x -> Ok x | Error x -> Error (v10 x)
    let _run_target_args'_v12 = v22 
    #endif
    let v23 : Result<std_path_PathBuf, string> = _run_target_args'_v12 
    let v26 : (std_path_PathBuf -> US14) = method51()
    let v27 : (string -> US14) = method52()
    let v29 : US14 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v52 : Result<std_path_PathBuf, std_io_Error> =
        match v29 with
        | US14_1(v48) -> (* Error *)
            let v49 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v49, v1, v48, v2)
        | US14_0(v32) -> (* Ok *)
            (* run_target_args'
            let v34 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v35 : string = "Ok($0)"
            let v36 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v35 
            let _run_target_args'_v34 = v36 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : string = "Ok($0)"
            let v38 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v37 
            let _run_target_args'_v34 = v38 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v39 : string = "Ok($0)"
            let v40 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v32 v39 
            let _run_target_args'_v34 = v40 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v41 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v41 
            #endif
#if FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v42 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v43 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v43 
            #endif
#else
            let v44 : Result<std_path_PathBuf, std_io_Error> = v32 |> Ok
            let _run_target_args'_v34 = v44 
            #endif
            let v45 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v34 
            v45
    let _run_target_args'_v7 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::fs::read_link(&*$0)"
    let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v53 
    let v55 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v57 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v58 : string = "$0.map_err(|x| $1(x))"
    let v59 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v58 
    let _run_target_args'_v57 = v59 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v60 : string = "$0.map_err(|x| $1(x))"
    let v61 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v60 
    let _run_target_args'_v57 = v61 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v62 : string = "$0.map_err(|x| $1(x))"
    let v63 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v54, v55) v62 
    let _run_target_args'_v57 = v63 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v66 
    #endif
#else
    let v67 : Result<std_path_PathBuf, string> = match v54 with Ok x -> Ok x | Error x -> Error (v55 x)
    let _run_target_args'_v57 = v67 
    #endif
    let v68 : Result<std_path_PathBuf, string> = _run_target_args'_v57 
    let v71 : (std_path_PathBuf -> US14) = method51()
    let v72 : (string -> US14) = method52()
    let v74 : US14 = match v68 with Ok x -> v71 x | Error x -> v72 x
    let v97 : Result<std_path_PathBuf, std_io_Error> =
        match v74 with
        | US14_1(v93) -> (* Error *)
            let v94 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v94, v1, v93, v2)
        | US14_0(v77) -> (* Ok *)
            (* run_target_args'
            let v79 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v80 : string = "Ok($0)"
            let v81 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v80 
            let _run_target_args'_v79 = v81 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v82 : string = "Ok($0)"
            let v83 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v82 
            let _run_target_args'_v79 = v83 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v84 : string = "Ok($0)"
            let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v77 v84 
            let _run_target_args'_v79 = v85 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v86 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v86 
            #endif
#if FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v87 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v88 
            #endif
#else
            let v89 : Result<std_path_PathBuf, std_io_Error> = v77 |> Ok
            let _run_target_args'_v79 = v89 
            #endif
            let v90 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v79 
            v90
    let _run_target_args'_v7 = v97 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v98 : string = "std::fs::read_link(&*$0)"
    let v99 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v98 
    let v100 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "$0.map_err(|x| $1(x))"
    let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "$0.map_err(|x| $1(x))"
    let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "$0.map_err(|x| $1(x))"
    let v108 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v99, v100) v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v110 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v111 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v111 
    #endif
#else
    let v112 : Result<std_path_PathBuf, string> = match v99 with Ok x -> Ok x | Error x -> Error (v100 x)
    let _run_target_args'_v102 = v112 
    #endif
    let v113 : Result<std_path_PathBuf, string> = _run_target_args'_v102 
    let v116 : (std_path_PathBuf -> US14) = method51()
    let v117 : (string -> US14) = method52()
    let v119 : US14 = match v113 with Ok x -> v116 x | Error x -> v117 x
    let v142 : Result<std_path_PathBuf, std_io_Error> =
        match v119 with
        | US14_1(v138) -> (* Error *)
            let v139 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method54(v0, v139, v1, v138, v2)
        | US14_0(v122) -> (* Ok *)
            (* run_target_args'
            let v124 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v125 : string = "Ok($0)"
            let v126 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v125 
            let _run_target_args'_v124 = v126 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v127 : string = "Ok($0)"
            let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
            let _run_target_args'_v124 = v128 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v129 : string = "Ok($0)"
            let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
            let _run_target_args'_v124 = v130 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v131 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v131 
            #endif
#if FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v132 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v133 
            #endif
#else
            let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
            let _run_target_args'_v124 = v134 
            #endif
            let v135 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v124 
            v135
    let _run_target_args'_v7 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v148 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v152 
    #endif
#else
    let v156 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v7 = v156 
    #endif
    let v159 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v7 
    v159
and closure22 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method53(v0, v1, v2)
and closure21 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure22(v0, v1)
and method57 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method55(v0)
    let v5 : string option = method41(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method56(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v73 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v74 : string = "Err($0)"
        let v75 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v74 
        let _run_target_args'_v73 = v75 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v76 : string = "Err($0)"
        let v77 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v76 
        let _run_target_args'_v73 = v77 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v78 
        let _run_target_args'_v73 = v79 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v80 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v80 
        #endif
#if FABLE_COMPILER_PYTHON
        let v81 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v81 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v82 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v82 
        #endif
#else
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v83 
        #endif
        let v84 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v73 
        v84
    else
        match v30 with
        | US5_0(v87) -> (* Some *)
            let v90 : string = ""
            let v91 : bool = v0 <> v90 
            if v91 then
                let v94 : uint8 = v2 + 1uy
                let v95 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v94
                let v96 : Result<std_path_PathBuf, std_io_Error> = v95 v87
                let v97 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v99 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v100 : string = "$0.map_err(|x| $1(x))"
                let v101 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v96, v97) v100 
                let _run_target_args'_v99 = v101 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v102 : string = "$0.map_err(|x| $1(x))"
                let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v96, v97) v102 
                let _run_target_args'_v99 = v103 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v96, v97) v104 
                let _run_target_args'_v99 = v105 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v106 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v106 
                #endif
#if FABLE_COMPILER_PYTHON
                let v107 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v107 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v108 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v108 
                #endif
#else
                let v109 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v109 
                #endif
                let v110 : Result<std_path_PathBuf, string> = _run_target_args'_v99 
                let v113 : (std_path_PathBuf -> US14) = method51()
                let v114 : (string -> US14) = method52()
                let v116 : US14 = match v110 with Ok x -> v113 x | Error x -> v114 x
                match v116 with
                | US14_1(v272) -> (* Error *)
                    let v273 : string = $"file_system.read_link / "
                    let v274 : string = $"error': {v272} / error: {v34} / name: {v4}"
                    let v275 : string = v273 + v274 
                    (* run_target_args'
                    let v280 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v281 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v282 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v275 v281 
                    let _run_target_args'_v280 = v282 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v283 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v284 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v275 v283 
                    let _run_target_args'_v280 = v284 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v285 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v286 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v275 v285 
                    let _run_target_args'_v280 = v286 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v288 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v288 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v292 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v292 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v296 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v296 
                    #endif
#else
                    let v300 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v300 
                    #endif
                    let v303 : std_io_Error = _run_target_args'_v280 
                    (* run_target_args'
                    let v310 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v311 : string = "Err($0)"
                    let v312 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v303 v311 
                    let _run_target_args'_v310 = v312 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v313 : string = "Err($0)"
                    let v314 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v303 v313 
                    let _run_target_args'_v310 = v314 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v315 : string = "Err($0)"
                    let v316 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v303 v315 
                    let _run_target_args'_v310 = v316 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v317 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v317 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v318 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v318 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v319 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v319 
                    #endif
#else
                    let v320 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v320 
                    #endif
                    let v321 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v310 
                    v321
                | US14_0(v119) -> (* Ok *)
                    (* run_target_args'
                    let v124 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v125 : string = "$0.display()"
                    let v126 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v125 
                    let _run_target_args'_v124 = v126 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v127 : string = "$0.display()"
                    let v128 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v127 
                    let _run_target_args'_v124 = v128 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v129 
                    let _run_target_args'_v124 = v130 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v132 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v132 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v136 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v136 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v140 
                    #endif
#else
                    let v144 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v144 
                    #endif
                    let v147 : std_path_Display = _run_target_args'_v124 
                    let v154 : string = v147 |> string 
                    let v157 : string = method36(v154, v4)
                    (* run_target_args'
                    let v162 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v163 : string = "&*$0"
                    let v164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v163 
                    let _run_target_args'_v162 = v164 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v165 : string = "&*$0"
                    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v165 
                    let _run_target_args'_v162 = v166 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v167 : string = "&*$0"
                    let v168 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v167 
                    let _run_target_args'_v162 = v168 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v170 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v170 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v174 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v174 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v178 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v178 
                    #endif
#else
                    let v182 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v182 
                    #endif
                    let v185 : Ref<Str> = _run_target_args'_v162 
                    (* run_target_args'
                    let v195 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v196 : string = "String::from($0)"
                    let v197 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v196 
                    let _run_target_args'_v195 = v197 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v198 : string = "String::from($0)"
                    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v198 
                    let _run_target_args'_v195 = v199 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v200 : string = "String::from($0)"
                    let v201 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v200 
                    let _run_target_args'_v195 = v201 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v203 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v203 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v207 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v207 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v211 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v211 
                    #endif
#else
                    let v215 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v215 
                    #endif
                    let v218 : std_string_String = _run_target_args'_v195 
                    (* run_target_args'
                    let v228 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v229 : string = "std::path::PathBuf::from($0)"
                    let v230 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v218 v229 
                    let _run_target_args'_v228 = v230 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v231 : string = "std::path::PathBuf::from($0)"
                    let v232 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v218 v231 
                    let _run_target_args'_v228 = v232 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v233 : string = "std::path::PathBuf::from($0)"
                    let v234 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v218 v233 
                    let _run_target_args'_v228 = v234 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v236 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v236 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v240 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v240 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v244 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v244 
                    #endif
#else
                    let v248 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v248 
                    #endif
                    let v251 : std_path_PathBuf = _run_target_args'_v228 
                    (* run_target_args'
                    let v258 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v259 : string = "Ok($0)"
                    let v260 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v251 v259 
                    let _run_target_args'_v258 = v260 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v261 : string = "Ok($0)"
                    let v262 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v251 v261 
                    let _run_target_args'_v258 = v262 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v263 : string = "Ok($0)"
                    let v264 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v251 v263 
                    let _run_target_args'_v258 = v264 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v265 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v265 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v266 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v266 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v267 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v267 
                    #endif
#else
                    let v268 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v268 
                    #endif
                    let v269 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v258 
                    v269
            else
                let v326 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v327 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v328 : string = v326 + v327 
                (* run_target_args'
                let v333 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v334 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v335 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v328 v334 
                let _run_target_args'_v333 = v335 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v336 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v337 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v328 v336 
                let _run_target_args'_v333 = v337 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v338 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v339 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v328 v338 
                let _run_target_args'_v333 = v339 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v341 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v341 
                #endif
#if FABLE_COMPILER_PYTHON
                let v345 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v345 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v349 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v349 
                #endif
#else
                let v353 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v353 
                #endif
                let v356 : std_io_Error = _run_target_args'_v333 
                (* run_target_args'
                let v363 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v364 : string = "Err($0)"
                let v365 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v356 v364 
                let _run_target_args'_v363 = v365 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v366 : string = "Err($0)"
                let v367 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v356 v366 
                let _run_target_args'_v363 = v367 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v368 : string = "Err($0)"
                let v369 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v356 v368 
                let _run_target_args'_v363 = v369 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v370 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v370 
                #endif
#if FABLE_COMPILER_PYTHON
                let v371 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v371 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v372 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v372 
                #endif
#else
                let v373 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v373 
                #endif
                let v374 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v363 
                v374
        | _ ->
            let v378 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v379 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v380 : string = v378 + v379 
            (* run_target_args'
            let v385 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v386 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v387 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v380 v386 
            let _run_target_args'_v385 = v387 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v388 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v389 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v380 v388 
            let _run_target_args'_v385 = v389 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v390 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v391 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v380 v390 
            let _run_target_args'_v385 = v391 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v393 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v393 
            #endif
#if FABLE_COMPILER_PYTHON
            let v397 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v397 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v401 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v401 
            #endif
#else
            let v405 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v405 
            #endif
            let v408 : std_io_Error = _run_target_args'_v385 
            (* run_target_args'
            let v415 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v416 : string = "Err($0)"
            let v417 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v408 v416 
            let _run_target_args'_v415 = v417 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v418 : string = "Err($0)"
            let v419 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v408 v418 
            let _run_target_args'_v415 = v419 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v420 : string = "Err($0)"
            let v421 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v408 v420 
            let _run_target_args'_v415 = v421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v422 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v422 
            #endif
#if FABLE_COMPILER_PYTHON
            let v423 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v423 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v424 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v424 
            #endif
#else
            let v425 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v425 
            #endif
            let v426 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v415 
            v426
and method48 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "std::fs::read_link(&*$0)"
    let v8 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "$0.map_err(|x| $1(x))"
    let v15 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "$0.map_err(|x| $1(x))"
    let v17 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v9) v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v20 
    #endif
#else
    let v21 : Result<std_path_PathBuf, string> = match v8 with Ok x -> Ok x | Error x -> Error (v9 x)
    let _run_target_args'_v11 = v21 
    #endif
    let v22 : Result<std_path_PathBuf, string> = _run_target_args'_v11 
    let v25 : (std_path_PathBuf -> US14) = method51()
    let v26 : (string -> US14) = method52()
    let v28 : US14 = match v22 with Ok x -> v25 x | Error x -> v26 x
    let v51 : Result<std_path_PathBuf, std_io_Error> =
        match v28 with
        | US14_1(v47) -> (* Error *)
            let v48 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v48, v1, v47)
        | US14_0(v31) -> (* Ok *)
            (* run_target_args'
            let v33 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v34 : string = "Ok($0)"
            let v35 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v34 
            let _run_target_args'_v33 = v35 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v36 : string = "Ok($0)"
            let v37 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v36 
            let _run_target_args'_v33 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v38 : string = "Ok($0)"
            let v39 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v31 v38 
            let _run_target_args'_v33 = v39 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v41 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v41 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v42 
            #endif
#else
            let v43 : Result<std_path_PathBuf, std_io_Error> = v31 |> Ok
            let _run_target_args'_v33 = v43 
            #endif
            let v44 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v33 
            v44
    let _run_target_args'_v6 = v51 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v52 : string = "std::fs::read_link(&*$0)"
    let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "$0.map_err(|x| $1(x))"
    let v58 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v57 
    let _run_target_args'_v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "$0.map_err(|x| $1(x))"
    let v60 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v59 
    let _run_target_args'_v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "$0.map_err(|x| $1(x))"
    let v62 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v53, v54) v61 
    let _run_target_args'_v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v65 
    #endif
#else
    let v66 : Result<std_path_PathBuf, string> = match v53 with Ok x -> Ok x | Error x -> Error (v54 x)
    let _run_target_args'_v56 = v66 
    #endif
    let v67 : Result<std_path_PathBuf, string> = _run_target_args'_v56 
    let v70 : (std_path_PathBuf -> US14) = method51()
    let v71 : (string -> US14) = method52()
    let v73 : US14 = match v67 with Ok x -> v70 x | Error x -> v71 x
    let v96 : Result<std_path_PathBuf, std_io_Error> =
        match v73 with
        | US14_1(v92) -> (* Error *)
            let v93 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v93, v1, v92)
        | US14_0(v76) -> (* Ok *)
            (* run_target_args'
            let v78 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v79 : string = "Ok($0)"
            let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v79 
            let _run_target_args'_v78 = v80 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v81 : string = "Ok($0)"
            let v82 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v81 
            let _run_target_args'_v78 = v82 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v83 : string = "Ok($0)"
            let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v76 v83 
            let _run_target_args'_v78 = v84 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v85 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v85 
            #endif
#if FABLE_COMPILER_PYTHON
            let v86 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v86 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v87 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v87 
            #endif
#else
            let v88 : Result<std_path_PathBuf, std_io_Error> = v76 |> Ok
            let _run_target_args'_v78 = v88 
            #endif
            let v89 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v78 
            v89
    let _run_target_args'_v6 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "std::fs::read_link(&*$0)"
    let v98 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v97 
    let v99 : (std_io_Error -> string) = method49()
    (* run_target_args'
    let v101 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v102 : string = "$0.map_err(|x| $1(x))"
    let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v102 
    let _run_target_args'_v101 = v103 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v104 : string = "$0.map_err(|x| $1(x))"
    let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v104 
    let _run_target_args'_v101 = v105 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v106 : string = "$0.map_err(|x| $1(x))"
    let v107 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v98, v99) v106 
    let _run_target_args'_v101 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v110 
    #endif
#else
    let v111 : Result<std_path_PathBuf, string> = match v98 with Ok x -> Ok x | Error x -> Error (v99 x)
    let _run_target_args'_v101 = v111 
    #endif
    let v112 : Result<std_path_PathBuf, string> = _run_target_args'_v101 
    let v115 : (std_path_PathBuf -> US14) = method51()
    let v116 : (string -> US14) = method52()
    let v118 : US14 = match v112 with Ok x -> v115 x | Error x -> v116 x
    let v141 : Result<std_path_PathBuf, std_io_Error> =
        match v118 with
        | US14_1(v137) -> (* Error *)
            let v138 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure21(v0)
            method57(v0, v138, v1, v137)
        | US14_0(v121) -> (* Ok *)
            (* run_target_args'
            let v123 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v124 : string = "Ok($0)"
            let v125 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v124 
            let _run_target_args'_v123 = v125 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v126 : string = "Ok($0)"
            let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
            let _run_target_args'_v123 = v127 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v128 : string = "Ok($0)"
            let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
            let _run_target_args'_v123 = v129 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v130 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v130 
            #endif
#if FABLE_COMPILER_PYTHON
            let v131 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v131 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v132 
            #endif
#else
            let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
            let _run_target_args'_v123 = v133 
            #endif
            let v134 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v123 
            v134
    let _run_target_args'_v6 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v151 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v151 
    #endif
#else
    let v155 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _run_target_args'_v6 = v155 
    #endif
    let v158 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v6 
    v158
and method59 (v0 : System_IO_DirectoryInfo) : System.IO.FileAttributes =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System_IO_DirectoryInfo -> System.IO.FileAttributes) = _.Attributes
    let v31 : System.IO.FileAttributes = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System.IO.FileAttributes = _run_target_args'_v5 
    v32
and method60 () : System.IO.FileAttributes =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _run_target_args'_v4 = v26 
    #endif
#else
    let v29 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _run_target_args'_v4 = v29 
    #endif
    let v30 : System.IO.FileAttributes = _run_target_args'_v4 
    v30
and method61 (v0 : System.IO.FileAttributes, v1 : System.IO.FileAttributes) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : bool = v1.HasFlag v0 
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : bool = _run_target_args'_v6 
    v32
and method63 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method55(v4)
    let v6 : string option = method41(v4)
    let v9 : (string -> US5) = method6()
    let v10 : US5 option = v6 |> Option.map v9 
    let v30 : US5 = US5_1
    let v31 : US5 = v10 |> Option.defaultValue v30 
    let v35 : string = method50(v3)
    let v36 : bool = v2 >= 11uy
    if v36 then
        let v37 : string = $"file_system.read_link / "
        let v38 : string = $"path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v39 : string = v37 + v38 
        (* run_target_args'
        let v44 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v45 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v46 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v45 
        let _run_target_args'_v44 = v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v48 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v47 
        let _run_target_args'_v44 = v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v50 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v39 v49 
        let _run_target_args'_v44 = v50 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v56 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v56 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v60 
        #endif
#else
        let v64 : std_io_Error = v39 |> unbox<std_io_Error>
        let _run_target_args'_v44 = v64 
        #endif
        let v67 : std_io_Error = _run_target_args'_v44 
        (* run_target_args'
        let v74 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v75 : string = "Err($0)"
        let v76 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v75 
        let _run_target_args'_v74 = v76 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v77 : string = "Err($0)"
        let v78 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v77 
        let _run_target_args'_v74 = v78 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v79 : string = "Err($0)"
        let v80 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v67 v79 
        let _run_target_args'_v74 = v80 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v81 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v81 
        #endif
#if FABLE_COMPILER_PYTHON
        let v82 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v82 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v83 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v83 
        #endif
#else
        let v84 : Result<std_path_PathBuf, std_io_Error> = v67 |> Error
        let _run_target_args'_v74 = v84 
        #endif
        let v85 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v74 
        v85
    else
        match v31 with
        | US5_0(v88) -> (* Some *)
            let v91 : string = ""
            let v92 : bool = v4 <> v91 
            if v92 then
                let v95 : uint8 = v2 + 1uy
                let v96 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v95
                let v97 : Result<std_path_PathBuf, std_io_Error> = v96 v88
                let v98 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v100 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v101 : string = "$0.map_err(|x| $1(x))"
                let v102 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v101 
                let _run_target_args'_v100 = v102 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v103 : string = "$0.map_err(|x| $1(x))"
                let v104 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v103 
                let _run_target_args'_v100 = v104 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v105 : string = "$0.map_err(|x| $1(x))"
                let v106 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v97, v98) v105 
                let _run_target_args'_v100 = v106 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v107 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v107 
                #endif
#if FABLE_COMPILER_PYTHON
                let v108 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v108 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v109 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v109 
                #endif
#else
                let v110 : Result<std_path_PathBuf, string> = match v97 with Ok x -> Ok x | Error x -> Error (v98 x)
                let _run_target_args'_v100 = v110 
                #endif
                let v111 : Result<std_path_PathBuf, string> = _run_target_args'_v100 
                let v114 : (std_path_PathBuf -> US14) = method51()
                let v115 : (string -> US14) = method52()
                let v117 : US14 = match v111 with Ok x -> v114 x | Error x -> v115 x
                match v117 with
                | US14_1(v273) -> (* Error *)
                    let v274 : string = $"file_system.read_link / "
                    let v275 : string = $"error': {v273} / error: {v35} / name: {v5}"
                    let v276 : string = v274 + v275 
                    (* run_target_args'
                    let v281 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v282 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v283 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v276 v282 
                    let _run_target_args'_v281 = v283 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v284 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v285 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v276 v284 
                    let _run_target_args'_v281 = v285 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v286 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v287 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v276 v286 
                    let _run_target_args'_v281 = v287 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v289 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v289 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v293 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v293 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v297 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v297 
                    #endif
#else
                    let v301 : std_io_Error = v276 |> unbox<std_io_Error>
                    let _run_target_args'_v281 = v301 
                    #endif
                    let v304 : std_io_Error = _run_target_args'_v281 
                    (* run_target_args'
                    let v311 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v312 : string = "Err($0)"
                    let v313 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v304 v312 
                    let _run_target_args'_v311 = v313 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v314 : string = "Err($0)"
                    let v315 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v304 v314 
                    let _run_target_args'_v311 = v315 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v316 : string = "Err($0)"
                    let v317 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v304 v316 
                    let _run_target_args'_v311 = v317 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v318 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v318 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v319 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v319 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v320 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v320 
                    #endif
#else
                    let v321 : Result<std_path_PathBuf, std_io_Error> = v304 |> Error
                    let _run_target_args'_v311 = v321 
                    #endif
                    let v322 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v311 
                    v322
                | US14_0(v120) -> (* Ok *)
                    (* run_target_args'
                    let v125 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v126 : string = "$0.display()"
                    let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v120 v126 
                    let _run_target_args'_v125 = v127 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v128 : string = "$0.display()"
                    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v120 v128 
                    let _run_target_args'_v125 = v129 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v130 : string = "$0.display()"
                    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v120 v130 
                    let _run_target_args'_v125 = v131 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v133 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v133 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v137 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v137 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v141 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v141 
                    #endif
#else
                    let v145 : std_path_Display = v120 |> unbox<std_path_Display>
                    let _run_target_args'_v125 = v145 
                    #endif
                    let v148 : std_path_Display = _run_target_args'_v125 
                    let v155 : string = v148 |> string 
                    let v158 : string = method36(v155, v5)
                    (* run_target_args'
                    let v163 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v164 : string = "&*$0"
                    let v165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v164 
                    let _run_target_args'_v163 = v165 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v166 : string = "&*$0"
                    let v167 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v166 
                    let _run_target_args'_v163 = v167 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v168 : string = "&*$0"
                    let v169 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v168 
                    let _run_target_args'_v163 = v169 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v171 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v171 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v175 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v175 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v179 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v179 
                    #endif
#else
                    let v183 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v163 = v183 
                    #endif
                    let v186 : Ref<Str> = _run_target_args'_v163 
                    (* run_target_args'
                    let v196 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v197 : string = "String::from($0)"
                    let v198 : std_string_String = Fable.Core.RustInterop.emitRustExpr v186 v197 
                    let _run_target_args'_v196 = v198 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v199 : string = "String::from($0)"
                    let v200 : std_string_String = Fable.Core.RustInterop.emitRustExpr v186 v199 
                    let _run_target_args'_v196 = v200 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v201 : string = "String::from($0)"
                    let v202 : std_string_String = Fable.Core.RustInterop.emitRustExpr v186 v201 
                    let _run_target_args'_v196 = v202 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v204 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v204 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v208 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v208 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v212 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v212 
                    #endif
#else
                    let v216 : std_string_String = v186 |> unbox<std_string_String>
                    let _run_target_args'_v196 = v216 
                    #endif
                    let v219 : std_string_String = _run_target_args'_v196 
                    (* run_target_args'
                    let v229 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v230 : string = "std::path::PathBuf::from($0)"
                    let v231 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v219 v230 
                    let _run_target_args'_v229 = v231 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v232 : string = "std::path::PathBuf::from($0)"
                    let v233 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v219 v232 
                    let _run_target_args'_v229 = v233 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v234 : string = "std::path::PathBuf::from($0)"
                    let v235 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v219 v234 
                    let _run_target_args'_v229 = v235 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v237 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v237 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v241 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v241 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v245 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v245 
                    #endif
#else
                    let v249 : std_path_PathBuf = v219 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v229 = v249 
                    #endif
                    let v252 : std_path_PathBuf = _run_target_args'_v229 
                    (* run_target_args'
                    let v259 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v260 : string = "Ok($0)"
                    let v261 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v252 v260 
                    let _run_target_args'_v259 = v261 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v262 : string = "Ok($0)"
                    let v263 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v252 v262 
                    let _run_target_args'_v259 = v263 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v264 : string = "Ok($0)"
                    let v265 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v252 v264 
                    let _run_target_args'_v259 = v265 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v266 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v266 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v267 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v267 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v268 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v268 
                    #endif
#else
                    let v269 : Result<std_path_PathBuf, std_io_Error> = v252 |> Ok
                    let _run_target_args'_v259 = v269 
                    #endif
                    let v270 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v259 
                    v270
            else
                let v327 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v328 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
                let v329 : string = v327 + v328 
                (* run_target_args'
                let v334 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v335 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v336 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v329 v335 
                let _run_target_args'_v334 = v336 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v337 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v338 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v329 v337 
                let _run_target_args'_v334 = v338 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v339 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v340 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v329 v339 
                let _run_target_args'_v334 = v340 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v342 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v342 
                #endif
#if FABLE_COMPILER_PYTHON
                let v346 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v346 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v350 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v350 
                #endif
#else
                let v354 : std_io_Error = v329 |> unbox<std_io_Error>
                let _run_target_args'_v334 = v354 
                #endif
                let v357 : std_io_Error = _run_target_args'_v334 
                (* run_target_args'
                let v364 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v365 : string = "Err($0)"
                let v366 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v357 v365 
                let _run_target_args'_v364 = v366 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v367 : string = "Err($0)"
                let v368 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v357 v367 
                let _run_target_args'_v364 = v368 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v369 : string = "Err($0)"
                let v370 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v357 v369 
                let _run_target_args'_v364 = v370 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v371 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v371 
                #endif
#if FABLE_COMPILER_PYTHON
                let v372 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v372 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v373 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v373 
                #endif
#else
                let v374 : Result<std_path_PathBuf, std_io_Error> = v357 |> Error
                let _run_target_args'_v364 = v374 
                #endif
                let v375 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v364 
                v375
        | _ ->
            let v379 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v380 : string = $"path: {v0} / error: {v35} / path': {v4} / name: {v5}"
            let v381 : string = v379 + v380 
            (* run_target_args'
            let v386 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v387 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v388 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v381 v387 
            let _run_target_args'_v386 = v388 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v389 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v390 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v381 v389 
            let _run_target_args'_v386 = v390 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v391 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v392 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v381 v391 
            let _run_target_args'_v386 = v392 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v394 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v394 
            #endif
#if FABLE_COMPILER_PYTHON
            let v398 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v398 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v402 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v402 
            #endif
#else
            let v406 : std_io_Error = v381 |> unbox<std_io_Error>
            let _run_target_args'_v386 = v406 
            #endif
            let v409 : std_io_Error = _run_target_args'_v386 
            (* run_target_args'
            let v416 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v417 : string = "Err($0)"
            let v418 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v409 v417 
            let _run_target_args'_v416 = v418 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v419 : string = "Err($0)"
            let v420 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v409 v419 
            let _run_target_args'_v416 = v420 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v421 : string = "Err($0)"
            let v422 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v409 v421 
            let _run_target_args'_v416 = v422 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v423 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v423 
            #endif
#if FABLE_COMPILER_PYTHON
            let v424 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v424 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v425 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v425 
            #endif
#else
            let v426 : Result<std_path_PathBuf, std_io_Error> = v409 |> Error
            let _run_target_args'_v416 = v426 
            #endif
            let v427 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v416 
            v427
and method62 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v25 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v7 = v29 
    #endif
#else
    let v33 : System_IO_DirectoryInfo = v2 |> System_IO_DirectoryInfo 
    let _run_target_args'_v7 = v33 
    #endif
    let v36 : System_IO_DirectoryInfo = _run_target_args'_v7 
    let v42 : System.IO.FileAttributes = method59(v36)
    let v43 : System.IO.FileAttributes = method60()
    let v44 : bool = method61(v43, v42)
    if v44 then
        (* run_target_args'
        let v49 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v51 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v59 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v59 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v63 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v63 
        #endif
#if FABLE_COMPILER_PYTHON
        let v67 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v67 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v71 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v49 = v71 
        #endif
#else
        let v75 : System_IO_FileInfo = v2 |> System_IO_FileInfo 
        let _run_target_args'_v49 = v75 
        #endif
        let v78 : System_IO_FileInfo = _run_target_args'_v49 
        (* run_target_args'
        let v88 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v90 : string = null |> unbox<string>
        let _run_target_args'_v88 = v90 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v94 : string = null |> unbox<string>
        let _run_target_args'_v88 = v94 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v98 : string = null |> unbox<string>
        let _run_target_args'_v88 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v102 : string = null |> unbox<string>
        let _run_target_args'_v88 = v102 
        #endif
#if FABLE_COMPILER_PYTHON
        let v106 : string = null |> unbox<string>
        let _run_target_args'_v88 = v106 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v110 : string = null |> unbox<string>
        let _run_target_args'_v88 = v110 
        #endif
#else
        let v113 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v114 : string = v113 v78
        let _run_target_args'_v88 = v114 
        #endif
        let v115 : string = _run_target_args'_v88 
        let v122 : std_path_PathBuf = v115 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v126 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v127 : string = "Ok($0)"
        let v128 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v127 
        let _run_target_args'_v126 = v128 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v129 : string = "Ok($0)"
        let v130 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v129 
        let _run_target_args'_v126 = v130 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v131 : string = "Ok($0)"
        let v132 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v122 v131 
        let _run_target_args'_v126 = v132 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v133 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v133 
        #endif
#if FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v134 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v135 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v135 
        #endif
#else
        let v136 : Result<std_path_PathBuf, std_io_Error> = v122 |> Ok
        let _run_target_args'_v126 = v136 
        #endif
        let v137 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v126 
        v137
    else
        let v140 : string = $"file_system.read_link / Fsharp / "
        let v141 : string = $"The file or directory is not a reparse point. / "
        let v142 : string = v140 + v141 
        let v143 : string = $"path: {v0} / result: {v44} / path': {v2} / n: {v1}"
        let v144 : string = v142 + v143 
        (* run_target_args'
        let v149 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v150 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v151 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v150 
        let _run_target_args'_v149 = v151 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v152 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v153 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v152 
        let _run_target_args'_v149 = v153 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v154 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v155 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v144 v154 
        let _run_target_args'_v149 = v155 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v157 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v157 
        #endif
#if FABLE_COMPILER_PYTHON
        let v161 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v161 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v165 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v165 
        #endif
#else
        let v169 : std_io_Error = v144 |> unbox<std_io_Error>
        let _run_target_args'_v149 = v169 
        #endif
        let v172 : std_io_Error = _run_target_args'_v149 
        let v178 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method63(v0, v178, v1, v172, v2)
and closure24 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method62(v0, v1, v2)
and closure23 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure24(v0, v1)
and method64 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method55(v0)
    let v5 : string option = method41(v0)
    let v8 : (string -> US5) = method6()
    let v9 : US5 option = v5 |> Option.map v8 
    let v29 : US5 = US5_1
    let v30 : US5 = v9 |> Option.defaultValue v29 
    let v34 : string = method50(v3)
    let v35 : bool = v2 >= 11uy
    if v35 then
        let v36 : string = $"file_system.read_link / "
        let v37 : string = $"path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v38 : string = v36 + v37 
        (* run_target_args'
        let v43 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v44 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v45 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v44 
        let _run_target_args'_v43 = v45 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v46 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v47 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v46 
        let _run_target_args'_v43 = v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v49 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v38 v48 
        let _run_target_args'_v43 = v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v51 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v51 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v59 
        #endif
#else
        let v63 : std_io_Error = v38 |> unbox<std_io_Error>
        let _run_target_args'_v43 = v63 
        #endif
        let v66 : std_io_Error = _run_target_args'_v43 
        (* run_target_args'
        let v73 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v74 : string = "Err($0)"
        let v75 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v74 
        let _run_target_args'_v73 = v75 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v76 : string = "Err($0)"
        let v77 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v76 
        let _run_target_args'_v73 = v77 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v78 : string = "Err($0)"
        let v79 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v66 v78 
        let _run_target_args'_v73 = v79 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v80 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v80 
        #endif
#if FABLE_COMPILER_PYTHON
        let v81 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v81 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v82 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v82 
        #endif
#else
        let v83 : Result<std_path_PathBuf, std_io_Error> = v66 |> Error
        let _run_target_args'_v73 = v83 
        #endif
        let v84 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v73 
        v84
    else
        match v30 with
        | US5_0(v87) -> (* Some *)
            let v90 : string = ""
            let v91 : bool = v0 <> v90 
            if v91 then
                let v94 : uint8 = v2 + 1uy
                let v95 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v94
                let v96 : Result<std_path_PathBuf, std_io_Error> = v95 v87
                let v97 : (std_io_Error -> string) = method49()
                (* run_target_args'
                let v99 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v100 : string = "$0.map_err(|x| $1(x))"
                let v101 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v96, v97) v100 
                let _run_target_args'_v99 = v101 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v102 : string = "$0.map_err(|x| $1(x))"
                let v103 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v96, v97) v102 
                let _run_target_args'_v99 = v103 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v104 : string = "$0.map_err(|x| $1(x))"
                let v105 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v96, v97) v104 
                let _run_target_args'_v99 = v105 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v106 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v106 
                #endif
#if FABLE_COMPILER_PYTHON
                let v107 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v107 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v108 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v108 
                #endif
#else
                let v109 : Result<std_path_PathBuf, string> = match v96 with Ok x -> Ok x | Error x -> Error (v97 x)
                let _run_target_args'_v99 = v109 
                #endif
                let v110 : Result<std_path_PathBuf, string> = _run_target_args'_v99 
                let v113 : (std_path_PathBuf -> US14) = method51()
                let v114 : (string -> US14) = method52()
                let v116 : US14 = match v110 with Ok x -> v113 x | Error x -> v114 x
                match v116 with
                | US14_1(v272) -> (* Error *)
                    let v273 : string = $"file_system.read_link / "
                    let v274 : string = $"error': {v272} / error: {v34} / name: {v4}"
                    let v275 : string = v273 + v274 
                    (* run_target_args'
                    let v280 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v281 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v282 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v275 v281 
                    let _run_target_args'_v280 = v282 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v283 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v284 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v275 v283 
                    let _run_target_args'_v280 = v284 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v285 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v286 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v275 v285 
                    let _run_target_args'_v280 = v286 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v288 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v288 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v292 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v292 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v296 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v296 
                    #endif
#else
                    let v300 : std_io_Error = v275 |> unbox<std_io_Error>
                    let _run_target_args'_v280 = v300 
                    #endif
                    let v303 : std_io_Error = _run_target_args'_v280 
                    (* run_target_args'
                    let v310 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v311 : string = "Err($0)"
                    let v312 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v303 v311 
                    let _run_target_args'_v310 = v312 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v313 : string = "Err($0)"
                    let v314 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v303 v313 
                    let _run_target_args'_v310 = v314 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v315 : string = "Err($0)"
                    let v316 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v303 v315 
                    let _run_target_args'_v310 = v316 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v317 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v317 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v318 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v318 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v319 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v319 
                    #endif
#else
                    let v320 : Result<std_path_PathBuf, std_io_Error> = v303 |> Error
                    let _run_target_args'_v310 = v320 
                    #endif
                    let v321 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v310 
                    v321
                | US14_0(v119) -> (* Ok *)
                    (* run_target_args'
                    let v124 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v125 : string = "$0.display()"
                    let v126 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v125 
                    let _run_target_args'_v124 = v126 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v127 : string = "$0.display()"
                    let v128 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v127 
                    let _run_target_args'_v124 = v128 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v129 : string = "$0.display()"
                    let v130 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v119 v129 
                    let _run_target_args'_v124 = v130 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v132 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v132 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v136 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v136 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v140 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v140 
                    #endif
#else
                    let v144 : std_path_Display = v119 |> unbox<std_path_Display>
                    let _run_target_args'_v124 = v144 
                    #endif
                    let v147 : std_path_Display = _run_target_args'_v124 
                    let v154 : string = v147 |> string 
                    let v157 : string = method36(v154, v4)
                    (* run_target_args'
                    let v162 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v163 : string = "&*$0"
                    let v164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v163 
                    let _run_target_args'_v162 = v164 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v165 : string = "&*$0"
                    let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v165 
                    let _run_target_args'_v162 = v166 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v167 : string = "&*$0"
                    let v168 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v167 
                    let _run_target_args'_v162 = v168 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v170 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v170 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v174 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v174 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v178 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v178 
                    #endif
#else
                    let v182 : Ref<Str> = v157 |> unbox<Ref<Str>>
                    let _run_target_args'_v162 = v182 
                    #endif
                    let v185 : Ref<Str> = _run_target_args'_v162 
                    (* run_target_args'
                    let v195 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v196 : string = "String::from($0)"
                    let v197 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v196 
                    let _run_target_args'_v195 = v197 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v198 : string = "String::from($0)"
                    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v198 
                    let _run_target_args'_v195 = v199 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v200 : string = "String::from($0)"
                    let v201 : std_string_String = Fable.Core.RustInterop.emitRustExpr v185 v200 
                    let _run_target_args'_v195 = v201 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v203 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v203 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v207 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v207 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v211 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v211 
                    #endif
#else
                    let v215 : std_string_String = v185 |> unbox<std_string_String>
                    let _run_target_args'_v195 = v215 
                    #endif
                    let v218 : std_string_String = _run_target_args'_v195 
                    (* run_target_args'
                    let v228 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v229 : string = "std::path::PathBuf::from($0)"
                    let v230 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v218 v229 
                    let _run_target_args'_v228 = v230 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v231 : string = "std::path::PathBuf::from($0)"
                    let v232 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v218 v231 
                    let _run_target_args'_v228 = v232 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v233 : string = "std::path::PathBuf::from($0)"
                    let v234 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v218 v233 
                    let _run_target_args'_v228 = v234 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v236 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v236 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v240 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v240 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v244 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v244 
                    #endif
#else
                    let v248 : std_path_PathBuf = v218 |> unbox<std_path_PathBuf>
                    let _run_target_args'_v228 = v248 
                    #endif
                    let v251 : std_path_PathBuf = _run_target_args'_v228 
                    (* run_target_args'
                    let v258 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v259 : string = "Ok($0)"
                    let v260 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v251 v259 
                    let _run_target_args'_v258 = v260 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v261 : string = "Ok($0)"
                    let v262 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v251 v261 
                    let _run_target_args'_v258 = v262 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v263 : string = "Ok($0)"
                    let v264 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v251 v263 
                    let _run_target_args'_v258 = v264 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v265 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v265 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v266 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v266 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v267 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v267 
                    #endif
#else
                    let v268 : Result<std_path_PathBuf, std_io_Error> = v251 |> Ok
                    let _run_target_args'_v258 = v268 
                    #endif
                    let v269 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v258 
                    v269
            else
                let v326 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
                let v327 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
                let v328 : string = v326 + v327 
                (* run_target_args'
                let v333 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v334 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v335 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v328 v334 
                let _run_target_args'_v333 = v335 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v336 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v337 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v328 v336 
                let _run_target_args'_v333 = v337 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v338 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v339 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v328 v338 
                let _run_target_args'_v333 = v339 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v341 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v341 
                #endif
#if FABLE_COMPILER_PYTHON
                let v345 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v345 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v349 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v349 
                #endif
#else
                let v353 : std_io_Error = v328 |> unbox<std_io_Error>
                let _run_target_args'_v333 = v353 
                #endif
                let v356 : std_io_Error = _run_target_args'_v333 
                (* run_target_args'
                let v363 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v364 : string = "Err($0)"
                let v365 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v356 v364 
                let _run_target_args'_v363 = v365 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v366 : string = "Err($0)"
                let v367 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v356 v366 
                let _run_target_args'_v363 = v367 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v368 : string = "Err($0)"
                let v369 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v356 v368 
                let _run_target_args'_v363 = v369 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v370 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v370 
                #endif
#if FABLE_COMPILER_PYTHON
                let v371 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v371 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v372 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v372 
                #endif
#else
                let v373 : Result<std_path_PathBuf, std_io_Error> = v356 |> Error
                let _run_target_args'_v363 = v373 
                #endif
                let v374 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v363 
                v374
        | _ ->
            let v378 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / "
            let v379 : string = $"path: {v0} / error: {v34} / path': {v0} / name: {v4}"
            let v380 : string = v378 + v379 
            (* run_target_args'
            let v385 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v386 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v387 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v380 v386 
            let _run_target_args'_v385 = v387 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v388 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v389 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v380 v388 
            let _run_target_args'_v385 = v389 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v390 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v391 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v380 v390 
            let _run_target_args'_v385 = v391 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v393 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v393 
            #endif
#if FABLE_COMPILER_PYTHON
            let v397 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v397 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v401 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v401 
            #endif
#else
            let v405 : std_io_Error = v380 |> unbox<std_io_Error>
            let _run_target_args'_v385 = v405 
            #endif
            let v408 : std_io_Error = _run_target_args'_v385 
            (* run_target_args'
            let v415 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v416 : string = "Err($0)"
            let v417 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v408 v416 
            let _run_target_args'_v415 = v417 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v418 : string = "Err($0)"
            let v419 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v408 v418 
            let _run_target_args'_v415 = v419 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v420 : string = "Err($0)"
            let v421 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v408 v420 
            let _run_target_args'_v415 = v421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v422 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v422 
            #endif
#if FABLE_COMPILER_PYTHON
            let v423 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v423 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v424 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v424 
            #endif
#else
            let v425 : Result<std_path_PathBuf, std_io_Error> = v408 |> Error
            let _run_target_args'_v415 = v425 
            #endif
            let v426 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v415 
            v426
and method58 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v32 : System_IO_DirectoryInfo = v0 |> System_IO_DirectoryInfo 
    let _run_target_args'_v6 = v32 
    #endif
    let v35 : System_IO_DirectoryInfo = _run_target_args'_v6 
    let v41 : System.IO.FileAttributes = method59(v35)
    let v42 : System.IO.FileAttributes = method60()
    let v43 : bool = method61(v42, v41)
    if v43 then
        (* run_target_args'
        let v48 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v50 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v58 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v58 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v62 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v62 
        #endif
#if FABLE_COMPILER_PYTHON
        let v66 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v66 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v70 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _run_target_args'_v48 = v70 
        #endif
#else
        let v74 : System_IO_FileInfo = v0 |> System_IO_FileInfo 
        let _run_target_args'_v48 = v74 
        #endif
        let v77 : System_IO_FileInfo = _run_target_args'_v48 
        (* run_target_args'
        let v87 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v89 : string = null |> unbox<string>
        let _run_target_args'_v87 = v89 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v93 : string = null |> unbox<string>
        let _run_target_args'_v87 = v93 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = null |> unbox<string>
        let _run_target_args'_v87 = v97 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v101 : string = null |> unbox<string>
        let _run_target_args'_v87 = v101 
        #endif
#if FABLE_COMPILER_PYTHON
        let v105 : string = null |> unbox<string>
        let _run_target_args'_v87 = v105 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v109 : string = null |> unbox<string>
        let _run_target_args'_v87 = v109 
        #endif
#else
        let v112 : (System_IO_FileInfo -> string) = _.LinkTarget
        let v113 : string = v112 v77
        let _run_target_args'_v87 = v113 
        #endif
        let v114 : string = _run_target_args'_v87 
        let v121 : std_path_PathBuf = v114 |> unbox<std_path_PathBuf>
        (* run_target_args'
        let v125 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v126 : string = "Ok($0)"
        let v127 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v126 
        let _run_target_args'_v125 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "Ok($0)"
        let v129 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v128 
        let _run_target_args'_v125 = v129 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v130 : string = "Ok($0)"
        let v131 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v121 v130 
        let _run_target_args'_v125 = v131 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v132 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v132 
        #endif
#if FABLE_COMPILER_PYTHON
        let v133 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v133 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v134 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v134 
        #endif
#else
        let v135 : Result<std_path_PathBuf, std_io_Error> = v121 |> Ok
        let _run_target_args'_v125 = v135 
        #endif
        let v136 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v125 
        v136
    else
        let v139 : string = $"file_system.read_link / Fsharp / "
        let v140 : string = $"The file or directory is not a reparse point. / "
        let v141 : string = v139 + v140 
        let v142 : string = $"path: {v0} / result: {v43} / path': {v0} / n: {v1}"
        let v143 : string = v141 + v142 
        (* run_target_args'
        let v148 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v149 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v150 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v149 
        let _run_target_args'_v148 = v150 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v151 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v152 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v151 
        let _run_target_args'_v148 = v152 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v153 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v154 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v143 v153 
        let _run_target_args'_v148 = v154 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v156 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v156 
        #endif
#if FABLE_COMPILER_PYTHON
        let v160 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v160 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v164 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v164 
        #endif
#else
        let v168 : std_io_Error = v143 |> unbox<std_io_Error>
        let _run_target_args'_v148 = v168 
        #endif
        let v171 : std_io_Error = _run_target_args'_v148 
        let v177 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure23(v0)
        method64(v0, v177, v1, v171)
and method47 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method39(v0)
    let v8 : Result<std_path_PathBuf, std_io_Error> =
        if v3 then
            let v4 : string = "std::fs::read_link(&*$0)"
            let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
            v5
        else
            let v6 : uint8 = 0uy
            method48(v0, v6)
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : bool = method39(v0)
    let v14 : Result<std_path_PathBuf, std_io_Error> =
        if v9 then
            let v10 : string = "std::fs::read_link(&*$0)"
            let v11 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v10 
            v11
        else
            let v12 : uint8 = 0uy
            method48(v0, v12)
    let _run_target_args'_v2 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = method39(v0)
    let v20 : Result<std_path_PathBuf, std_io_Error> =
        if v15 then
            let v16 : string = "std::fs::read_link(&*$0)"
            let v17 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v16 
            v17
        else
            let v18 : uint8 = 0uy
            method48(v0, v18)
    let _run_target_args'_v2 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : uint8 = 0uy
    let v22 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v21)
    let _run_target_args'_v2 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _run_target_args'_v2 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v24)
    let _run_target_args'_v2 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method58(v0, v26)
    let _run_target_args'_v2 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _run_target_args'_v2 
    v28
and closure25 () (v0 : std_path_PathBuf) : US15 =
    US15_0(v0)
and method65 () : (std_path_PathBuf -> US15) =
    closure25()
and method67 (v0 : string) : string =
    v0
and method68 () : string =
    let v0 : string = ""
    v0
and method66 (v0 : string, v1 : string, v2 : string) : string =
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = $"regex::Regex::new(&$0)"
    let v6 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    (* run_target_args'
    let v8 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let _run_target_args'_v8 = v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _run_target_args'_v8 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v13 : string = "$0.unwrap()"
    let v14 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _run_target_args'_v8 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v15 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v15 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v17 
    #endif
#else
    let v18 : regex_Regex = match v6 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v8 = v18 
    #endif
    let v19 : regex_Regex = _run_target_args'_v8 
    let v22 : string = method67(v2)
    let v23 : string = $"$0.replace_all(&*$1, &*$2)"
    let v24 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v19, v22, v1) v23 
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "fable_library_rust::String_::fromString($0)"
    let v28 : string = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let _run_target_args'_v4 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = method68()
    let _run_target_args'_v4 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = method68()
    let _run_target_args'_v4 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v31 : string = method68()
    let _run_target_args'_v4 = v31 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : string = method68()
    let _run_target_args'_v4 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : string = method68()
    let _run_target_args'_v4 = v33 
    #endif
#else
    let v34 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _run_target_args'_v4 = v34 
    #endif
    let v35 : string = _run_target_args'_v4 
    v35
and method46 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method47(v0)
        (* run_target_args'
        let v5 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v6 : string = "$0.ok()"
        let v7 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v6 
        let _run_target_args'_v5 = v7 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v8 : string = "$0.ok()"
        let v9 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v8 
        let _run_target_args'_v5 = v9 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v10 : string = "$0.ok()"
        let v11 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v10 
        let _run_target_args'_v5 = v11 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v12 
        #endif
#if FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v13 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v14 
        #endif
#else
        let v15 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _run_target_args'_v5 = v15 
        #endif
        let v16 : std_path_PathBuf option = _run_target_args'_v5 
        let v21 : (std_path_PathBuf -> US15) = method65()
        let v22 : US15 option = v16 |> Option.map v21 
        let v42 : US15 = US15_1
        let v43 : US15 = v22 |> Option.defaultValue v42 
        let v86 : string =
            match v43 with
            | US15_1 -> (* None *)
                v0
            | US15_0(v47) -> (* Some *)
                (* run_target_args'
                let v52 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v53 : string = "$0.display()"
                let v54 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v53 
                let _run_target_args'_v52 = v54 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v55 : string = "$0.display()"
                let v56 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v55 
                let _run_target_args'_v52 = v56 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v57 : string = "$0.display()"
                let v58 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v47 v57 
                let _run_target_args'_v52 = v58 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v60 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v60 
                #endif
#if FABLE_COMPILER_PYTHON
                let v64 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v64 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v68 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v68 
                #endif
#else
                let v72 : std_path_Display = v47 |> unbox<std_path_Display>
                let _run_target_args'_v52 = v72 
                #endif
                let v75 : std_path_Display = _run_target_args'_v52 
                let v82 : string = v75 |> string 
                v82
        let v87 : bool = v86 = ""
        let v88 : string =
            if v87 then
                v0
            else
                v86
        let v89 : string = "^\\\\\\\\\\?\\\\"
        let v90 : string = ""
        let v91 : string = method66(v89, v90, v88)
        let v92 : int32 = v91.Length
        let v93 : bool = v92 < 2
        if v93 then
            v0
        else
            let v94 : string = $"{v91.[0] |> string |> _.ToLower()}{v91.[1..]}"
            let v95 : string = "\\"
            let v96 : string = "/"
            let v97 : string = v94.Replace (v95, v96)
            v97
and method35 (v0 : string) : US5 =
    let v1 : US12 = US12_1
    let v2 : string = "spiral"
    let v3 : string = "workspace"
    let v4 : string = method36(v2, v3)
    let v5 : US13 = method37(v1, v4, v0)
    match v5 with
    | US13_1(v9) -> (* Error *)
        let v10 : unit = ()
        let v11 : (unit -> unit) = closure17(v0, v9)
        let v12 : unit = (fun () -> v11 (); v10) ()
        US5_1
    | US13_0(v6) -> (* Ok *)
        let v7 : string = method46(v6)
        US5_0(v7)
and method71 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method72 () : char =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "std::path::MAIN_SEPARATOR"
    let v3 : char = Fable.Core.RustInterop.emitRustExpr () v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "std::path::MAIN_SEPARATOR"
    let v5 : char = Fable.Core.RustInterop.emitRustExpr () v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "std::path::MAIN_SEPARATOR"
    let v7 : char = Fable.Core.RustInterop.emitRustExpr () v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1 = '/' 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1 = '/' 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v8 
    #endif
#else
    let v9 : char = System.IO.Path.DirectorySeparatorChar
    let _run_target_args'_v1 = v9 
    #endif
    let v10 : char = _run_target_args'_v1 
    v10
and method70 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.exists()"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : bool = v106 = false
    let v297 : string =
        if v107 then
            let v108 : string = method34()
            let v109 : string = method36(v108, v0)
            let v110 : string = method46(v109)
            let v118 : string = "/"
            let v119 : (string []) = v110.Split v118 
            let v122 : (string []) = [||]
            let v123 : int32 = v119.Length
            let v124 : Mut6 = {l0 = 0; l1 = 0; l2 = v122} : Mut6
            while method71(v123, v124) do
                let v126 : int32 = v124.l0
                let v127 : int32 =  -v126
                let v128 : int32 = v127 + v123
                let v129 : int32 = v128 - 1
                let struct (v130 : int32, v131 : (string [])) = v124.l1, v124.l2
                let v132 : string = v119.[int v129]
                let v133 : bool = ".." = v132
                let struct (v179 : int32, v180 : (string [])) =
                    if v133 then
                        let v134 : int32 = v130 + 1
                        struct (v134, v131)
                    else
                        let v135 : bool = "." = v132
                        if v135 then
                            struct (v130, v131)
                        else
                            let v136 : bool = 0 = v130
                            if v136 then
                                let v139 : string = ":"
                                let v140 : bool = v132.EndsWith (v139, false, null)
                                if v140 then
                                    let v143 : string = $"{v108.[0]}:"
                                    let v144 : (string []) = [|v143|]
                                    let v145 : int32 = v144.Length
                                    let v146 : int32 = v131.Length
                                    let v147 : int32 = v145 + v146
                                    let v148 : (string []) = Array.zeroCreate<string> (v147)
                                    let v149 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v147, v149) do
                                        let v151 : int32 = v149.l0
                                        let v152 : bool = v151 < v145
                                        let v156 : string =
                                            if v152 then
                                                let v153 : string = v144.[int v151]
                                                v153
                                            else
                                                let v154 : int32 = v151 - v145
                                                let v155 : string = v131.[int v154]
                                                v155
                                        v148.[int v151] <- v156
                                        let v157 : int32 = v151 + 1
                                        v149.l0 <- v157
                                        ()
                                    struct (0, v148)
                                else
                                    let v158 : (string []) = [|v132|]
                                    let v159 : int32 = v158.Length
                                    let v160 : int32 = v131.Length
                                    let v161 : int32 = v159 + v160
                                    let v162 : (string []) = Array.zeroCreate<string> (v161)
                                    let v163 : Mut5 = {l0 = 0} : Mut5
                                    while method32(v161, v163) do
                                        let v165 : int32 = v163.l0
                                        let v166 : bool = v165 < v159
                                        let v170 : string =
                                            if v166 then
                                                let v167 : string = v158.[int v165]
                                                v167
                                            else
                                                let v168 : int32 = v165 - v159
                                                let v169 : string = v131.[int v168]
                                                v169
                                        v162.[int v165] <- v170
                                        let v171 : int32 = v165 + 1
                                        v163.l0 <- v171
                                        ()
                                    struct (0, v162)
                            else
                                let v174 : int32 = v130 - 1
                                struct (v174, v131)
                let v181 : int32 = v126 + 1
                v124.l0 <- v181
                v124.l1 <- v179
                v124.l2 <- v180
                ()
            let struct (v182 : int32, v183 : (string [])) = v124.l1, v124.l2
            let v188 : unit = ()
            let _let'_v188 =
                seq {
                    for i = 0 to v183.Length - 1 do yield v183.[i]
                    (* indent
                    ()
                indent *)
                }
                (* indent
                ()
            indent *)
            let v191 : string seq = _let'_v188 
            let v197 : char = method72()
            let v199 : (char -> string) = _.ToString()
            let v200 : string = v199 v197
            let v204 : bool = v200 = "\n"
            let v206 : string =
                if v204 then
                    method31(v200)
                else
                    v200
            let v207 : (string -> (string seq -> string)) = String.concat
            let v208 : (string seq -> string) = v207 v206
            v208 v191
        else
            let v212 : string = "std::fs::canonicalize(&*$0)"
            let v213 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v212 
            (* run_target_args'
            let v215 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v216 : string = "$0.unwrap()"
            let v217 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v216 
            let _run_target_args'_v215 = v217 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v218 : string = "$0.unwrap()"
            let v219 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v218 
            let _run_target_args'_v215 = v219 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v220 : string = "$0.unwrap()"
            let v221 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v213 v220 
            let _run_target_args'_v215 = v221 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v222 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v222 
            #endif
#if FABLE_COMPILER_PYTHON
            let v223 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v223 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v224 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v224 
            #endif
#else
            let v225 : std_path_PathBuf = match v213 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v215 = v225 
            #endif
            let v226 : std_path_PathBuf = _run_target_args'_v215 
            (* run_target_args'
            let v233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : string = "$0.display()"
            let v235 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v234 
            let _run_target_args'_v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v236 : string = "$0.display()"
            let v237 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v236 
            let _run_target_args'_v233 = v237 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v238 : string = "$0.display()"
            let v239 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v226 v238 
            let _run_target_args'_v233 = v239 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v241 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v241 
            #endif
#if FABLE_COMPILER_PYTHON
            let v245 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v245 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v249 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v249 
            #endif
#else
            let v253 : std_path_Display = v226 |> unbox<std_path_Display>
            let _run_target_args'_v233 = v253 
            #endif
            let v256 : std_path_Display = _run_target_args'_v233 
            (* run_target_args'
            let v266 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v267 : string = "format!(\"{}\", $0)"
            let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v267 
            let _run_target_args'_v266 = v268 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v269 : string = "format!(\"{}\", $0)"
            let v270 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v269 
            let _run_target_args'_v266 = v270 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v271 : string = "format!(\"{}\", $0)"
            let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v256 v271 
            let _run_target_args'_v266 = v272 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v274 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v274 
            #endif
#if FABLE_COMPILER_PYTHON
            let v278 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v278 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v282 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v282 
            #endif
#else
            let v286 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v266 = v286 
            #endif
            let v289 : std_string_String = _run_target_args'_v266 
            let v295 : string = "fable_library_rust::String_::fromString($0)"
            let v296 : string = Fable.Core.RustInterop.emitRustExpr v289 v295 
            v296
    let _run_target_args'_v5 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v299 : string = null |> unbox<string>
    let _run_target_args'_v5 = v299 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v303 : string = null |> unbox<string>
    let _run_target_args'_v5 = v303 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v307 : string = null |> unbox<string>
    let _run_target_args'_v5 = v307 
    #endif
#if FABLE_COMPILER_PYTHON
    let v311 : string = null |> unbox<string>
    let _run_target_args'_v5 = v311 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v315 : string = null |> unbox<string>
    let _run_target_args'_v5 = v315 
    #endif
#else
    let v318 : (string -> string) = System.IO.Path.GetFullPath
    let v319 : string = v318 v0
    let _run_target_args'_v5 = v319 
    #endif
    let v320 : string = _run_target_args'_v5 
    v320
and method69 (v0 : string) : string =
    let v1 : string = method70(v0)
    method46(v1)
and method73 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method74 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method75 () : string =
    let v0 : string = "\n"
    v0
and method77 (v0 : string, v1 : string) : bool =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = method38(v0)
    let v8 : bool = v7 = false
    let v113 : bool =
        if v8 then
            false
        else
            (* run_target_args'
            let v13 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            (* run_target_args'
            let v18 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v19 : string = "std::fs::read(&*$0)"
            let v20 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v19 
            (* run_target_args'
            let v22 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v23 : string = "$0.unwrap()"
            let v24 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v23 
            let _run_target_args'_v22 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = "$0.unwrap()"
            let v26 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v25 
            let _run_target_args'_v22 = v26 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v27 : string = "$0.unwrap()"
            let v28 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v20 v27 
            let _run_target_args'_v22 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v30 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v30 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v31 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v31 
            #endif
#else
            let v32 : Vec<uint8> = match v20 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v22 = v32 
            #endif
            let v33 : Vec<uint8> = _run_target_args'_v22 
            let _run_target_args'_v18 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v37 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v37 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v41 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v41 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v45 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v45 
            #endif
#if FABLE_COMPILER_PYTHON
            let v49 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v49 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _run_target_args'_v18 = v53 
            #endif
#else
            let v56 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v57 : string = "$0.to_vec()"
            let v58 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v56 v57 
            let _run_target_args'_v18 = v58 
            #endif
            let v59 : Vec<uint8> = _run_target_args'_v18 
            let v65 : Vec<uint8> = method27(v59)
            let v66 : string = "std::string::String::from_utf8($0)"
            let v67 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v65 v66 
            (* run_target_args'
            let v69 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v70 : string = "$0.unwrap()"
            let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v70 
            let _run_target_args'_v69 = v71 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v72 : string = "$0.unwrap()"
            let v73 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v72 
            let _run_target_args'_v69 = v73 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v74 : string = "$0.unwrap()"
            let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v67 v74 
            let _run_target_args'_v69 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v76 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v76 
            #endif
#if FABLE_COMPILER_PYTHON
            let v77 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v77 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v78 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v78 
            #endif
#else
            let v79 : std_string_String = match v67 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v69 = v79 
            #endif
            let v80 : std_string_String = _run_target_args'_v69 
            let v83 : string = "fable_library_rust::String_::fromString($0)"
            let v84 : string = Fable.Core.RustInterop.emitRustExpr v80 v83 
            let _run_target_args'_v13 = v84 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v86 : string = null |> unbox<string>
            let _run_target_args'_v13 = v86 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v90 : string = null |> unbox<string>
            let _run_target_args'_v13 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v94 : string = null |> unbox<string>
            let _run_target_args'_v13 = v94 
            #endif
#if FABLE_COMPILER_PYTHON
            let v98 : string = null |> unbox<string>
            let _run_target_args'_v13 = v98 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v102 : string = null |> unbox<string>
            let _run_target_args'_v13 = v102 
            #endif
#else
            let v105 : string = v0 |> System.IO.File.ReadAllText
            let _run_target_args'_v13 = v105 
            #endif
            let v106 : string = _run_target_args'_v13 
            let v112 : bool = v1 = v106
            v112
    let _run_target_args'_v6 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v119 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v131 
    #endif
#else
    let v135 : bool = null |> unbox<bool>
    let _run_target_args'_v6 = v135 
    #endif
    let v138 : bool = _run_target_args'_v6 
    v138
and closure26 () (v0 : std_io_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method79 () : (std_io_Error -> std_string_String) =
    closure26()
and closure27 () () : US16 =
    US16_0
and method80 () : (unit -> US16) =
    closure27()
and closure28 () (v0 : std_string_String) : US16 =
    US16_1(v0)
and method81 () : (std_string_String -> US16) =
    closure28()
and method82 () : string =
    
    
    
    
    
    let v2 : string = "Critical"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_bright_red"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_bright_red"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_bright_red"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[91m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[91m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[91m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[91m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method84 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "dir"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "error"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    (* run_target_args'
    let v81 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v82 : string = "format!(\"{:#?}\", $0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v82 
    let v84 : string = "fable_library_rust::String_::fromString($0)"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let _run_target_args'_v81 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "format!(\"{:#?}\", $0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "fable_library_rust::String_::fromString($0)"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let _run_target_args'_v81 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "format!(\"{:#?}\", $0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v90 
    let v92 : string = "fable_library_rust::String_::fromString($0)"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let _run_target_args'_v81 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : string = $"%A{v1}"
    let _run_target_args'_v81 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v99 : string = $"%A{v1}"
    let _run_target_args'_v81 = v99 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : string = $"%A{v1}"
    let _run_target_args'_v81 = v103 
    #endif
#else
    let v107 : string = $"%A{v1}"
    let _run_target_args'_v81 = v107 
    #endif
    let v110 : string = _run_target_args'_v81 
    let v117 : string = $"{v110}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v3, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v127 : string = " }"
    let v128 : string = $"{v127}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v3, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = v3.l0
    v136
and method83 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method84(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure29 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method83(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method85 () : string =
    
    
    
    
    
    let v2 : string = "Verbose"
    let v3 : (unit -> string) = v2.ToLower
    let v4 : string = v3 ()
    let v7 : char = v4.[int 0]
    let v8 : string = method13(v7)
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "inline_colorization::color_bright_black"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v14 
    (* run_target_args'
    let v20 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v21 
    let _run_target_args'_v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v23 
    let _run_target_args'_v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v25 
    let _run_target_args'_v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v28 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v28 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v36 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v36 
    #endif
#else
    let v40 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v20 = v40 
    #endif
    let v43 : Ref<Str> = _run_target_args'_v20 
    let v49 : string = "inline_colorization::color_reset"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v15, v43, v50) v51 
    let v53 : string = "fable_library_rust::String_::fromString($0)"
    let v54 : string = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let _run_target_args'_v13 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "inline_colorization::color_bright_black"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v55 
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
#else
    let v81 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v81 
    #endif
    let v84 : Ref<Str> = _run_target_args'_v61 
    let v90 : string = "inline_colorization::color_reset"
    let v91 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v93 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v56, v84, v91) v92 
    let v94 : string = "fable_library_rust::String_::fromString($0)"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let _run_target_args'_v13 = v95 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v96 : string = "inline_colorization::color_bright_black"
    let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v96 
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v103 
    let _run_target_args'_v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v105 
    let _run_target_args'_v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v8 v107 
    let _run_target_args'_v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v118 
    #endif
#else
    let v122 : Ref<Str> = v8 |> unbox<Ref<Str>>
    let _run_target_args'_v102 = v122 
    #endif
    let v125 : Ref<Str> = _run_target_args'_v102 
    let v131 : string = "inline_colorization::color_reset"
    let v132 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v97, v125, v132) v133 
    let v135 : string = "fable_library_rust::String_::fromString($0)"
    let v136 : string = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let _run_target_args'_v13 = v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : string = "\u001b[90m"
    let v138 : string = method15()
    let v139 : string = v137 + v8 
    let v140 : string = v139 + v138 
    let _run_target_args'_v13 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "\u001b[90m"
    let v142 : string = method15()
    let v143 : string = v141 + v8 
    let v144 : string = v143 + v142 
    let _run_target_args'_v13 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : string = "\u001b[90m"
    let v146 : string = method15()
    let v147 : string = v145 + v8 
    let v148 : string = v147 + v146 
    let _run_target_args'_v13 = v148 
    #endif
#else
    let v149 : string = "\u001b[90m"
    let v150 : string = method15()
    let v151 : string = v149 + v8 
    let v152 : string = v151 + v150 
    let _run_target_args'_v13 = v152 
    #endif
    let v153 : string = _run_target_args'_v13 
    v153
and method87 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "dir"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v2, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method86 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method87(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure30 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : string = method86(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method89 (v0 : bool, v1 : string) : unit =
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method39(v1)
    if v3 then
        if v0 then
            let v4 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v4 
            ()
        else
            let v5 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1 v5 
            ()
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    #endif
    // run_target_args' is_unit
    ()
and closure31 (v0 : string) () : unit =
    let v1 : bool = true
    method89(v1, v0)
and method88 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method90 (v0 : string) : (unit -> unit) =
    closure31(v0)
and method91 (v0 : string) : System_IO_DirectoryInfo =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v31 : System_IO_DirectoryInfo = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : System_IO_DirectoryInfo = _run_target_args'_v5 
    v32
and method93 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "dir"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "result"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method92 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method93(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.create_dir"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure32 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method92(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method99 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "ex"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "path"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method98 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method99(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "file_system.delete_directory_async"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure34 (v0 : string, v1 : exn) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        (* run_target_args'
        let v51 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v53 : string = $"%A{v1}"
        let _run_target_args'_v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v57 : string = $"%A{v1}"
        let _run_target_args'_v51 = v57 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : string = $"%A{v1}"
        let _run_target_args'_v51 = v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v65 : string = $"%A{v1}"
        let _run_target_args'_v51 = v65 
        #endif
#if FABLE_COMPILER_PYTHON
        let v69 : string = $"%A{v1}"
        let _run_target_args'_v51 = v69 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v73 : string = $"%A{v1}"
        let _run_target_args'_v51 = v73 
        #endif
#else
        let v76 : string = $"{v1.GetType ()}: {v1.Message}"
        let _run_target_args'_v51 = v76 
        #endif
        let v77 : string = _run_target_args'_v51 
        let v83 : string = method55(v0)
        let v84 : string = method98(v27, v28, v29, v30, v31, v32, v45, v46, v77, v83)
        method19(v84)
and method97 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _let'_v20 =
        async {
            try
                let v23 : bool = true
                method89(v23, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v25 : exn = ex
                let v26 : int64 = v1 % 100L
                let v27 : bool = v26 = 0L
                if v27 then
                    let v28 : unit = ()
                    let v29 : (unit -> unit) = closure34(v0, v25)
                    let v30 : unit = (fun () -> v29 (); v28) ()
                    ()
                (* run_target_args'
                let v118 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v119 : (int32 -> Async<unit>) = Async.Sleep
                let v120 : Async<unit> = v119 10
                let _run_target_args'_v118 = v120 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v121 : (int32 -> Async<unit>) = Async.Sleep
                let v122 : Async<unit> = v121 10
                let _run_target_args'_v118 = v122 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v123 : (int32 -> Async<unit>) = Async.Sleep
                let v124 : Async<unit> = v123 10
                let _run_target_args'_v118 = v124 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v125 : (int32 -> Async<unit>) = Async.Sleep
                let v126 : Async<unit> = v125 10
                let _run_target_args'_v118 = v126 
                #endif
#if FABLE_COMPILER_PYTHON
                let v127 : (int32 -> Async<unit>) = Async.Sleep
                let v128 : Async<unit> = v127 10
                let _run_target_args'_v118 = v128 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v129 : (int32 -> Async<unit>) = Async.Sleep
                let v130 : Async<unit> = v129 10
                let _run_target_args'_v118 = v130 
                #endif
#else
                let v131 : (int32 -> Async<unit>) = Async.Sleep
                let v132 : Async<unit> = v131 10
                let _run_target_args'_v118 = v132 
                #endif
                let v133 : Async<unit> = _run_target_args'_v118 
                do! v133 
                let v136 : int64 = v1 + 1L
                let v137 : Async<int64> = method96(v0, v136)
                return! v137 
                (* indent
                ()
            indent *)
            (* try_unit
            let v252 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1879 : Async<int64> = _let'_v20 
    let _run_target_args'_v6 = v1879 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1881 : unit = ()
    let _let'_v1881 =
        async {
            try
                let v1884 : bool = true
                method89(v1884, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v1886 : exn = ex
                let v1887 : int64 = v1 % 100L
                let v1888 : bool = v1887 = 0L
                if v1888 then
                    let v1889 : unit = ()
                    let v1890 : (unit -> unit) = closure34(v0, v1886)
                    let v1891 : unit = (fun () -> v1890 (); v1889) ()
                    ()
                (* run_target_args'
                let v1979 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1980 : (int32 -> Async<unit>) = Async.Sleep
                let v1981 : Async<unit> = v1980 10
                let _run_target_args'_v1979 = v1981 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1982 : (int32 -> Async<unit>) = Async.Sleep
                let v1983 : Async<unit> = v1982 10
                let _run_target_args'_v1979 = v1983 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1984 : (int32 -> Async<unit>) = Async.Sleep
                let v1985 : Async<unit> = v1984 10
                let _run_target_args'_v1979 = v1985 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1986 : (int32 -> Async<unit>) = Async.Sleep
                let v1987 : Async<unit> = v1986 10
                let _run_target_args'_v1979 = v1987 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1988 : (int32 -> Async<unit>) = Async.Sleep
                let v1989 : Async<unit> = v1988 10
                let _run_target_args'_v1979 = v1989 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1990 : (int32 -> Async<unit>) = Async.Sleep
                let v1991 : Async<unit> = v1990 10
                let _run_target_args'_v1979 = v1991 
                #endif
#else
                let v1992 : (int32 -> Async<unit>) = Async.Sleep
                let v1993 : Async<unit> = v1992 10
                let _run_target_args'_v1979 = v1993 
                #endif
                let v1994 : Async<unit> = _run_target_args'_v1979 
                do! v1994 
                let v1997 : int64 = v1 + 1L
                let v1998 : Async<int64> = method96(v0, v1997)
                return! v1998 
                (* indent
                ()
            indent *)
            (* try_unit
            let v2113 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3740 : Async<int64> = _let'_v1881 
    let _run_target_args'_v6 = v3740 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3742 : unit = ()
    let _let'_v3742 =
        async {
            try
                let v3745 : bool = true
                method89(v3745, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v3747 : exn = ex
                let v3748 : int64 = v1 % 100L
                let v3749 : bool = v3748 = 0L
                if v3749 then
                    let v3750 : unit = ()
                    let v3751 : (unit -> unit) = closure34(v0, v3747)
                    let v3752 : unit = (fun () -> v3751 (); v3750) ()
                    ()
                (* run_target_args'
                let v3840 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3841 : (int32 -> Async<unit>) = Async.Sleep
                let v3842 : Async<unit> = v3841 10
                let _run_target_args'_v3840 = v3842 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3843 : (int32 -> Async<unit>) = Async.Sleep
                let v3844 : Async<unit> = v3843 10
                let _run_target_args'_v3840 = v3844 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3845 : (int32 -> Async<unit>) = Async.Sleep
                let v3846 : Async<unit> = v3845 10
                let _run_target_args'_v3840 = v3846 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3847 : (int32 -> Async<unit>) = Async.Sleep
                let v3848 : Async<unit> = v3847 10
                let _run_target_args'_v3840 = v3848 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3849 : (int32 -> Async<unit>) = Async.Sleep
                let v3850 : Async<unit> = v3849 10
                let _run_target_args'_v3840 = v3850 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3851 : (int32 -> Async<unit>) = Async.Sleep
                let v3852 : Async<unit> = v3851 10
                let _run_target_args'_v3840 = v3852 
                #endif
#else
                let v3853 : (int32 -> Async<unit>) = Async.Sleep
                let v3854 : Async<unit> = v3853 10
                let _run_target_args'_v3840 = v3854 
                #endif
                let v3855 : Async<unit> = _run_target_args'_v3840 
                do! v3855 
                let v3858 : int64 = v1 + 1L
                let v3859 : Async<int64> = method96(v0, v3858)
                return! v3859 
                (* indent
                ()
            indent *)
            (* try_unit
            let v3974 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v5601 : Async<int64> = _let'_v3742 
    let _run_target_args'_v6 = v5601 
    #endif
#else
    let v5603 : unit = ()
    let _let'_v5603 =
        async {
            try
                let v5606 : bool = true
                method89(v5606, v0)
                return v1 
                (* indent
                ()
            indent *)
            with ex ->
                let v5608 : exn = ex
                let v5609 : int64 = v1 % 100L
                let v5610 : bool = v5609 = 0L
                if v5610 then
                    let v5611 : unit = ()
                    let v5612 : (unit -> unit) = closure34(v0, v5608)
                    let v5613 : unit = (fun () -> v5612 (); v5611) ()
                    ()
                (* run_target_args'
                let v5701 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v5702 : (int32 -> Async<unit>) = Async.Sleep
                let v5703 : Async<unit> = v5702 10
                let _run_target_args'_v5701 = v5703 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v5704 : (int32 -> Async<unit>) = Async.Sleep
                let v5705 : Async<unit> = v5704 10
                let _run_target_args'_v5701 = v5705 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v5706 : (int32 -> Async<unit>) = Async.Sleep
                let v5707 : Async<unit> = v5706 10
                let _run_target_args'_v5701 = v5707 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v5708 : (int32 -> Async<unit>) = Async.Sleep
                let v5709 : Async<unit> = v5708 10
                let _run_target_args'_v5701 = v5709 
                #endif
#if FABLE_COMPILER_PYTHON
                let v5710 : (int32 -> Async<unit>) = Async.Sleep
                let v5711 : Async<unit> = v5710 10
                let _run_target_args'_v5701 = v5711 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v5712 : (int32 -> Async<unit>) = Async.Sleep
                let v5713 : Async<unit> = v5712 10
                let _run_target_args'_v5701 = v5713 
                #endif
#else
                let v5714 : (int32 -> Async<unit>) = Async.Sleep
                let v5715 : Async<unit> = v5714 10
                let _run_target_args'_v5701 = v5715 
                #endif
                let v5716 : Async<unit> = _run_target_args'_v5701 
                do! v5716 
                let v5719 : int64 = v1 + 1L
                let v5720 : Async<int64> = method96(v0, v5719)
                return! v5720 
                (* indent
                ()
            indent *)
            (* try_unit
            let v5835 : int64 = try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7462 : Async<int64> = _let'_v5603 
    let _run_target_args'_v6 = v7462 
    #endif
    let v7463 : Async<int64> = _run_target_args'_v6 
    v7463
and method96 (v0 : string, v1 : int64) : Async<int64> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Async<int64> = null |> unbox<Async<int64>>
    let _run_target_args'_v6 = v28 
    #endif
#else
    let v31 : Async<int64> = method97(v0, v1)
    let _run_target_args'_v6 = v31 
    #endif
    let v32 : Async<int64> = _run_target_args'_v6 
    v32
and method95 (v0 : string) : Async<int64> =
    let v1 : int64 = 0L
    method96(v0, v1)
and closure33 (v0 : string) () : unit =
    let v1 : Async<int64> = method95(v0)
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v6 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v20 : Async<unit> = v19 v1
    let _run_target_args'_v6 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v22 : Async<unit> = v21 v1
    let _run_target_args'_v6 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v24 : Async<unit> = v23 v1
    let _run_target_args'_v6 = v24 
    #endif
#else
    let v25 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v26 : Async<unit> = v25 v1
    let _run_target_args'_v6 = v26 
    #endif
    let v27 : Async<unit> = _run_target_args'_v6 
    (* run_target_args'
    let v33 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_PYTHON
    let v34 : (Async<unit> -> unit) = Async.RunSynchronously
    v34 v27
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : (Async<unit> -> unit) = Async.RunSynchronously
    v35 v27
    #endif
#else
    let v36 : (Async<unit> -> unit) = Async.RunSynchronously
    v36 v27
    #endif
    // run_target_args' is_unit
    ()
and method94 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method100 (v0 : string) : (unit -> unit) =
    closure33(v0)
and method78 (v0 : string) : System.IDisposable =
    (* run_target_args'
    let v154 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : string = "std::fs::create_dir_all(&*$0)"
    let v156 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v155 
    let v157 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v159 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v160 : string = "$0.map_err(|x| $1(x))"
    let v161 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v160 
    let _run_target_args'_v159 = v161 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v162 : string = "$0.map_err(|x| $1(x))"
    let v163 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v162 
    let _run_target_args'_v159 = v163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v164 : string = "$0.map_err(|x| $1(x))"
    let v165 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v156, v157) v164 
    let _run_target_args'_v159 = v165 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v166 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v166 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v168 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v168 
    #endif
#else
    let v169 : Result<unit, std_string_String> = match v156 with Ok x -> Ok x | Error x -> Error (v157 x)
    let _run_target_args'_v159 = v169 
    #endif
    let v170 : Result<unit, std_string_String> = _run_target_args'_v159 
    let v173 : (unit -> US16) = method80()
    let v174 : (std_string_String -> US16) = method81()
    let v176 : US16 = match v170 with Ok () -> v173 () | Error x -> v174 x
    match v176 with
    | US16_1(v228) -> (* Error *)
        let v229 : unit = ()
        let v230 : (unit -> unit) = closure29(v0, v228)
        let v231 : unit = (fun () -> v230 (); v229) ()
        ()
    | US16_0 -> (* Ok *)
        let v179 : unit = ()
        let v180 : (unit -> unit) = closure30(v0)
        let v181 : unit = (fun () -> v180 (); v179) ()
        ()
    (* run_target_args'
    let v282 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v283 : (unit -> unit) = method88(v0)
    let v284 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v283 "$0()" )
    let _run_target_args'_v282 = v284 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v285 : (unit -> unit) = method88(v0)
    let v286 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v285 "$0()" )
    let _run_target_args'_v282 = v286 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v287 : (unit -> unit) = method88(v0)
    let v288 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v287 "$0()" )
    let _run_target_args'_v282 = v288 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v289 : (unit -> unit) = method90(v0)
    let v290 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v289 () }
    let _run_target_args'_v282 = v290 
    #endif
#if FABLE_COMPILER_PYTHON
    let v291 : (unit -> unit) = method90(v0)
    let v292 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v291 () }
    let _run_target_args'_v282 = v292 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v293 : (unit -> unit) = method90(v0)
    let v294 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v293 () }
    let _run_target_args'_v282 = v294 
    #endif
#else
    let v295 : (unit -> unit) = method90(v0)
    let v296 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v295 () }
    let _run_target_args'_v282 = v296 
    #endif
    let v297 : System.IDisposable = _run_target_args'_v282 
    let _run_target_args'_v154 = v297 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v302 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v302 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v306 : System.IDisposable = null |> unbox<System.IDisposable>
    let _run_target_args'_v154 = v306 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v309 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v314 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v316 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v320 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v328 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v328 
    #endif
#if FABLE_COMPILER_PYTHON
    let v332 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v332 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v336 : bool = null |> unbox<bool>
    let _run_target_args'_v314 = v336 
    #endif
#else
    let v339 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v340 : bool = v339 v309
    let _run_target_args'_v314 = v340 
    #endif
    let v341 : bool = _run_target_args'_v314 
    let v347 : bool = v341 = false
    if v347 then
        (* run_target_args'
        let v352 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v354 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v354 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v358 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v358 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v362 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v362 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v366 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v366 
        #endif
#if FABLE_COMPILER_PYTHON
        let v370 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v370 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v374 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v352 = v374 
        #endif
#else
        let v377 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v378 : System.DateTime = v377 v309
        let _run_target_args'_v352 = v378 
        #endif
        let v379 : System.DateTime = _run_target_args'_v352 
        let v385 : _ = {| Exists = v341; CreationTime = v379 |}
        let v387 : string = $"%A{v385}"
        let v390 : unit = ()
        let v391 : (unit -> unit) = closure32(v0, v387)
        let v392 : unit = (fun () -> v391 (); v390) ()
        ()
    (* run_target_args'
    let v443 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v444 : (unit -> unit) = method94(v0)
    let v445 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v444 "$0()" )
    let _run_target_args'_v443 = v445 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v446 : (unit -> unit) = method94(v0)
    let v447 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v446 "$0()" )
    let _run_target_args'_v443 = v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v448 : (unit -> unit) = method94(v0)
    let v449 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v448 "$0()" )
    let _run_target_args'_v443 = v449 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v450 : (unit -> unit) = method100(v0)
    let v451 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v450 () }
    let _run_target_args'_v443 = v451 
    #endif
#if FABLE_COMPILER_PYTHON
    let v452 : (unit -> unit) = method100(v0)
    let v453 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v452 () }
    let _run_target_args'_v443 = v453 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v454 : (unit -> unit) = method100(v0)
    let v455 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v454 () }
    let _run_target_args'_v443 = v455 
    #endif
#else
    let v456 : (unit -> unit) = method100(v0)
    let v457 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v456 () }
    let _run_target_args'_v443 = v457 
    #endif
    let v458 : System.IDisposable = _run_target_args'_v443 
    let _run_target_args'_v154 = v458 
    #endif
#if FABLE_COMPILER_PYTHON
    let v462 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v467 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v469 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v469 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v473 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v473 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v477 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v477 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v481 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v481 
    #endif
#if FABLE_COMPILER_PYTHON
    let v485 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v485 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v489 : bool = null |> unbox<bool>
    let _run_target_args'_v467 = v489 
    #endif
#else
    let v492 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v493 : bool = v492 v462
    let _run_target_args'_v467 = v493 
    #endif
    let v494 : bool = _run_target_args'_v467 
    let v500 : bool = v494 = false
    if v500 then
        (* run_target_args'
        let v505 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v507 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v507 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v511 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v511 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v515 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v515 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v519 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v519 
        #endif
#if FABLE_COMPILER_PYTHON
        let v523 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v523 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v527 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v505 = v527 
        #endif
#else
        let v530 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v531 : System.DateTime = v530 v462
        let _run_target_args'_v505 = v531 
        #endif
        let v532 : System.DateTime = _run_target_args'_v505 
        let v538 : _ = {| Exists = v494; CreationTime = v532 |}
        let v540 : string = $"%A{v538}"
        let v543 : unit = ()
        let v544 : (unit -> unit) = closure32(v0, v540)
        let v545 : unit = (fun () -> v544 (); v543) ()
        ()
    (* run_target_args'
    let v596 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v597 : (unit -> unit) = method94(v0)
    let v598 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v597 "$0()" )
    let _run_target_args'_v596 = v598 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v599 : (unit -> unit) = method94(v0)
    let v600 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v599 "$0()" )
    let _run_target_args'_v596 = v600 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v601 : (unit -> unit) = method94(v0)
    let v602 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v601 "$0()" )
    let _run_target_args'_v596 = v602 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v603 : (unit -> unit) = method100(v0)
    let v604 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v603 () }
    let _run_target_args'_v596 = v604 
    #endif
#if FABLE_COMPILER_PYTHON
    let v605 : (unit -> unit) = method100(v0)
    let v606 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v605 () }
    let _run_target_args'_v596 = v606 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v607 : (unit -> unit) = method100(v0)
    let v608 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v607 () }
    let _run_target_args'_v596 = v608 
    #endif
#else
    let v609 : (unit -> unit) = method100(v0)
    let v610 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v609 () }
    let _run_target_args'_v596 = v610 
    #endif
    let v611 : System.IDisposable = _run_target_args'_v596 
    let _run_target_args'_v154 = v611 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v615 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v620 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v622 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v622 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v626 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v626 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v630 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v630 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v634 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v634 
    #endif
#if FABLE_COMPILER_PYTHON
    let v638 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v638 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v642 : bool = null |> unbox<bool>
    let _run_target_args'_v620 = v642 
    #endif
#else
    let v645 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v646 : bool = v645 v615
    let _run_target_args'_v620 = v646 
    #endif
    let v647 : bool = _run_target_args'_v620 
    let v653 : bool = v647 = false
    if v653 then
        (* run_target_args'
        let v658 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v660 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v660 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v664 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v664 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v668 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v668 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v672 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v672 
        #endif
#if FABLE_COMPILER_PYTHON
        let v676 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v676 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v680 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v658 = v680 
        #endif
#else
        let v683 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v684 : System.DateTime = v683 v615
        let _run_target_args'_v658 = v684 
        #endif
        let v685 : System.DateTime = _run_target_args'_v658 
        let v691 : _ = {| Exists = v647; CreationTime = v685 |}
        let v693 : string = $"%A{v691}"
        let v696 : unit = ()
        let v697 : (unit -> unit) = closure32(v0, v693)
        let v698 : unit = (fun () -> v697 (); v696) ()
        ()
    (* run_target_args'
    let v749 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v750 : (unit -> unit) = method94(v0)
    let v751 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v750 "$0()" )
    let _run_target_args'_v749 = v751 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v752 : (unit -> unit) = method94(v0)
    let v753 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v752 "$0()" )
    let _run_target_args'_v749 = v753 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v754 : (unit -> unit) = method94(v0)
    let v755 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v754 "$0()" )
    let _run_target_args'_v749 = v755 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v756 : (unit -> unit) = method100(v0)
    let v757 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v756 () }
    let _run_target_args'_v749 = v757 
    #endif
#if FABLE_COMPILER_PYTHON
    let v758 : (unit -> unit) = method100(v0)
    let v759 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v758 () }
    let _run_target_args'_v749 = v759 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v760 : (unit -> unit) = method100(v0)
    let v761 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v760 () }
    let _run_target_args'_v749 = v761 
    #endif
#else
    let v762 : (unit -> unit) = method100(v0)
    let v763 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v762 () }
    let _run_target_args'_v749 = v763 
    #endif
    let v764 : System.IDisposable = _run_target_args'_v749 
    let _run_target_args'_v154 = v764 
    #endif
#else
    let v768 : System_IO_DirectoryInfo = method91(v0)
    (* run_target_args'
    let v773 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v775 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v775 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v779 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v779 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v783 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v783 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v787 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v787 
    #endif
#if FABLE_COMPILER_PYTHON
    let v791 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v791 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v795 : bool = null |> unbox<bool>
    let _run_target_args'_v773 = v795 
    #endif
#else
    let v798 : (System_IO_DirectoryInfo -> bool) = _.Exists
    let v799 : bool = v798 v768
    let _run_target_args'_v773 = v799 
    #endif
    let v800 : bool = _run_target_args'_v773 
    let v806 : bool = v800 = false
    if v806 then
        (* run_target_args'
        let v811 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v813 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v813 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v817 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v817 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v821 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v821 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v825 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v825 
        #endif
#if FABLE_COMPILER_PYTHON
        let v829 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v829 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v833 : System.DateTime = null |> unbox<System.DateTime>
        let _run_target_args'_v811 = v833 
        #endif
#else
        let v836 : (System_IO_DirectoryInfo -> System.DateTime) = _.CreationTime
        let v837 : System.DateTime = v836 v768
        let _run_target_args'_v811 = v837 
        #endif
        let v838 : System.DateTime = _run_target_args'_v811 
        let v844 : _ = {| Exists = v800; CreationTime = v838 |}
        let v846 : string = $"%A{v844}"
        let v849 : unit = ()
        let v850 : (unit -> unit) = closure32(v0, v846)
        let v851 : unit = (fun () -> v850 (); v849) ()
        ()
    (* run_target_args'
    let v902 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v903 : (unit -> unit) = method94(v0)
    let v904 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v903 "$0()" )
    let _run_target_args'_v902 = v904 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v905 : (unit -> unit) = method94(v0)
    let v906 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v905 "$0()" )
    let _run_target_args'_v902 = v906 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v907 : (unit -> unit) = method94(v0)
    let v908 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v907 "$0()" )
    let _run_target_args'_v902 = v908 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v909 : (unit -> unit) = method100(v0)
    let v910 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v909 () }
    let _run_target_args'_v902 = v910 
    #endif
#if FABLE_COMPILER_PYTHON
    let v911 : (unit -> unit) = method100(v0)
    let v912 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v911 () }
    let _run_target_args'_v902 = v912 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v913 : (unit -> unit) = method100(v0)
    let v914 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v913 () }
    let _run_target_args'_v902 = v914 
    #endif
#else
    let v915 : (unit -> unit) = method100(v0)
    let v916 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v915 () }
    let _run_target_args'_v902 = v916 
    #endif
    let v917 : System.IDisposable = _run_target_args'_v902 
    let _run_target_args'_v154 = v917 
    #endif
    let v921 : System.IDisposable = _run_target_args'_v154 
    v921
and method76 (v0 : string, v1 : string) : unit =
    let v2 : bool = method77(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method41(v0)
        let v7 : string = ""
        let v8 : string = v4 |> Option.defaultValue v7 
        let v11 : bool = method39(v8)
        let v12 : bool = v11 = false
        if v12 then
            let v13 : System.IDisposable = method78(v8)
            ()
        (* run_target_args'
        let v14 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v15 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v15 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        System.IO.File.WriteAllText (v0, v1)
        #endif
        // run_target_args' is_unit
        ()
and method102 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method104 () : string =
    let v0 : string = ""
    v0
and method105 (v0 : int64, v1 : string, v2 : int64) : UH0 =
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : char = v1.[int v2]
        let v5 : int64 = v2 + 1L
        let v6 : UH0 = method105(v0, v1, v5)
        UH0_1(v4, v6)
    else
        UH0_0
and method106 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v27 : System.Text.StringBuilder =
            if v6 then
                let v12 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v13 : System.Text.StringBuilder = v12 ()
                v1
            else
                let v18 : (char -> string) = _.ToString()
                let v19 : string = v18 v4
                let v23 : (string -> System.Text.StringBuilder) = v1.Append
                let v24 : System.Text.StringBuilder = v23 v19
                v1
        method106(v5, v27, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure36 (v0 : int32, v1 : int32) (v2 : string) : string =
    let v3 : bool = v1 >= v0
    if v3 then
        v2
    else
        let v4 : int32 = v1 + 1
        let v5 : (string -> string) = method107(v0, v4)
        let v8 : string = " "
        let v9 : string = v2 + v8 
        v5 v9
and method107 (v0 : int32, v1 : int32) : (string -> string) =
    closure36(v0, v1)
and closure35 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '"'
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method105(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method107(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and closure37 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US18 =
    let v4 : bool = "" = v0
    if v4 then
        let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US18_1(v6)
    else
        let v10 : char = v0.[int 0]
        let v11 : bool = v10 = '''
        if v11 then
            let v13 : (string -> int32) = String.length
            let v14 : int32 = v13 v0
            let v22 : int32 = 1 |> int32 
            let v35 : int32 = v14 |> int32 
            let v43 : int32 = v35 - 1
            let v45 : string = v0.[int v22..int v43]
            let v50 : (char -> string) = _.ToString()
            let v51 : string = v50 v10
            let v54 : int64 = System.Convert.ToInt64 v51.Length
            let v55 : int64 = 0L
            let v56 : UH0 = method105(v54, v51, v55)
            let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
            US18_0(v10, v45, v57, v58, v59)
        else
            let v62 : string = "\n"
            let v63 : int32 = v0.IndexOf v62 
            let v66 : int32 = v63 - 1
            let v67 : bool = -2 = v66
            let v75 : int32 =
                if v67 then
                    let v69 : (string -> int32) = String.length
                    let v70 : int32 = v69 v0
                    let v73 : int32 = v70 + 1
                    v73
                else
                    let v74 : int32 = v66 + 1
                    v74
            let v81 : int32 = 0 |> int32 
            let v94 : int32 = v75 |> int32 
            let v102 : int32 = v94 - 1
            let v104 : string = v0.[int v81..int v102]
            let v109 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v104}"
            let v112 : int32 = v3 - 1
            let v113 : int32 = 0
            let v114 : (string -> string) = method107(v112, v113)
            let v115 : string = ""
            let v116 : string = v114 v115
            let v117 : string = "^"
            let v118 : string = v116 + v117 
            let v120 : string = $"{v109}
{v118}
"
            US18_1(v120)
and method108 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US18 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US18 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US18_1(v13) -> (* Error *)
            method108(v0, v1, v6)
        | US18_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US18_1(v3)
and method109 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US20_1
        let v15 : char =
            match v11 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method109(v0, v17)
and method110 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v98 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ''' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v12
            let v21 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US18_1(v21)
        else
            let v25 : char = v1.[int 0]
            let v26 : int64 = 0L
            let v27 : bool = method109(v25, v26)
            let v28 : bool = v27 = false
            if v28 then
                let v30 : (string -> int32) = String.length
                let v31 : int32 = v30 v1
                let v39 : int32 = 1 |> int32 
                let v52 : int32 = v31 |> int32 
                let v60 : int32 = v52 - 1
                let v62 : string = v1.[int v39..int v60]
                let v67 : (char -> string) = _.ToString()
                let v68 : string = v67 v25
                let v71 : int64 = System.Convert.ToInt64 v68.Length
                let v72 : int64 = 0L
                let v73 : UH0 = method105(v71, v68, v72)
                let struct (v74 : System.Text.StringBuilder, v75 : int32, v76 : int32) = method106(v73, v2, v3, v4)
                US18_0(v25, v62, v74, v75, v76)
            else
                let v78 : char list = []
                let v80 : char list = ''' :: v78 
                let v84 : char list = '"' :: v80 
                let v88 : (char list -> (char [])) = List.toArray
                let v89 : (char []) = v88 v84
                let v93 : string = $"parsing.none_of / unexpected char: '{v25}' / chars: %A{v89} / s: %A{struct (v2, v3, v4)}"
                US18_1(v93)
    let v110 : US18 =
        match v98 with
        | US18_1(v107) -> (* Error *)
            US18_1(v107)
        | US18_0(v99, v100, v101, v102, v103) -> (* Ok *)
            let v104 : bool = '\\' = v99
            let v105 : char =
                if v104 then
                    '/'
                else
                    v99
            US18_0(v105, v100, v101, v102, v103)
    match v110 with
    | US18_1(v127) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v111, v112, v113, v114, v115) -> (* Ok *)
        let v117 : (char -> string) = _.ToString()
        let v118 : string = v117 v111
        let v121 : string = v0 + v118 
        method110(v121, v112, v113, v114, v115)
and method111 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US18 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US18 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US18_1(v15) -> (* Error *)
            method111(v0, v1, v2, v3, v8)
        | US18_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US18_1(v5)
and method112 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method112(v0, v21)
and method113 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = ''' :: v8 
            let v16 : char list = '"' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method112(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method105(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method106(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = ' ' :: v82 
                let v88 : char list = ''' :: v84 
                let v92 : char list = '"' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v118 : US18 =
        match v106 with
        | US18_1(v115) -> (* Error *)
            US18_1(v115)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v112 : bool = '\\' = v107
            let v113 : char =
                if v112 then
                    '/'
                else
                    v107
            US18_0(v113, v108, v109, v110, v111)
    match v118 with
    | US18_1(v135) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v119, v120, v121, v122, v123) -> (* Ok *)
        let v125 : (char -> string) = _.ToString()
        let v126 : string = v125 v119
        let v129 : string = v0 + v126 
        method113(v129, v120, v121, v122, v123)
and method114 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method114(v0, v6)
        else
            v1
and method115 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v66 : US18 =
        if v5 then
            let v12 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US18_1(v12)
        else
            let v16 : char = v1.[int 0]
            let v18 : (string -> int32) = String.length
            let v19 : int32 = v18 v1
            let v27 : int32 = 1 |> int32 
            let v40 : int32 = v19 |> int32 
            let v48 : int32 = v40 - 1
            let v50 : string = v1.[int v27..int v48]
            let v55 : (char -> string) = _.ToString()
            let v56 : string = v55 v16
            let v59 : int64 = System.Convert.ToInt64 v56.Length
            let v60 : int64 = 0L
            let v61 : UH0 = method105(v59, v56, v60)
            let struct (v62 : System.Text.StringBuilder, v63 : int32, v64 : int32) = method106(v61, v2, v3, v4)
            US18_0(v16, v50, v62, v63, v64)
    match v66 with
    | US18_1(v83) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v67, v68, v69, v70, v71) -> (* Ok *)
        let v73 : (char -> string) = _.ToString()
        let v74 : string = v73 v67
        let v77 : string = v0 + v74 
        method115(v77, v68, v69, v70, v71)
and method103 (v0 : string) : US17 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method104()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure35()
    let v20 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US18) = closure37()
    let v21 : UH1 = UH1_0
    let v22 : UH1 = UH1_1(v20, v21)
    let v23 : UH1 = UH1_1(v19, v22)
    let v24 : US18 = method108(v10, v16, v23)
    let v197 : US19 =
        match v24 with
        | US18_1(v194) -> (* Error *)
            US19_1(v194)
        | US18_0(v25, v26, v27, v28, v29) -> (* Ok *)
            let v30 : bool = "" = v26
            let v123 : US18 =
                if v30 then
                    let v31 : char list = []
                    let v33 : char list = ''' :: v31 
                    let v37 : char list = '"' :: v33 
                    let v41 : (char list -> (char [])) = List.toArray
                    let v42 : (char []) = v41 v37
                    let v46 : string = $"parsing.none_of / unexpected end of input / chars: %A{v42} / s: %A{struct (v27, v28, v29)}"
                    US18_1(v46)
                else
                    let v50 : char = v26.[int 0]
                    let v51 : int64 = 0L
                    let v52 : bool = method109(v50, v51)
                    let v53 : bool = v52 = false
                    if v53 then
                        let v55 : (string -> int32) = String.length
                        let v56 : int32 = v55 v26
                        let v64 : int32 = 1 |> int32 
                        let v77 : int32 = v56 |> int32 
                        let v85 : int32 = v77 - 1
                        let v87 : string = v26.[int v64..int v85]
                        let v92 : (char -> string) = _.ToString()
                        let v93 : string = v92 v50
                        let v96 : int64 = System.Convert.ToInt64 v93.Length
                        let v97 : int64 = 0L
                        let v98 : UH0 = method105(v96, v93, v97)
                        let struct (v99 : System.Text.StringBuilder, v100 : int32, v101 : int32) = method106(v98, v27, v28, v29)
                        US18_0(v50, v87, v99, v100, v101)
                    else
                        let v103 : char list = []
                        let v105 : char list = ''' :: v103 
                        let v109 : char list = '"' :: v105 
                        let v113 : (char list -> (char [])) = List.toArray
                        let v114 : (char []) = v113 v109
                        let v118 : string = $"parsing.none_of / unexpected char: '{v50}' / chars: %A{v114} / s: %A{struct (v27, v28, v29)}"
                        US18_1(v118)
            let v135 : US18 =
                match v123 with
                | US18_1(v132) -> (* Error *)
                    US18_1(v132)
                | US18_0(v124, v125, v126, v127, v128) -> (* Ok *)
                    let v129 : bool = '\\' = v124
                    let v130 : char =
                        if v129 then
                            '/'
                        else
                            v124
                    US18_0(v130, v125, v126, v127, v128)
            let v155 : US19 =
                match v135 with
                | US18_1(v152) -> (* Error *)
                    US19_1(v152)
                | US18_0(v136, v137, v138, v139, v140) -> (* Ok *)
                    let v142 : (char -> string) = _.ToString()
                    let v143 : string = v142 v136
                    let struct (v146 : string, v147 : string, v148 : System.Text.StringBuilder, v149 : int32, v150 : int32) = method110(v143, v137, v138, v139, v140)
                    US19_0(v146, v147, v148, v149, v150)
            let v165 : US19 =
                match v155 with
                | US19_1(v162) -> (* Error *)
                    US19_0(v9, v26, v27, v28, v29)
                | US19_0(v156, v157, v158, v159, v160) -> (* Ok *)
                    US19_0(v156, v157, v158, v159, v160)
            match v165 with
            | US19_1(v189) -> (* Error *)
                let v190 : string = "parsing.between / expected content"
                US19_1(v190)
            | US19_0(v166, v167, v168, v169, v170) -> (* Ok *)
                let v171 : UH1 = UH1_0
                let v172 : UH1 = UH1_1(v20, v171)
                let v173 : UH1 = UH1_1(v19, v172)
                let v174 : US18 = method111(v167, v168, v169, v170, v173)
                match v174 with
                | US18_1(v181) -> (* Error *)
                    let v183 : string = $"parsing.between / expected closing delimiter / e: %A{v181} / input: %A{struct (v10, v16, 1, 1)} / rest1: %A{struct (v26, v27, v28, v29)} / rest2: %A{struct (v167, v168, v169, v170)}"
                    US19_1(v183)
                | US18_0(v175, v176, v177, v178, v179) -> (* Ok *)
                    US19_0(v166, v176, v177, v178, v179)
    let v416 : US19 =
        match v197 with
        | US19_1(v203) -> (* Error *)
            let v204 : bool = "" = v10
            let v307 : US18 =
                if v204 then
                    let v205 : char list = []
                    let v207 : char list = ' ' :: v205 
                    let v211 : char list = ''' :: v207 
                    let v215 : char list = '"' :: v211 
                    let v219 : (char list -> (char [])) = List.toArray
                    let v220 : (char []) = v219 v215
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v220} / s: %A{struct (v16, 1, 1)}"
                    US18_1(v224)
                else
                    let v228 : char = v10.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method112(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v233 : (string -> int32) = String.length
                        let v234 : int32 = v233 v10
                        let v242 : int32 = 1 |> int32 
                        let v255 : int32 = v234 |> int32 
                        let v263 : int32 = v255 - 1
                        let v265 : string = v10.[int v242..int v263]
                        let v270 : (char -> string) = _.ToString()
                        let v271 : string = v270 v228
                        let v274 : int64 = System.Convert.ToInt64 v271.Length
                        let v275 : int64 = 0L
                        let v276 : UH0 = method105(v274, v271, v275)
                        let v277 : int32 = 1
                        let v278 : int32 = 1
                        let struct (v279 : System.Text.StringBuilder, v280 : int32, v281 : int32) = method106(v276, v16, v277, v278)
                        US18_0(v228, v265, v279, v280, v281)
                    else
                        let v283 : char list = []
                        let v285 : char list = ' ' :: v283 
                        let v289 : char list = ''' :: v285 
                        let v293 : char list = '"' :: v289 
                        let v297 : (char list -> (char [])) = List.toArray
                        let v298 : (char []) = v297 v293
                        let v302 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v298} / s: %A{struct (v16, 1, 1)}"
                        US18_1(v302)
            let v319 : US18 =
                match v307 with
                | US18_1(v316) -> (* Error *)
                    US18_1(v316)
                | US18_0(v308, v309, v310, v311, v312) -> (* Ok *)
                    let v313 : bool = '\\' = v308
                    let v314 : char =
                        if v313 then
                            '/'
                        else
                            v308
                    US18_0(v314, v309, v310, v311, v312)
            let v339 : US19 =
                match v319 with
                | US18_1(v336) -> (* Error *)
                    US19_1(v336)
                | US18_0(v320, v321, v322, v323, v324) -> (* Ok *)
                    let v326 : (char -> string) = _.ToString()
                    let v327 : string = v326 v320
                    let struct (v330 : string, v331 : string, v332 : System.Text.StringBuilder, v333 : int32, v334 : int32) = method113(v327, v321, v322, v323, v324)
                    US19_0(v330, v331, v332, v333, v334)
            match v339 with
            | US19_1(v345) -> (* Error *)
                let v346 : int32 = v10.Length
                let v347 : bool = v346 = 0
                let v354 : US21 =
                    if v347 then
                        US21_0(v10, v16, 1, 1)
                    else
                        let v350 : string = $"parsing.eof / expected end of input / input: %A{v10}"
                        US21_1(v350)
                let v363 : US19 =
                    match v354 with
                    | US21_1(v360) -> (* Error *)
                        US19_1(v360)
                    | US21_0(v355, v356, v357, v358) -> (* Ok *)
                        US19_0(v9, v355, v356, v357, v358)
                match v363 with
                | US19_1(v409) -> (* Error *)
                    US19_1(v409)
                | US19_0(v364, v365, v366, v367, v368) -> (* Ok *)
                    let v369 : int32 = 0
                    let v370 : int32 = method114(v365, v369)
                    let v372 : (string -> int32) = String.length
                    let v373 : int32 = v372 v365
                    let v381 : int32 = v370 |> int32 
                    let v394 : int32 = v373 |> int32 
                    let v402 : int32 = v394 - 1
                    let v404 : string = v365.[int v381..int v402]
                    US19_0(v364, v404, v366, v367, v368)
            | US19_0(v340, v341, v342, v343, v344) -> (* Ok *)
                v339
        | US19_0(v198, v199, v200, v201, v202) -> (* Ok *)
            v197
    let v671 : US22 =
        match v416 with
        | US19_1(v668) -> (* Error *)
            US22_1(v668)
        | US19_0(v417, v418, v419, v420, v421) -> (* Ok *)
            let v422 : bool = "" = v418
            let v542 : US18 =
                if v422 then
                    let v424 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v419, v420, v421)}"
                    US18_1(v424)
                else
                    let v428 : char = v418.[int 0]
                    let v429 : bool = v428 = ' '
                    if v429 then
                        let v431 : (string -> int32) = String.length
                        let v432 : int32 = v431 v418
                        let v440 : int32 = 1 |> int32 
                        let v453 : int32 = v432 |> int32 
                        let v461 : int32 = v453 - 1
                        let v463 : string = v418.[int v440..int v461]
                        let v468 : (char -> string) = _.ToString()
                        let v469 : string = v468 v428
                        let v472 : int64 = System.Convert.ToInt64 v469.Length
                        let v473 : int64 = 0L
                        let v474 : UH0 = method105(v472, v469, v473)
                        let struct (v475 : System.Text.StringBuilder, v476 : int32, v477 : int32) = method106(v474, v419, v420, v421)
                        US18_0(v428, v463, v475, v476, v477)
                    else
                        let v480 : string = "\n"
                        let v481 : int32 = v418.IndexOf v480 
                        let v484 : int32 = v481 - 1
                        let v485 : bool = -2 = v484
                        let v493 : int32 =
                            if v485 then
                                let v487 : (string -> int32) = String.length
                                let v488 : int32 = v487 v418
                                let v491 : int32 = v488 + 1
                                v491
                            else
                                let v492 : int32 = v484 + 1
                                v492
                        let v499 : int32 = 0 |> int32 
                        let v512 : int32 = v493 |> int32 
                        let v520 : int32 = v512 - 1
                        let v522 : string = v418.[int v499..int v520]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v420} / col: {v421}
{v419}{v522}"
                        let v530 : int32 = v421 - 1
                        let v531 : int32 = 0
                        let v532 : (string -> string) = method107(v530, v531)
                        let v533 : string = v532 v9
                        let v534 : string = "^"
                        let v535 : string = v533 + v534 
                        let v537 : string = $"{v527}
{v535}
"
                        US18_1(v537)
            let v554 : US23 =
                match v542 with
                | US18_1(v550) -> (* Error *)
                    let v551 : US20 = US20_1
                    US23_0(v551, v418, v419, v420, v421)
                | US18_0(v543, v544, v545, v546, v547) -> (* Ok *)
                    let v548 : US20 = US20_0(v543)
                    US23_0(v548, v544, v545, v546, v547)
            let v645 : US19 =
                match v554 with
                | US23_1(v642) -> (* Error *)
                    US19_1(v642)
                | US23_0(v555, v556, v557, v558, v559) -> (* Ok *)
                    let v560 : bool = "" = v556
                    let v621 : US18 =
                        if v560 then
                            let v567 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v557, v558, v559)}"
                            US18_1(v567)
                        else
                            let v571 : char = v556.[int 0]
                            let v573 : (string -> int32) = String.length
                            let v574 : int32 = v573 v556
                            let v582 : int32 = 1 |> int32 
                            let v595 : int32 = v574 |> int32 
                            let v603 : int32 = v595 - 1
                            let v605 : string = v556.[int v582..int v603]
                            let v610 : (char -> string) = _.ToString()
                            let v611 : string = v610 v571
                            let v614 : int64 = System.Convert.ToInt64 v611.Length
                            let v615 : int64 = 0L
                            let v616 : UH0 = method105(v614, v611, v615)
                            let struct (v617 : System.Text.StringBuilder, v618 : int32, v619 : int32) = method106(v616, v557, v558, v559)
                            US18_0(v571, v605, v617, v618, v619)
                    match v621 with
                    | US18_1(v638) -> (* Error *)
                        US19_1(v638)
                    | US18_0(v622, v623, v624, v625, v626) -> (* Ok *)
                        let v628 : (char -> string) = _.ToString()
                        let v629 : string = v628 v622
                        let struct (v632 : string, v633 : string, v634 : System.Text.StringBuilder, v635 : int32, v636 : int32) = method115(v629, v623, v624, v625, v626)
                        US19_0(v632, v633, v634, v635, v636)
            let v657 : US24 =
                match v645 with
                | US19_1(v653) -> (* Error *)
                    let v654 : US5 = US5_1
                    US24_0(v654, v418, v419, v420, v421)
                | US19_0(v646, v647, v648, v649, v650) -> (* Ok *)
                    let v651 : US5 = US5_0(v646)
                    US24_0(v651, v647, v648, v649, v650)
            match v657 with
            | US24_1(v664) -> (* Error *)
                US22_1(v664)
            | US24_0(v658, v659, v660, v661, v662) -> (* Ok *)
                US22_0(v417, v658, v659, v660, v661, v662)
    match v671 with
    | US22_1(v679) -> (* Error *)
        US17_1(v679)
    | US22_0(v672, v673, v674, v675, v676, v677) -> (* Ok *)
        US17_0(v672, v673)
and method118 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US20_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US20_1
        let v23 : char =
            match v19 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method118(v0, v25)
and method119 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method118(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method105(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method106(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    match v114 with
    | US18_1(v131) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
        let v121 : (char -> string) = _.ToString()
        let v122 : string = v121 v115
        let v125 : string = v0 + v122 
        method119(v125, v116, v117, v118, v119)
and method121 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US20 =
            if v3 then
                US20_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US20_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US20_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US20_1
        let v19 : char =
            match v15 with
            | US20_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US20_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method121(v0, v21)
and closure38 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '\\'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method105(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method107(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method105(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method106(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '\\'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and closure39 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US19 =
    let v4 : bool = "" = v0
    let v125 : US18 =
        if v4 then
            let v6 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US18_1(v6)
        else
            let v10 : char = v0.[int 0]
            let v11 : bool = v10 = '`'
            if v11 then
                let v13 : (string -> int32) = String.length
                let v14 : int32 = v13 v0
                let v22 : int32 = 1 |> int32 
                let v35 : int32 = v14 |> int32 
                let v43 : int32 = v35 - 1
                let v45 : string = v0.[int v22..int v43]
                let v50 : (char -> string) = _.ToString()
                let v51 : string = v50 v10
                let v54 : int64 = System.Convert.ToInt64 v51.Length
                let v55 : int64 = 0L
                let v56 : UH0 = method105(v54, v51, v55)
                let struct (v57 : System.Text.StringBuilder, v58 : int32, v59 : int32) = method106(v56, v1, v2, v3)
                US18_0(v10, v45, v57, v58, v59)
            else
                let v62 : string = "\n"
                let v63 : int32 = v0.IndexOf v62 
                let v66 : int32 = v63 - 1
                let v67 : bool = -2 = v66
                let v75 : int32 =
                    if v67 then
                        let v69 : (string -> int32) = String.length
                        let v70 : int32 = v69 v0
                        let v73 : int32 = v70 + 1
                        v73
                    else
                        let v74 : int32 = v66 + 1
                        v74
                let v81 : int32 = 0 |> int32 
                let v94 : int32 = v75 |> int32 
                let v102 : int32 = v94 - 1
                let v104 : string = v0.[int v81..int v102]
                let v109 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v104}"
                let v112 : int32 = v3 - 1
                let v113 : int32 = 0
                let v114 : (string -> string) = method107(v112, v113)
                let v115 : string = ""
                let v116 : string = v114 v115
                let v117 : string = "^"
                let v118 : string = v116 + v117 
                let v120 : string = $"{v109}
{v118}
"
                US18_1(v120)
    let v196 : US18 =
        match v125 with
        | US18_1(v193) -> (* Error *)
            US18_1(v193)
        | US18_0(v126, v127, v128, v129, v130) -> (* Ok *)
            let v131 : bool = "" = v127
            if v131 then
                let v138 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v128, v129, v130)}"
                US18_1(v138)
            else
                let v142 : char = v127.[int 0]
                let v144 : (string -> int32) = String.length
                let v145 : int32 = v144 v127
                let v153 : int32 = 1 |> int32 
                let v166 : int32 = v145 |> int32 
                let v174 : int32 = v166 - 1
                let v176 : string = v127.[int v153..int v174]
                let v181 : (char -> string) = _.ToString()
                let v182 : string = v181 v142
                let v185 : int64 = System.Convert.ToInt64 v182.Length
                let v186 : int64 = 0L
                let v187 : UH0 = method105(v185, v182, v186)
                let struct (v188 : System.Text.StringBuilder, v189 : int32, v190 : int32) = method106(v187, v128, v129, v130)
                US18_0(v142, v176, v188, v189, v190)
    match v196 with
    | US18_1(v214) -> (* Error *)
        US19_1(v214)
    | US18_0(v197, v198, v199, v200, v201) -> (* Ok *)
        let v203 : (char -> string) = _.ToString()
        let v204 : string = v203 '`'
        let v208 : (char -> string) = _.ToString()
        let v209 : string = v208 v197
        let v212 : string = v204 + v209 
        US19_0(v212, v198, v199, v200, v201)
and method122 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US19 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US19 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US19_1(v15) -> (* Error *)
            method122(v0, v1, v2, v3, v8)
        | US19_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US19_1(v5)
and method123 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method123(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method120 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method121(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method105(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method106(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    let v135 : US19 =
        match v121 with
        | US19_1(v127) -> (* Error *)
            let v128 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
            let v129 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
            let v130 : UH3 = UH3_0
            let v131 : UH3 = UH3_1(v129, v130)
            let v132 : UH3 = UH3_1(v128, v131)
            method122(v1, v2, v3, v4, v132)
        | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
            v121
    match v135 with
    | US19_1(v143) -> (* Error *)
        let v144 : UH2 = UH2_0
        let v145 : UH2 = method123(v0, v144)
        US26_0(v145, v1, v2, v3, v4)
    | US19_0(v136, v137, v138, v139, v140) -> (* Ok *)
        let v141 : UH2 = UH2_1(v136, v0)
        method120(v141, v137, v138, v139, v140)
and method124 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method124(v3, v1)
        let v6 : string list = v2 :: v4 
        v6
    | UH2_0 -> (* Nil *)
        v1
and method125 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v106 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = '"' :: v6 
            let v12 : char list = '`' :: v8 
            let v16 : char list = '\\' :: v12 
            let v20 : (char list -> (char [])) = List.toArray
            let v21 : (char []) = v20 v16
            let v25 : string = $"parsing.none_of / unexpected end of input / chars: %A{v21} / s: %A{struct (v2, v3, v4)}"
            US18_1(v25)
        else
            let v29 : char = v1.[int 0]
            let v30 : int64 = 0L
            let v31 : bool = method121(v29, v30)
            let v32 : bool = v31 = false
            if v32 then
                let v34 : (string -> int32) = String.length
                let v35 : int32 = v34 v1
                let v43 : int32 = 1 |> int32 
                let v56 : int32 = v35 |> int32 
                let v64 : int32 = v56 - 1
                let v66 : string = v1.[int v43..int v64]
                let v71 : (char -> string) = _.ToString()
                let v72 : string = v71 v29
                let v75 : int64 = System.Convert.ToInt64 v72.Length
                let v76 : int64 = 0L
                let v77 : UH0 = method105(v75, v72, v76)
                let struct (v78 : System.Text.StringBuilder, v79 : int32, v80 : int32) = method106(v77, v2, v3, v4)
                US18_0(v29, v66, v78, v79, v80)
            else
                let v82 : char list = []
                let v84 : char list = '"' :: v82 
                let v88 : char list = '`' :: v84 
                let v92 : char list = '\\' :: v88 
                let v96 : (char list -> (char [])) = List.toArray
                let v97 : (char []) = v96 v92
                let v101 : string = $"parsing.none_of / unexpected char: '{v29}' / chars: %A{v97} / s: %A{struct (v2, v3, v4)}"
                US18_1(v101)
    let v121 : US19 =
        match v106 with
        | US18_1(v118) -> (* Error *)
            US19_1(v118)
        | US18_0(v107, v108, v109, v110, v111) -> (* Ok *)
            let v113 : (char -> string) = _.ToString()
            let v114 : string = v113 v107
            US19_0(v114, v108, v109, v110, v111)
    match v121 with
    | US19_1(v129) -> (* Error *)
        let v130 : UH2 = UH2_0
        let v131 : UH2 = method123(v0, v130)
        US26_0(v131, v1, v2, v3, v4)
    | US19_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : UH2 = UH2_1(v122, v0)
        method125(v127, v123, v124, v125, v126)
and method117 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US26 =
    let v5 : bool = "" = v1
    let v114 : US18 =
        if v5 then
            let v6 : char list = []
            let v8 : char list = ' ' :: v6 
            let v12 : char list = '"' :: v8 
            let v16 : char list = '`' :: v12 
            let v20 : char list = '\\' :: v16 
            let v24 : (char list -> (char [])) = List.toArray
            let v25 : (char []) = v24 v20
            let v29 : string = $"parsing.none_of / unexpected end of input / chars: %A{v25} / s: %A{struct (v2, v3, v4)}"
            US18_1(v29)
        else
            let v33 : char = v1.[int 0]
            let v34 : int64 = 0L
            let v35 : bool = method118(v33, v34)
            let v36 : bool = v35 = false
            if v36 then
                let v38 : (string -> int32) = String.length
                let v39 : int32 = v38 v1
                let v47 : int32 = 1 |> int32 
                let v60 : int32 = v39 |> int32 
                let v68 : int32 = v60 - 1
                let v70 : string = v1.[int v47..int v68]
                let v75 : (char -> string) = _.ToString()
                let v76 : string = v75 v33
                let v79 : int64 = System.Convert.ToInt64 v76.Length
                let v80 : int64 = 0L
                let v81 : UH0 = method105(v79, v76, v80)
                let struct (v82 : System.Text.StringBuilder, v83 : int32, v84 : int32) = method106(v81, v2, v3, v4)
                US18_0(v33, v70, v82, v83, v84)
            else
                let v86 : char list = []
                let v88 : char list = ' ' :: v86 
                let v92 : char list = '"' :: v88 
                let v96 : char list = '`' :: v92 
                let v100 : char list = '\\' :: v96 
                let v104 : (char list -> (char [])) = List.toArray
                let v105 : (char []) = v104 v100
                let v109 : string = $"parsing.none_of / unexpected char: '{v33}' / chars: %A{v105} / s: %A{struct (v2, v3, v4)}"
                US18_1(v109)
    let v134 : US19 =
        match v114 with
        | US18_1(v131) -> (* Error *)
            US19_1(v131)
        | US18_0(v115, v116, v117, v118, v119) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v115
            let struct (v125 : string, v126 : string, v127 : System.Text.StringBuilder, v128 : int32, v129 : int32) = method119(v122, v116, v117, v118, v119)
            US19_0(v125, v126, v127, v128, v129)
    let v522 : US19 =
        match v134 with
        | US19_1(v140) -> (* Error *)
            let v261 : US18 =
                if v5 then
                    let v142 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US18_1(v142)
                else
                    let v146 : char = v1.[int 0]
                    let v147 : bool = v146 = '"'
                    if v147 then
                        let v149 : (string -> int32) = String.length
                        let v150 : int32 = v149 v1
                        let v158 : int32 = 1 |> int32 
                        let v171 : int32 = v150 |> int32 
                        let v179 : int32 = v171 - 1
                        let v181 : string = v1.[int v158..int v179]
                        let v186 : (char -> string) = _.ToString()
                        let v187 : string = v186 v146
                        let v190 : int64 = System.Convert.ToInt64 v187.Length
                        let v191 : int64 = 0L
                        let v192 : UH0 = method105(v190, v187, v191)
                        let struct (v193 : System.Text.StringBuilder, v194 : int32, v195 : int32) = method106(v192, v2, v3, v4)
                        US18_0(v146, v181, v193, v194, v195)
                    else
                        let v198 : string = "\n"
                        let v199 : int32 = v1.IndexOf v198 
                        let v202 : int32 = v199 - 1
                        let v203 : bool = -2 = v202
                        let v211 : int32 =
                            if v203 then
                                let v205 : (string -> int32) = String.length
                                let v206 : int32 = v205 v1
                                let v209 : int32 = v206 + 1
                                v209
                            else
                                let v210 : int32 = v202 + 1
                                v210
                        let v217 : int32 = 0 |> int32 
                        let v230 : int32 = v211 |> int32 
                        let v238 : int32 = v230 - 1
                        let v240 : string = v1.[int v217..int v238]
                        let v245 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v240}"
                        let v248 : int32 = v4 - 1
                        let v249 : int32 = 0
                        let v250 : (string -> string) = method107(v248, v249)
                        let v251 : string = ""
                        let v252 : string = v250 v251
                        let v253 : string = "^"
                        let v254 : string = v252 + v253 
                        let v256 : string = $"{v245}
{v254}
"
                        US18_1(v256)
            let v451 : US19 =
                match v261 with
                | US18_1(v448) -> (* Error *)
                    US19_1(v448)
                | US18_0(v262, v263, v264, v265, v266) -> (* Ok *)
                    let v267 : UH2 = UH2_0
                    let v268 : US26 = method120(v267, v263, v264, v265, v266)
                    let v301 : US19 =
                        match v268 with
                        | US26_1(v298) -> (* Error *)
                            US19_1(v298)
                        | US26_0(v269, v270, v271, v272, v273) -> (* Ok *)
                            let v274 : string list = []
                            let v275 : string list = method124(v269, v274)
                            let v280 : unit = ()
                            let _let'_v280 =
                                seq {
                                    yield! v275 
                                    (* indent
                                    ()
                                indent *)
                                }
                                (* indent
                                ()
                            indent *)
                            let v283 : string seq = _let'_v280 
                            let v291 : (string -> (string seq -> string)) = String.concat
                            let v292 : string = ""
                            let v293 : (string seq -> string) = v291 v292
                            let v294 : string = v293 v283
                            US19_0(v294, v270, v271, v272, v273)
                    match v301 with
                    | US19_1(v443) -> (* Error *)
                        let v444 : string = "parsing.between / expected content"
                        US19_1(v444)
                    | US19_0(v302, v303, v304, v305, v306) -> (* Ok *)
                        let v307 : bool = "" = v303
                        let v428 : US18 =
                            if v307 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v304, v305, v306)}"
                                US18_1(v309)
                            else
                                let v313 : char = v303.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v316 : (string -> int32) = String.length
                                    let v317 : int32 = v316 v303
                                    let v325 : int32 = 1 |> int32 
                                    let v338 : int32 = v317 |> int32 
                                    let v346 : int32 = v338 - 1
                                    let v348 : string = v303.[int v325..int v346]
                                    let v353 : (char -> string) = _.ToString()
                                    let v354 : string = v353 v313
                                    let v357 : int64 = System.Convert.ToInt64 v354.Length
                                    let v358 : int64 = 0L
                                    let v359 : UH0 = method105(v357, v354, v358)
                                    let struct (v360 : System.Text.StringBuilder, v361 : int32, v362 : int32) = method106(v359, v304, v305, v306)
                                    US18_0(v313, v348, v360, v361, v362)
                                else
                                    let v365 : string = "\n"
                                    let v366 : int32 = v303.IndexOf v365 
                                    let v369 : int32 = v366 - 1
                                    let v370 : bool = -2 = v369
                                    let v378 : int32 =
                                        if v370 then
                                            let v372 : (string -> int32) = String.length
                                            let v373 : int32 = v372 v303
                                            let v376 : int32 = v373 + 1
                                            v376
                                        else
                                            let v377 : int32 = v369 + 1
                                            v377
                                    let v384 : int32 = 0 |> int32 
                                    let v397 : int32 = v378 |> int32 
                                    let v405 : int32 = v397 - 1
                                    let v407 : string = v303.[int v384..int v405]
                                    let v412 : string = $"parsing.p_char / expected: '{'"'}' / line: {v305} / col: {v306}
{v304}{v407}"
                                    let v415 : int32 = v306 - 1
                                    let v416 : int32 = 0
                                    let v417 : (string -> string) = method107(v415, v416)
                                    let v418 : string = ""
                                    let v419 : string = v417 v418
                                    let v420 : string = "^"
                                    let v421 : string = v419 + v420 
                                    let v423 : string = $"{v412}
{v421}
"
                                    US18_1(v423)
                        match v428 with
                        | US18_1(v435) -> (* Error *)
                            let v437 : string = $"parsing.between / expected closing delimiter / e: %A{v435} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v263, v264, v265, v266)} / rest2: %A{struct (v303, v304, v305, v306)}"
                            US19_1(v437)
                        | US18_0(v429, v430, v431, v432, v433) -> (* Ok *)
                            US19_0(v302, v430, v431, v432, v433)
            match v451 with
            | US19_1(v457) -> (* Error *)
                let v458 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure38()
                let v459 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US19) = closure39()
                let v460 : UH3 = UH3_0
                let v461 : UH3 = UH3_1(v459, v460)
                let v462 : UH3 = UH3_1(v458, v461)
                let v463 : US19 = method122(v1, v2, v3, v4, v462)
                let v474 : US19 =
                    match v463 with
                    | US19_1(v471) -> (* Error *)
                        US19_1(v471)
                    | US19_0(v464, v465, v466, v467, v468) -> (* Ok *)
                        let v469 : string = ""
                        US19_0(v469, v465, v466, v467, v468)
                let v485 : US26 =
                    match v474 with
                    | US19_1(v482) -> (* Error *)
                        US26_1(v482)
                    | US19_0(v475, v476, v477, v478, v479) -> (* Ok *)
                        let v480 : UH2 = UH2_0
                        method125(v480, v476, v477, v478, v479)
                match v485 with
                | US26_1(v515) -> (* Error *)
                    US19_1(v515)
                | US26_0(v486, v487, v488, v489, v490) -> (* Ok *)
                    let v491 : string list = []
                    let v492 : string list = method124(v486, v491)
                    let v497 : unit = ()
                    let _let'_v497 =
                        seq {
                            yield! v492 
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v500 : string seq = _let'_v497 
                    let v508 : (string -> (string seq -> string)) = String.concat
                    let v509 : string = ""
                    let v510 : (string seq -> string) = v508 v509
                    let v511 : string = v510 v500
                    US19_0(v511, v487, v488, v489, v490)
            | US19_0(v452, v453, v454, v455, v456) -> (* Ok *)
                v451
        | US19_0(v135, v136, v137, v138, v139) -> (* Ok *)
            v134
    match v522 with
    | US19_1(v585) -> (* Error *)
        let v586 : UH2 = UH2_0
        let v587 : UH2 = method123(v0, v586)
        US26_0(v587, v1, v2, v3, v4)
    | US19_0(v523, v524, v525, v526, v527) -> (* Ok *)
        let v528 : int32 = 0
        let v529 : int32 = method114(v524, v528)
        let v530 : bool = 0 = v529
        let v571 : US21 =
            if v530 then
                let v531 : string = "parsing.spaces1 / expected at least one space"
                US21_1(v531)
            else
                let v534 : (string -> int32) = String.length
                let v535 : int32 = v534 v524
                let v543 : int32 = v529 |> int32 
                let v556 : int32 = v535 |> int32 
                let v564 : int32 = v556 - 1
                let v566 : string = v524.[int v543..int v564]
                US21_0(v566, v525, v526, v527)
        match v571 with
        | US21_1(v578) -> (* Error *)
            let v579 : UH2 = UH2_0
            let v580 : UH2 = UH2_1(v523, v579)
            let v581 : UH2 = method123(v0, v580)
            US26_0(v581, v524, v525, v526, v527)
        | US21_0(v572, v573, v574, v575) -> (* Ok *)
            let v576 : UH2 = UH2_1(v523, v0)
            method117(v576, v572, v573, v574, v575)
and method116 (v0 : string) : US25 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v2 : (string -> string option) = Option.ofObj
    let v3 : string option = v2 v0
    v3 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v4 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v9 : string = ""
    let v10 : string = v4 |> Option.defaultValue v9 
    let v13 : string = method104()
    let v15 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v16 : System.Text.StringBuilder = v15 v13
    let v19 : UH2 = UH2_0
    let v20 : int32 = 1
    let v21 : int32 = 1
    let v22 : US26 = method117(v19, v10, v16, v20, v21)
    match v22 with
    | US26_1(v36) -> (* Error *)
        US25_1(v36)
    | US26_0(v23, v24, v25, v26, v27) -> (* Ok *)
        let v28 : string list = []
        let v29 : string list = method124(v23, v28)
        let v31 : (string list -> (string [])) = List.toArray
        let v32 : (string []) = v31 v29
        US25_0(v32)
and method127 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v10, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v24 : string = "file_name"
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v10, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string = " = "
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v10, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = $"{v0}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v10, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v55 : string = "; "
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v66 : string = "arguments"
    let v67 : string = $"{v66}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v10, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v35}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v10, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v1}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v10, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = $"{v55}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v10, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v104 : string = "options"
    let v105 : string = $"{v104}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v35}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v13}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v10, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v133 : string = "command"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v10, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v143 : string = $"{v35}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v10, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v152 : string = $"{v2}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v10, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v161 : string = $"{v55}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v10, v161)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v171 : string = "cancellation_token"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v10, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v35}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v10, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v202 : string = "format!(\"{:#?}\", $0)"
    let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v202 
    let v204 : string = "fable_library_rust::String_::fromString($0)"
    let v205 : string = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let _run_target_args'_v193 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v193 = v207 
    #endif
#if FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v193 = v211 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v193 = v215 
    #endif
#else
    let v219 : string = $"%A{v3}"
    let _run_target_args'_v193 = v219 
    #endif
    let v222 : string = _run_target_args'_v193 
    let v229 : string = $"{v222}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v238 : string = $"{v55}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v10, v238)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v248 : string = "environment_variables"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"{v35}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v10, v258)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v267 : string = $"%A{v4}"
    let v271 : string = $"{v267}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = $"{v55}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v10, v280)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v290 : string = "on_line"
    let v291 : string = $"{v290}"
    let v294 : unit = ()
    let v295 : (unit -> unit) = closure7(v10, v291)
    let v296 : unit = (fun () -> v295 (); v294) ()
    let v300 : string = $"{v35}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    (* run_target_args'
    let v312 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v313 : string = "format!(\"{:#?}\", $0)"
    let v314 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v313 
    let v315 : string = "fable_library_rust::String_::fromString($0)"
    let v316 : string = Fable.Core.RustInterop.emitRustExpr v314 v315 
    let _run_target_args'_v312 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = "format!(\"{:#?}\", $0)"
    let v318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v317 
    let v319 : string = "fable_library_rust::String_::fromString($0)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let _run_target_args'_v312 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = "format!(\"{:#?}\", $0)"
    let v322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v321 
    let v323 : string = "fable_library_rust::String_::fromString($0)"
    let v324 : string = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let _run_target_args'_v312 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : string = $"%A{v5}"
    let _run_target_args'_v312 = v326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v330 : string = $"%A{v5}"
    let _run_target_args'_v312 = v330 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v334 : string = $"%A{v5}"
    let _run_target_args'_v312 = v334 
    #endif
#else
    let v338 : string = $"%A{v5}"
    let _run_target_args'_v312 = v338 
    #endif
    let v341 : string = _run_target_args'_v312 
    let v348 : string = $"{v341}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v10, v348)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v357 : string = $"{v55}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v367 : string = "stdin"
    let v368 : string = $"{v367}"
    let v371 : unit = ()
    let v372 : (unit -> unit) = closure7(v10, v368)
    let v373 : unit = (fun () -> v372 (); v371) ()
    let v377 : string = $"{v35}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v10, v377)
    let v382 : unit = (fun () -> v381 (); v380) ()
    (* run_target_args'
    let v389 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v390 : string = "format!(\"{:#?}\", $0)"
    let v391 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v390 
    let v392 : string = "fable_library_rust::String_::fromString($0)"
    let v393 : string = Fable.Core.RustInterop.emitRustExpr v391 v392 
    let _run_target_args'_v389 = v393 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v394 : string = "format!(\"{:#?}\", $0)"
    let v395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v394 
    let v396 : string = "fable_library_rust::String_::fromString($0)"
    let v397 : string = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let _run_target_args'_v389 = v397 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v398 : string = "format!(\"{:#?}\", $0)"
    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v398 
    let v400 : string = "fable_library_rust::String_::fromString($0)"
    let v401 : string = Fable.Core.RustInterop.emitRustExpr v399 v400 
    let _run_target_args'_v389 = v401 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v403 : string = $"%A{v6}"
    let _run_target_args'_v389 = v403 
    #endif
#if FABLE_COMPILER_PYTHON
    let v407 : string = $"%A{v6}"
    let _run_target_args'_v389 = v407 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v411 : string = $"%A{v6}"
    let _run_target_args'_v389 = v411 
    #endif
#else
    let v415 : string = $"%A{v6}"
    let _run_target_args'_v389 = v415 
    #endif
    let v418 : string = _run_target_args'_v389 
    let v425 : string = $"{v418}"
    let v428 : unit = ()
    let v429 : (unit -> unit) = closure7(v10, v425)
    let v430 : unit = (fun () -> v429 (); v428) ()
    let v434 : string = $"{v55}"
    let v437 : unit = ()
    let v438 : (unit -> unit) = closure7(v10, v434)
    let v439 : unit = (fun () -> v438 (); v437) ()
    let v444 : string = "trace"
    let v445 : string = $"{v444}"
    let v448 : unit = ()
    let v449 : (unit -> unit) = closure7(v10, v445)
    let v450 : unit = (fun () -> v449 (); v448) ()
    let v454 : string = $"{v35}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v464 : string =
        if v7 then
            let v462 : string = "true"
            v462
        else
            let v463 : string = "false"
            v463
    let v466 : string = $"{v464}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v475 : string = $"{v55}"
    let v478 : unit = ()
    let v479 : (unit -> unit) = closure7(v10, v475)
    let v480 : unit = (fun () -> v479 (); v478) ()
    let v485 : string = "working_directory"
    let v486 : string = $"{v485}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v10, v486)
    let v491 : unit = (fun () -> v490 (); v489) ()
    let v495 : string = $"{v35}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v10, v495)
    let v500 : unit = (fun () -> v499 (); v498) ()
    (* run_target_args'
    let v507 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v508 : string = "format!(\"{:#?}\", $0)"
    let v509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v508 
    let v510 : string = "fable_library_rust::String_::fromString($0)"
    let v511 : string = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let _run_target_args'_v507 = v511 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : string = "format!(\"{:#?}\", $0)"
    let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v512 
    let v514 : string = "fable_library_rust::String_::fromString($0)"
    let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
    let _run_target_args'_v507 = v515 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v516 : string = "format!(\"{:#?}\", $0)"
    let v517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v516 
    let v518 : string = "fable_library_rust::String_::fromString($0)"
    let v519 : string = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let _run_target_args'_v507 = v519 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v521 : string = $"%A{v8}"
    let _run_target_args'_v507 = v521 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = $"%A{v8}"
    let _run_target_args'_v507 = v525 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v529 : string = $"%A{v8}"
    let _run_target_args'_v507 = v529 
    #endif
#else
    let v533 : string = $"%A{v8}"
    let _run_target_args'_v507 = v533 
    #endif
    let v536 : string = _run_target_args'_v507 
    let v543 : string = $"{v536}"
    let v546 : unit = ()
    let v547 : (unit -> unit) = closure7(v10, v543)
    let v548 : unit = (fun () -> v547 (); v546) ()
    let v553 : string = " }"
    let v554 : string = $"{v553}"
    let v557 : unit = ()
    let v558 : (unit -> unit) = closure7(v10, v554)
    let v559 : unit = (fun () -> v558 (); v557) ()
    let v563 : string = $"{v553}"
    let v566 : unit = ()
    let v567 : (unit -> unit) = closure7(v10, v563)
    let v568 : unit = (fun () -> v567 (); v566) ()
    let v571 : string = v10.l0
    v571
and method126 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method127(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure40 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v55 : string = $"%A{v8}"
        let v58 : string = method126(v34, v35, v36, v37, v38, v39, v52, v53, v7, v55, v0, v1, v2, v3, v4, v5, v6)
        method19(v58)
and closure41 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method128 () : (std_process_Child option -> std_process_Child option) =
    closure41()
and closure42 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US27 =
    US27_0(v0)
and method129 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) =
    closure42()
and closure43 () (v0 : std_string_String) : US27 =
    US27_1(v0)
and method130 () : (std_string_String -> US27) =
    closure43()
and method132 (v0 : std_string_String, v1 : string, v2 : string, v3 : string, v4 : System.Threading.CancellationToken option, v5 : (struct (string * string) []), v6 : (struct (int32 * string * bool) -> Async<unit>) option, v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v8 : bool, v9 : string option) : string =
    let v10 : string = method14()
    let v11 : Mut3 = {l0 = v10} : Mut3
    let v14 : string = "{ "
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v11, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v25 : string = "error"
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v11, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v36 : string = " = "
    let v37 : string = $"{v36}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v11, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    (* run_target_args'
    let v49 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v50 : string = "format!(\"{:#?}\", $0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v49 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "format!(\"{:#?}\", $0)"
    let v55 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v54 
    let v56 : string = "fable_library_rust::String_::fromString($0)"
    let v57 : string = Fable.Core.RustInterop.emitRustExpr v55 v56 
    let _run_target_args'_v49 = v57 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v58 : string = "format!(\"{:#?}\", $0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v58 
    let v60 : string = "fable_library_rust::String_::fromString($0)"
    let v61 : string = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let _run_target_args'_v49 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v49 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : string = $"%A{v0}"
    let _run_target_args'_v49 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : string = $"%A{v0}"
    let _run_target_args'_v49 = v71 
    #endif
#else
    let v75 : string = $"%A{v0}"
    let _run_target_args'_v49 = v75 
    #endif
    let v78 : string = _run_target_args'_v49 
    let v85 : string = $"{v78}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v11, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v95 : string = "; "
    let v96 : string = $"{v95}"
    let v99 : unit = ()
    let v100 : (unit -> unit) = closure7(v11, v96)
    let v101 : unit = (fun () -> v100 (); v99) ()
    let v106 : string = "file_name"
    let v107 : string = $"{v106}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v11, v107)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v116 : string = $"{v36}"
    let v119 : unit = ()
    let v120 : (unit -> unit) = closure7(v11, v116)
    let v121 : unit = (fun () -> v120 (); v119) ()
    let v125 : string = $"{v1}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v11, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v134 : string = $"{v95}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v11, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v144 : string = "arguments"
    let v145 : string = $"{v144}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v11, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v154 : string = $"{v36}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v11, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v163 : string = $"{v2}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v11, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v172 : string = $"{v95}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v11, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v182 : string = "options"
    let v183 : string = $"{v182}"
    let v186 : unit = ()
    let v187 : (unit -> unit) = closure7(v11, v183)
    let v188 : unit = (fun () -> v187 (); v186) ()
    let v192 : string = $"{v36}"
    let v195 : unit = ()
    let v196 : (unit -> unit) = closure7(v11, v192)
    let v197 : unit = (fun () -> v196 (); v195) ()
    let v201 : string = $"{v14}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v11, v201)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v211 : string = "command"
    let v212 : string = $"{v211}"
    let v215 : unit = ()
    let v216 : (unit -> unit) = closure7(v11, v212)
    let v217 : unit = (fun () -> v216 (); v215) ()
    let v221 : string = $"{v36}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v11, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v230 : string = $"{v3}"
    let v233 : unit = ()
    let v234 : (unit -> unit) = closure7(v11, v230)
    let v235 : unit = (fun () -> v234 (); v233) ()
    let v239 : string = $"{v95}"
    let v242 : unit = ()
    let v243 : (unit -> unit) = closure7(v11, v239)
    let v244 : unit = (fun () -> v243 (); v242) ()
    let v249 : string = "cancellation_token"
    let v250 : string = $"{v249}"
    let v253 : unit = ()
    let v254 : (unit -> unit) = closure7(v11, v250)
    let v255 : unit = (fun () -> v254 (); v253) ()
    let v259 : string = $"{v36}"
    let v262 : unit = ()
    let v263 : (unit -> unit) = closure7(v11, v259)
    let v264 : unit = (fun () -> v263 (); v262) ()
    (* run_target_args'
    let v271 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v272 : string = "format!(\"{:#?}\", $0)"
    let v273 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v272 
    let v274 : string = "fable_library_rust::String_::fromString($0)"
    let v275 : string = Fable.Core.RustInterop.emitRustExpr v273 v274 
    let _run_target_args'_v271 = v275 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v276 : string = "format!(\"{:#?}\", $0)"
    let v277 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v276 
    let v278 : string = "fable_library_rust::String_::fromString($0)"
    let v279 : string = Fable.Core.RustInterop.emitRustExpr v277 v278 
    let _run_target_args'_v271 = v279 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v280 : string = "format!(\"{:#?}\", $0)"
    let v281 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v280 
    let v282 : string = "fable_library_rust::String_::fromString($0)"
    let v283 : string = Fable.Core.RustInterop.emitRustExpr v281 v282 
    let _run_target_args'_v271 = v283 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v285 : string = $"%A{v4}"
    let _run_target_args'_v271 = v285 
    #endif
#if FABLE_COMPILER_PYTHON
    let v289 : string = $"%A{v4}"
    let _run_target_args'_v271 = v289 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v293 : string = $"%A{v4}"
    let _run_target_args'_v271 = v293 
    #endif
#else
    let v297 : string = $"%A{v4}"
    let _run_target_args'_v271 = v297 
    #endif
    let v300 : string = _run_target_args'_v271 
    let v307 : string = $"{v300}"
    let v310 : unit = ()
    let v311 : (unit -> unit) = closure7(v11, v307)
    let v312 : unit = (fun () -> v311 (); v310) ()
    let v316 : string = $"{v95}"
    let v319 : unit = ()
    let v320 : (unit -> unit) = closure7(v11, v316)
    let v321 : unit = (fun () -> v320 (); v319) ()
    let v326 : string = "environment_variables"
    let v327 : string = $"{v326}"
    let v330 : unit = ()
    let v331 : (unit -> unit) = closure7(v11, v327)
    let v332 : unit = (fun () -> v331 (); v330) ()
    let v336 : string = $"{v36}"
    let v339 : unit = ()
    let v340 : (unit -> unit) = closure7(v11, v336)
    let v341 : unit = (fun () -> v340 (); v339) ()
    let v345 : string = $"%A{v5}"
    let v349 : string = $"{v345}"
    let v352 : unit = ()
    let v353 : (unit -> unit) = closure7(v11, v349)
    let v354 : unit = (fun () -> v353 (); v352) ()
    let v358 : string = $"{v95}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v11, v358)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v368 : string = "on_line"
    let v369 : string = $"{v368}"
    let v372 : unit = ()
    let v373 : (unit -> unit) = closure7(v11, v369)
    let v374 : unit = (fun () -> v373 (); v372) ()
    let v378 : string = $"{v36}"
    let v381 : unit = ()
    let v382 : (unit -> unit) = closure7(v11, v378)
    let v383 : unit = (fun () -> v382 (); v381) ()
    (* run_target_args'
    let v390 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v391 : string = "format!(\"{:#?}\", $0)"
    let v392 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v391 
    let v393 : string = "fable_library_rust::String_::fromString($0)"
    let v394 : string = Fable.Core.RustInterop.emitRustExpr v392 v393 
    let _run_target_args'_v390 = v394 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v395 : string = "format!(\"{:#?}\", $0)"
    let v396 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v395 
    let v397 : string = "fable_library_rust::String_::fromString($0)"
    let v398 : string = Fable.Core.RustInterop.emitRustExpr v396 v397 
    let _run_target_args'_v390 = v398 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v399 : string = "format!(\"{:#?}\", $0)"
    let v400 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v399 
    let v401 : string = "fable_library_rust::String_::fromString($0)"
    let v402 : string = Fable.Core.RustInterop.emitRustExpr v400 v401 
    let _run_target_args'_v390 = v402 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v404 : string = $"%A{v6}"
    let _run_target_args'_v390 = v404 
    #endif
#if FABLE_COMPILER_PYTHON
    let v408 : string = $"%A{v6}"
    let _run_target_args'_v390 = v408 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v412 : string = $"%A{v6}"
    let _run_target_args'_v390 = v412 
    #endif
#else
    let v416 : string = $"%A{v6}"
    let _run_target_args'_v390 = v416 
    #endif
    let v419 : string = _run_target_args'_v390 
    let v426 : string = $"{v419}"
    let v429 : unit = ()
    let v430 : (unit -> unit) = closure7(v11, v426)
    let v431 : unit = (fun () -> v430 (); v429) ()
    let v435 : string = $"{v95}"
    let v438 : unit = ()
    let v439 : (unit -> unit) = closure7(v11, v435)
    let v440 : unit = (fun () -> v439 (); v438) ()
    let v445 : string = "stdin"
    let v446 : string = $"{v445}"
    let v449 : unit = ()
    let v450 : (unit -> unit) = closure7(v11, v446)
    let v451 : unit = (fun () -> v450 (); v449) ()
    let v455 : string = $"{v36}"
    let v458 : unit = ()
    let v459 : (unit -> unit) = closure7(v11, v455)
    let v460 : unit = (fun () -> v459 (); v458) ()
    (* run_target_args'
    let v467 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v468 : string = "format!(\"{:#?}\", $0)"
    let v469 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v468 
    let v470 : string = "fable_library_rust::String_::fromString($0)"
    let v471 : string = Fable.Core.RustInterop.emitRustExpr v469 v470 
    let _run_target_args'_v467 = v471 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v472 : string = "format!(\"{:#?}\", $0)"
    let v473 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v472 
    let v474 : string = "fable_library_rust::String_::fromString($0)"
    let v475 : string = Fable.Core.RustInterop.emitRustExpr v473 v474 
    let _run_target_args'_v467 = v475 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v476 : string = "format!(\"{:#?}\", $0)"
    let v477 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v476 
    let v478 : string = "fable_library_rust::String_::fromString($0)"
    let v479 : string = Fable.Core.RustInterop.emitRustExpr v477 v478 
    let _run_target_args'_v467 = v479 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v481 : string = $"%A{v7}"
    let _run_target_args'_v467 = v481 
    #endif
#if FABLE_COMPILER_PYTHON
    let v485 : string = $"%A{v7}"
    let _run_target_args'_v467 = v485 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v489 : string = $"%A{v7}"
    let _run_target_args'_v467 = v489 
    #endif
#else
    let v493 : string = $"%A{v7}"
    let _run_target_args'_v467 = v493 
    #endif
    let v496 : string = _run_target_args'_v467 
    let v503 : string = $"{v496}"
    let v506 : unit = ()
    let v507 : (unit -> unit) = closure7(v11, v503)
    let v508 : unit = (fun () -> v507 (); v506) ()
    let v512 : string = $"{v95}"
    let v515 : unit = ()
    let v516 : (unit -> unit) = closure7(v11, v512)
    let v517 : unit = (fun () -> v516 (); v515) ()
    let v522 : string = "trace"
    let v523 : string = $"{v522}"
    let v526 : unit = ()
    let v527 : (unit -> unit) = closure7(v11, v523)
    let v528 : unit = (fun () -> v527 (); v526) ()
    let v532 : string = $"{v36}"
    let v535 : unit = ()
    let v536 : (unit -> unit) = closure7(v11, v532)
    let v537 : unit = (fun () -> v536 (); v535) ()
    let v542 : string =
        if v8 then
            let v540 : string = "true"
            v540
        else
            let v541 : string = "false"
            v541
    let v544 : string = $"{v542}"
    let v547 : unit = ()
    let v548 : (unit -> unit) = closure7(v11, v544)
    let v549 : unit = (fun () -> v548 (); v547) ()
    let v553 : string = $"{v95}"
    let v556 : unit = ()
    let v557 : (unit -> unit) = closure7(v11, v553)
    let v558 : unit = (fun () -> v557 (); v556) ()
    let v563 : string = "working_directory"
    let v564 : string = $"{v563}"
    let v567 : unit = ()
    let v568 : (unit -> unit) = closure7(v11, v564)
    let v569 : unit = (fun () -> v568 (); v567) ()
    let v573 : string = $"{v36}"
    let v576 : unit = ()
    let v577 : (unit -> unit) = closure7(v11, v573)
    let v578 : unit = (fun () -> v577 (); v576) ()
    (* run_target_args'
    let v585 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v586 : string = "format!(\"{:#?}\", $0)"
    let v587 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v586 
    let v588 : string = "fable_library_rust::String_::fromString($0)"
    let v589 : string = Fable.Core.RustInterop.emitRustExpr v587 v588 
    let _run_target_args'_v585 = v589 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v590 : string = "format!(\"{:#?}\", $0)"
    let v591 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v590 
    let v592 : string = "fable_library_rust::String_::fromString($0)"
    let v593 : string = Fable.Core.RustInterop.emitRustExpr v591 v592 
    let _run_target_args'_v585 = v593 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v594 : string = "format!(\"{:#?}\", $0)"
    let v595 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v594 
    let v596 : string = "fable_library_rust::String_::fromString($0)"
    let v597 : string = Fable.Core.RustInterop.emitRustExpr v595 v596 
    let _run_target_args'_v585 = v597 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v599 : string = $"%A{v9}"
    let _run_target_args'_v585 = v599 
    #endif
#if FABLE_COMPILER_PYTHON
    let v603 : string = $"%A{v9}"
    let _run_target_args'_v585 = v603 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v607 : string = $"%A{v9}"
    let _run_target_args'_v585 = v607 
    #endif
#else
    let v611 : string = $"%A{v9}"
    let _run_target_args'_v585 = v611 
    #endif
    let v614 : string = _run_target_args'_v585 
    let v621 : string = $"{v614}"
    let v624 : unit = ()
    let v625 : (unit -> unit) = closure7(v11, v621)
    let v626 : unit = (fun () -> v625 (); v624) ()
    let v631 : string = " }"
    let v632 : string = $"{v631}"
    let v635 : unit = ()
    let v636 : (unit -> unit) = closure7(v11, v632)
    let v637 : unit = (fun () -> v636 (); v635) ()
    let v641 : string = $"{v631}"
    let v644 : unit = ()
    let v645 : (unit -> unit) = closure7(v11, v641)
    let v646 : unit = (fun () -> v645 (); v644) ()
    let v649 : string = v11.l0
    v649
and method131 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method132(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v21 : string = "runtime.execute_with_options / child error"
    let v22 : string = $"{v6} {v7} #{v19} %s{v21} / {v18}"
    method18(v22)
and closure44 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v10 : US0 = US0_4
    let v11 : bool = method7(v10)
    if v11 then
        let v12 : unit = ()
        let v13 : (unit -> unit) = closure2()
        let v14 : unit = (fun () -> v13 (); v12) ()
        let struct (v35 : Mut0, v36 : Mut1, v37 : Mut2, v38 : Mut3, v39 : Mut4, v40 : int64 option) = TraceState.trace_state.Value
        let v53 : string = method8(v35, v36, v37, v38, v39, v40)
        let v54 : string = method82()
        let v56 : string = $"%A{v8}"
        let v59 : string = method131(v35, v36, v37, v38, v39, v40, v53, v54, v9, v7, v56, v0, v1, v2, v3, v4, v5, v6)
        method19(v59)
and method133 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure45 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method134 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure45()
and closure46 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method135 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and method136 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure46()
and closure47 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method137 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure47()
and closure48 () (v0 : std_string_String) : US29 =
    US29_0(v0)
and method138 () : (std_string_String -> US29) =
    closure48()
and closure49 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method139 () : (std_string_String -> US29) =
    closure49()
and method141 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "trace'"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v39 : string =
        if v0 then
            let v37 : string = "true"
            v37
        else
            let v38 : string = "false"
            v38
    let v41 : string = $"{v39}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v3, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v3, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v62 : string = "e"
    let v63 : string = $"{v62}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v3, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v72 : string = $"{v28}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v3, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    (* run_target_args'
    let v84 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v85 : string = "format!(\"{:#?}\", $0)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v85 
    let v87 : string = "fable_library_rust::String_::fromString($0)"
    let v88 : string = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let _run_target_args'_v84 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "format!(\"{:#?}\", $0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v89 
    let v91 : string = "fable_library_rust::String_::fromString($0)"
    let v92 : string = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let _run_target_args'_v84 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "format!(\"{:#?}\", $0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v93 
    let v95 : string = "fable_library_rust::String_::fromString($0)"
    let v96 : string = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let _run_target_args'_v84 = v96 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v98 : string = $"%A{v1}"
    let _run_target_args'_v84 = v98 
    #endif
#if FABLE_COMPILER_PYTHON
    let v102 : string = $"%A{v1}"
    let _run_target_args'_v84 = v102 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v106 : string = $"%A{v1}"
    let _run_target_args'_v84 = v106 
    #endif
#else
    let v110 : string = $"%A{v1}"
    let _run_target_args'_v84 = v110 
    #endif
    let v113 : string = _run_target_args'_v84 
    let v120 : string = $"{v113}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v3, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v130 : string = " }"
    let v131 : string = $"{v130}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v3, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v139 : string = v3.l0
    v139
and method140 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method141(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.stdio_line"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure50 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method140(v27, v28, v29, v30, v31, v32, v45, v46, v0, v1)
        method19(v47)
and method143 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method142 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method143()
    let v10 : int64 = v0.l0
    let v12 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v12)
and closure51 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method142(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and closure52 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method144 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure52()
and method145 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure53 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US30 =
    US30_0(v0)
and method146 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) =
    closure53()
and method147 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure54 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US31 =
    US31_0(v0)
and method148 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) =
    closure54()
and method149 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and closure55 () (v0 : std_process_Output) : US32 =
    US32_0(v0)
and method150 () : (std_process_Output -> US32) =
    closure55()
and closure56 () (v0 : std_string_String) : US32 =
    US32_1(v0)
and method151 () : (std_string_String -> US32) =
    closure56()
and method152 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : string, v10 : string, v11 : string, v12 : System.Threading.CancellationToken option, v13 : (struct (string * string) []), v14 : (struct (int32 * string * bool) -> Async<unit>) option, v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v16 : bool, v17 : string option) : string =
    let v18 : string = method132(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
    let v19 : int64 = v0.l0
    let v21 : string = "runtime.execute_with_options / output error"
    let v22 : string = $"{v6} {v7} #{v19} %s{v21} / {v18}"
    method18(v22)
and closure57 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>, v9 : std_string_String) () : unit =
    let v10 : US0 = US0_4
    let v11 : bool = method7(v10)
    if v11 then
        let v12 : unit = ()
        let v13 : (unit -> unit) = closure2()
        let v14 : unit = (fun () -> v13 (); v12) ()
        let struct (v35 : Mut0, v36 : Mut1, v37 : Mut2, v38 : Mut3, v39 : Mut4, v40 : int64 option) = TraceState.trace_state.Value
        let v53 : string = method8(v35, v36, v37, v38, v39, v40)
        let v54 : string = method82()
        let v56 : string = $"%A{v8}"
        let v59 : string = method152(v35, v36, v37, v38, v39, v40, v53, v54, v9, v7, v56, v0, v1, v2, v3, v4, v5, v6)
        method19(v59)
and closure58 () (v0 : int32) : US33 =
    US33_0(v0)
and method153 () : (int32 -> US33) =
    closure58()
and method155 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "std_trace_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method154 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method155(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "runtime.execute_with_options / result"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure59 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method85()
        let v47 : int32 = v1.Length
        let v48 : string = method154(v27, v28, v29, v30, v31, v32, v45, v46, v0, v47)
        method19(v48)
and method159 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v10, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v24 : string = "file_name"
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v10, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string = " = "
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v10, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = $"{v0}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v10, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v55 : string = "; "
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v66 : string = "arguments"
    let v67 : string = $"{v66}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v10, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v35}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v10, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"%A{v1}"
    let v89 : string = $"{v85}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v98 : string = $"{v55}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v10, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v108 : string = "options"
    let v109 : string = $"{v108}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v10, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v118 : string = $"{v35}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v10, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v127 : string = $"{v13}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v10, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v137 : string = "command"
    let v138 : string = $"{v137}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v10, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v147 : string = $"{v35}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v10, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v156 : string = $"{v2}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v10, v156)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v165 : string = $"{v55}"
    let v168 : unit = ()
    let v169 : (unit -> unit) = closure7(v10, v165)
    let v170 : unit = (fun () -> v169 (); v168) ()
    let v175 : string = "cancellation_token"
    let v176 : string = $"{v175}"
    let v179 : unit = ()
    let v180 : (unit -> unit) = closure7(v10, v176)
    let v181 : unit = (fun () -> v180 (); v179) ()
    let v185 : string = $"{v35}"
    let v188 : unit = ()
    let v189 : (unit -> unit) = closure7(v10, v185)
    let v190 : unit = (fun () -> v189 (); v188) ()
    (* run_target_args'
    let v197 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v197 = v201 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v202 : string = "format!(\"{:#?}\", $0)"
    let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v202 
    let v204 : string = "fable_library_rust::String_::fromString($0)"
    let v205 : string = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let _run_target_args'_v197 = v205 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v206 : string = "format!(\"{:#?}\", $0)"
    let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v206 
    let v208 : string = "fable_library_rust::String_::fromString($0)"
    let v209 : string = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let _run_target_args'_v197 = v209 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v197 = v211 
    #endif
#if FABLE_COMPILER_PYTHON
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v197 = v215 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v219 : string = $"%A{v3}"
    let _run_target_args'_v197 = v219 
    #endif
#else
    let v223 : string = $"%A{v3}"
    let _run_target_args'_v197 = v223 
    #endif
    let v226 : string = _run_target_args'_v197 
    let v233 : string = $"{v226}"
    let v236 : unit = ()
    let v237 : (unit -> unit) = closure7(v10, v233)
    let v238 : unit = (fun () -> v237 (); v236) ()
    let v242 : string = $"{v55}"
    let v245 : unit = ()
    let v246 : (unit -> unit) = closure7(v10, v242)
    let v247 : unit = (fun () -> v246 (); v245) ()
    let v252 : string = "environment_variables"
    let v253 : string = $"{v252}"
    let v256 : unit = ()
    let v257 : (unit -> unit) = closure7(v10, v253)
    let v258 : unit = (fun () -> v257 (); v256) ()
    let v262 : string = $"{v35}"
    let v265 : unit = ()
    let v266 : (unit -> unit) = closure7(v10, v262)
    let v267 : unit = (fun () -> v266 (); v265) ()
    let v271 : string = $"%A{v4}"
    let v275 : string = $"{v271}"
    let v278 : unit = ()
    let v279 : (unit -> unit) = closure7(v10, v275)
    let v280 : unit = (fun () -> v279 (); v278) ()
    let v284 : string = $"{v55}"
    let v287 : unit = ()
    let v288 : (unit -> unit) = closure7(v10, v284)
    let v289 : unit = (fun () -> v288 (); v287) ()
    let v294 : string = "on_line"
    let v295 : string = $"{v294}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v10, v295)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v304 : string = $"{v35}"
    let v307 : unit = ()
    let v308 : (unit -> unit) = closure7(v10, v304)
    let v309 : unit = (fun () -> v308 (); v307) ()
    (* run_target_args'
    let v316 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v317 : string = "format!(\"{:#?}\", $0)"
    let v318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v317 
    let v319 : string = "fable_library_rust::String_::fromString($0)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let _run_target_args'_v316 = v320 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v321 : string = "format!(\"{:#?}\", $0)"
    let v322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v321 
    let v323 : string = "fable_library_rust::String_::fromString($0)"
    let v324 : string = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let _run_target_args'_v316 = v324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v325 : string = "format!(\"{:#?}\", $0)"
    let v326 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v325 
    let v327 : string = "fable_library_rust::String_::fromString($0)"
    let v328 : string = Fable.Core.RustInterop.emitRustExpr v326 v327 
    let _run_target_args'_v316 = v328 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v330 : string = $"%A{v5}"
    let _run_target_args'_v316 = v330 
    #endif
#if FABLE_COMPILER_PYTHON
    let v334 : string = $"%A{v5}"
    let _run_target_args'_v316 = v334 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v338 : string = $"%A{v5}"
    let _run_target_args'_v316 = v338 
    #endif
#else
    let v342 : string = $"%A{v5}"
    let _run_target_args'_v316 = v342 
    #endif
    let v345 : string = _run_target_args'_v316 
    let v352 : string = $"{v345}"
    let v355 : unit = ()
    let v356 : (unit -> unit) = closure7(v10, v352)
    let v357 : unit = (fun () -> v356 (); v355) ()
    let v361 : string = $"{v55}"
    let v364 : unit = ()
    let v365 : (unit -> unit) = closure7(v10, v361)
    let v366 : unit = (fun () -> v365 (); v364) ()
    let v371 : string = "stdin"
    let v372 : string = $"{v371}"
    let v375 : unit = ()
    let v376 : (unit -> unit) = closure7(v10, v372)
    let v377 : unit = (fun () -> v376 (); v375) ()
    let v381 : string = $"{v35}"
    let v384 : unit = ()
    let v385 : (unit -> unit) = closure7(v10, v381)
    let v386 : unit = (fun () -> v385 (); v384) ()
    (* run_target_args'
    let v393 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v394 : string = "format!(\"{:#?}\", $0)"
    let v395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v394 
    let v396 : string = "fable_library_rust::String_::fromString($0)"
    let v397 : string = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let _run_target_args'_v393 = v397 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v398 : string = "format!(\"{:#?}\", $0)"
    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v398 
    let v400 : string = "fable_library_rust::String_::fromString($0)"
    let v401 : string = Fable.Core.RustInterop.emitRustExpr v399 v400 
    let _run_target_args'_v393 = v401 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v402 : string = "format!(\"{:#?}\", $0)"
    let v403 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v402 
    let v404 : string = "fable_library_rust::String_::fromString($0)"
    let v405 : string = Fable.Core.RustInterop.emitRustExpr v403 v404 
    let _run_target_args'_v393 = v405 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v407 : string = $"%A{v6}"
    let _run_target_args'_v393 = v407 
    #endif
#if FABLE_COMPILER_PYTHON
    let v411 : string = $"%A{v6}"
    let _run_target_args'_v393 = v411 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v415 : string = $"%A{v6}"
    let _run_target_args'_v393 = v415 
    #endif
#else
    let v419 : string = $"%A{v6}"
    let _run_target_args'_v393 = v419 
    #endif
    let v422 : string = _run_target_args'_v393 
    let v429 : string = $"{v422}"
    let v432 : unit = ()
    let v433 : (unit -> unit) = closure7(v10, v429)
    let v434 : unit = (fun () -> v433 (); v432) ()
    let v438 : string = $"{v55}"
    let v441 : unit = ()
    let v442 : (unit -> unit) = closure7(v10, v438)
    let v443 : unit = (fun () -> v442 (); v441) ()
    let v448 : string = "trace"
    let v449 : string = $"{v448}"
    let v452 : unit = ()
    let v453 : (unit -> unit) = closure7(v10, v449)
    let v454 : unit = (fun () -> v453 (); v452) ()
    let v458 : string = $"{v35}"
    let v461 : unit = ()
    let v462 : (unit -> unit) = closure7(v10, v458)
    let v463 : unit = (fun () -> v462 (); v461) ()
    let v468 : string =
        if v7 then
            let v466 : string = "true"
            v466
        else
            let v467 : string = "false"
            v467
    let v470 : string = $"{v468}"
    let v473 : unit = ()
    let v474 : (unit -> unit) = closure7(v10, v470)
    let v475 : unit = (fun () -> v474 (); v473) ()
    let v479 : string = $"{v55}"
    let v482 : unit = ()
    let v483 : (unit -> unit) = closure7(v10, v479)
    let v484 : unit = (fun () -> v483 (); v482) ()
    let v489 : string = "working_directory"
    let v490 : string = $"{v489}"
    let v493 : unit = ()
    let v494 : (unit -> unit) = closure7(v10, v490)
    let v495 : unit = (fun () -> v494 (); v493) ()
    let v499 : string = $"{v35}"
    let v502 : unit = ()
    let v503 : (unit -> unit) = closure7(v10, v499)
    let v504 : unit = (fun () -> v503 (); v502) ()
    (* run_target_args'
    let v511 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v512 : string = "format!(\"{:#?}\", $0)"
    let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v512 
    let v514 : string = "fable_library_rust::String_::fromString($0)"
    let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
    let _run_target_args'_v511 = v515 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v516 : string = "format!(\"{:#?}\", $0)"
    let v517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v516 
    let v518 : string = "fable_library_rust::String_::fromString($0)"
    let v519 : string = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let _run_target_args'_v511 = v519 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v520 : string = "format!(\"{:#?}\", $0)"
    let v521 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v520 
    let v522 : string = "fable_library_rust::String_::fromString($0)"
    let v523 : string = Fable.Core.RustInterop.emitRustExpr v521 v522 
    let _run_target_args'_v511 = v523 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v525 : string = $"%A{v8}"
    let _run_target_args'_v511 = v525 
    #endif
#if FABLE_COMPILER_PYTHON
    let v529 : string = $"%A{v8}"
    let _run_target_args'_v511 = v529 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v533 : string = $"%A{v8}"
    let _run_target_args'_v511 = v533 
    #endif
#else
    let v537 : string = $"%A{v8}"
    let _run_target_args'_v511 = v537 
    #endif
    let v540 : string = _run_target_args'_v511 
    let v547 : string = $"{v540}"
    let v550 : unit = ()
    let v551 : (unit -> unit) = closure7(v10, v547)
    let v552 : unit = (fun () -> v551 (); v550) ()
    let v557 : string = " }"
    let v558 : string = $"{v557}"
    let v561 : unit = ()
    let v562 : (unit -> unit) = closure7(v10, v558)
    let v563 : unit = (fun () -> v562 (); v561) ()
    let v567 : string = $"{v557}"
    let v570 : unit = ()
    let v571 : (unit -> unit) = closure7(v10, v567)
    let v572 : unit = (fun () -> v571 (); v570) ()
    let v575 : string = v10.l0
    v575
and method158 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method159(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure60 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : string = method158(v34, v35, v36, v37, v38, v39, v52, v53, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v54)
and method160 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and method163 (v0 : System.Diagnostics.DataReceivedEventArgs) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = null |> unbox<string>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : string = null |> unbox<string>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = null |> unbox<string>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : string = null |> unbox<string>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string = null |> unbox<string>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : string = null |> unbox<string>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.DataReceivedEventArgs -> string) = _.Data
    let v31 : string = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : string = _run_target_args'_v5 
    v32
and closure62 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US34 =
    US34_0(v0)
and method164 () : ((struct (int32 * string * bool) -> Async<unit>) -> US34) =
    closure62()
and method165 (v0 : System.Diagnostics.Process) : int32 =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : int32 = null |> unbox<int32>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> int32) = _.Id
    let v31 : int32 = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : int32 = _run_target_args'_v5 
    v32
and closure63 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method85()
        let v46 : bool = v0 = ""
        let v49 : string =
            if v46 then
                let v47 : string = ""
                v47
            else
                method142(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v49)
and method162 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : Async<unit> = null |> unbox<Async<unit>>
    let _run_target_args'_v15 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : unit = ()
    let _let'_v29 =
        async {
            let v32 : string = method163(v10)
            let v34 : string = null |> unbox<string>
            let v37 : bool = v32 = v34
            let v38 : bool = v37 <> true
            if v38 then
                let v41 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v42 : US34 option = v3 |> Option.map v41 
                let v62 : US34 = US34_1
                let v63 : US34 = v42 |> Option.defaultValue v62 
                match v63 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v67) -> (* Some *)
                    let v68 : int32 = method165(v7)
                    let v69 : Async<unit> = v67 struct (v68, v32, v9)
                    do! v69 
                    ()
                let v72 : string =
                    if v9 then
                        let v70 : string = $"! {v32}"
                        v70
                    else
                        let v71 : string = $"> {v32}"
                        v71
                if v5 then
                    let v73 : unit = ()
                    let v74 : (unit -> unit) = closure63(v72)
                    let v75 : unit = (fun () -> v74 (); v73) ()
                    ()
                else
                    let v125 : unit = ()
                    let v126 : (unit -> unit) = closure10(v72)
                    let v127 : unit = (fun () -> v126 (); v125) ()
                    ()
                let v131 : string =
                    if v9 then
                        let v129 : string = "\u001b[7;4m"
                        v129
                    else
                        let v130 : string = ""
                        v130
                let v134 : string =
                    if v9 then
                        let v132 : string = "\u001b[0m"
                        v132
                    else
                        let v133 : string = ""
                        v133
                let v135 : string = $"{v131}{v32}{v134}"
                (* run_target_args'
                let v136 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v137 : (string -> unit) = v8.Push
                v137 v135
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v880 : Async<unit> = _let'_v29 
    let _run_target_args'_v15 = v880 
    #endif
#if FABLE_COMPILER_PYTHON
    let v882 : unit = ()
    let _let'_v882 =
        async {
            let v885 : string = method163(v10)
            let v887 : string = null |> unbox<string>
            let v890 : bool = v885 = v887
            let v891 : bool = v890 <> true
            if v891 then
                let v894 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v895 : US34 option = v3 |> Option.map v894 
                let v915 : US34 = US34_1
                let v916 : US34 = v895 |> Option.defaultValue v915 
                match v916 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v920) -> (* Some *)
                    let v921 : int32 = method165(v7)
                    let v922 : Async<unit> = v920 struct (v921, v885, v9)
                    do! v922 
                    ()
                let v925 : string =
                    if v9 then
                        let v923 : string = $"! {v885}"
                        v923
                    else
                        let v924 : string = $"> {v885}"
                        v924
                if v5 then
                    let v926 : unit = ()
                    let v927 : (unit -> unit) = closure63(v925)
                    let v928 : unit = (fun () -> v927 (); v926) ()
                    ()
                else
                    let v978 : unit = ()
                    let v979 : (unit -> unit) = closure10(v925)
                    let v980 : unit = (fun () -> v979 (); v978) ()
                    ()
                let v984 : string =
                    if v9 then
                        let v982 : string = "\u001b[7;4m"
                        v982
                    else
                        let v983 : string = ""
                        v983
                let v987 : string =
                    if v9 then
                        let v985 : string = "\u001b[0m"
                        v985
                    else
                        let v986 : string = ""
                        v986
                let v988 : string = $"{v984}{v885}{v987}"
                (* run_target_args'
                let v989 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v990 : (string -> unit) = v8.Push
                v990 v988
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1733 : Async<unit> = _let'_v882 
    let _run_target_args'_v15 = v1733 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1735 : unit = ()
    let _let'_v1735 =
        async {
            let v1738 : string = method163(v10)
            let v1740 : string = null |> unbox<string>
            let v1743 : bool = v1738 = v1740
            let v1744 : bool = v1743 <> true
            if v1744 then
                let v1747 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v1748 : US34 option = v3 |> Option.map v1747 
                let v1768 : US34 = US34_1
                let v1769 : US34 = v1748 |> Option.defaultValue v1768 
                match v1769 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v1773) -> (* Some *)
                    let v1774 : int32 = method165(v7)
                    let v1775 : Async<unit> = v1773 struct (v1774, v1738, v9)
                    do! v1775 
                    ()
                let v1778 : string =
                    if v9 then
                        let v1776 : string = $"! {v1738}"
                        v1776
                    else
                        let v1777 : string = $"> {v1738}"
                        v1777
                if v5 then
                    let v1779 : unit = ()
                    let v1780 : (unit -> unit) = closure63(v1778)
                    let v1781 : unit = (fun () -> v1780 (); v1779) ()
                    ()
                else
                    let v1831 : unit = ()
                    let v1832 : (unit -> unit) = closure10(v1778)
                    let v1833 : unit = (fun () -> v1832 (); v1831) ()
                    ()
                let v1837 : string =
                    if v9 then
                        let v1835 : string = "\u001b[7;4m"
                        v1835
                    else
                        let v1836 : string = ""
                        v1836
                let v1840 : string =
                    if v9 then
                        let v1838 : string = "\u001b[0m"
                        v1838
                    else
                        let v1839 : string = ""
                        v1839
                let v1841 : string = $"{v1837}{v1738}{v1840}"
                (* run_target_args'
                let v1842 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v1843 : (string -> unit) = v8.Push
                v1843 v1841
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2586 : Async<unit> = _let'_v1735 
    let _run_target_args'_v15 = v2586 
    #endif
#else
    let v2588 : unit = ()
    let _let'_v2588 =
        async {
            let v2591 : string = method163(v10)
            let v2593 : string = null |> unbox<string>
            let v2596 : bool = v2591 = v2593
            let v2597 : bool = v2596 <> true
            if v2597 then
                let v2600 : ((struct (int32 * string * bool) -> Async<unit>) -> US34) = method164()
                let v2601 : US34 option = v3 |> Option.map v2600 
                let v2621 : US34 = US34_1
                let v2622 : US34 = v2601 |> Option.defaultValue v2621 
                match v2622 with
                | US34_1 -> (* None *)
                    ()
                | US34_0(v2626) -> (* Some *)
                    let v2627 : int32 = method165(v7)
                    let v2628 : Async<unit> = v2626 struct (v2627, v2591, v9)
                    do! v2628 
                    ()
                let v2631 : string =
                    if v9 then
                        let v2629 : string = $"! {v2591}"
                        v2629
                    else
                        let v2630 : string = $"> {v2591}"
                        v2630
                if v5 then
                    let v2632 : unit = ()
                    let v2633 : (unit -> unit) = closure63(v2631)
                    let v2634 : unit = (fun () -> v2633 (); v2632) ()
                    ()
                else
                    let v2684 : unit = ()
                    let v2685 : (unit -> unit) = closure10(v2631)
                    let v2686 : unit = (fun () -> v2685 (); v2684) ()
                    ()
                let v2690 : string =
                    if v9 then
                        let v2688 : string = "\u001b[7;4m"
                        v2688
                    else
                        let v2689 : string = ""
                        v2689
                let v2693 : string =
                    if v9 then
                        let v2691 : string = "\u001b[0m"
                        v2691
                    else
                        let v2692 : string = ""
                        v2692
                let v2694 : string = $"{v2690}{v2591}{v2693}"
                (* run_target_args'
                let v2695 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v2696 : (string -> unit) = v8.Push
                v2696 v2694
                #endif
                // run_target_args' is_unit
                ()
            ()
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3439 : Async<unit> = _let'_v2588 
    let _run_target_args'_v15 = v3439 
    #endif
    let v3440 : Async<unit> = _run_target_args'_v15 
    v3440
and method161 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool, v10 : System.Diagnostics.DataReceivedEventArgs) : Async<unit> =
    method162(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
and closure61 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>, v9 : bool) (v10 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v11 : Async<unit> = method161(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : (Async<unit> -> unit) = Async.StartImmediate
    v13 v11
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : (Async<unit> -> unit) = Async.StartImmediate
    v14 v11
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : (Async<unit> -> unit) = Async.StartImmediate
    v15 v11
    #endif
#else
    let v16 : (Async<unit> -> unit) = Async.StartImmediate
    v16 v11
    #endif
    // run_target_args' is_unit
    ()
and closure64 () (v0 : System.Threading.CancellationToken) : US35 =
    US35_0(v0)
and method166 () : (System.Threading.CancellationToken -> US35) =
    closure64()
and method167 (v0 : System.Threading.CancellationToken) : Async<System.Threading.CancellationToken> =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : unit = ()
    let _let'_v19 =
        async {
            (* run_target_args'
            let v26 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v28 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v28 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v32 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v32 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v36 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v40 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v40 
            #endif
#if FABLE_COMPILER_PYTHON
            let v44 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v44 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v48 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v48 
            #endif
#else
            let v51 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v51 = v51 
            let v52 : System.Threading.CancellationToken = v51 
            let v53 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v54 : (System.Threading.CancellationToken []) = [|v52; v53; v0|]
            let v55 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v56 : System.Threading.CancellationTokenSource = v55 v54
            let v57 : System.Threading.CancellationToken = v56.Token
            return v57 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v342 : Async<System.Threading.CancellationToken> = _let'_v19 
    let _run_target_args'_v5 = v342 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : unit = ()
    let _let'_v344 =
        async {
            (* run_target_args'
            let v351 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v353 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v353 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v357 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v357 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v361 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v361 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v365 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v365 
            #endif
#if FABLE_COMPILER_PYTHON
            let v369 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v369 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v373 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v373 
            #endif
#else
            let v376 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v376 = v376 
            let v377 : System.Threading.CancellationToken = v376 
            let v378 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v379 : (System.Threading.CancellationToken []) = [|v377; v378; v0|]
            let v380 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v381 : System.Threading.CancellationTokenSource = v380 v379
            let v382 : System.Threading.CancellationToken = v381.Token
            return v382 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v667 : Async<System.Threading.CancellationToken> = _let'_v344 
    let _run_target_args'_v5 = v667 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v669 : unit = ()
    let _let'_v669 =
        async {
            (* run_target_args'
            let v676 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v678 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v678 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v682 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v682 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v686 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v686 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v690 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v690 
            #endif
#if FABLE_COMPILER_PYTHON
            let v694 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v694 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v698 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v698 
            #endif
#else
            let v701 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v701 = v701 
            let v702 : System.Threading.CancellationToken = v701 
            let v703 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v704 : (System.Threading.CancellationToken []) = [|v702; v703; v0|]
            let v705 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v706 : System.Threading.CancellationTokenSource = v705 v704
            let v707 : System.Threading.CancellationToken = v706.Token
            return v707 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v992 : Async<System.Threading.CancellationToken> = _let'_v669 
    let _run_target_args'_v5 = v992 
    #endif
#else
    let v994 : unit = ()
    let _let'_v994 =
        async {
            (* run_target_args'
            let v1001 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1003 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1003 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1007 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1007 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1011 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1011 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1015 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1015 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1019 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1019 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1023 : System.Threading.CancellationToken = null |> unbox<System.Threading.CancellationToken>
            return v1023 
            #endif
#else
            let v1026 : Async<System.Threading.CancellationToken> = Async.CancellationToken
            let! v1026 = v1026 
            let v1027 : System.Threading.CancellationToken = v1026 
            let v1028 : System.Threading.CancellationToken = Async.DefaultCancellationToken
            let v1029 : (System.Threading.CancellationToken []) = [|v1027; v1028; v0|]
            let v1030 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
            let v1031 : System.Threading.CancellationTokenSource = v1030 v1029
            let v1032 : System.Threading.CancellationToken = v1031.Token
            return v1032 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v1317 : Async<System.Threading.CancellationToken> = _let'_v994 
    let _run_target_args'_v5 = v1317 
    #endif
    let v1318 : Async<System.Threading.CancellationToken> = _run_target_args'_v5 
    v1318
and method168 (v0 : System.Diagnostics.Process) : bool =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : bool = null |> unbox<bool>
    let _run_target_args'_v5 = v27 
    #endif
#else
    let v30 : (System.Diagnostics.Process -> bool) = _.HasExited
    let v31 : bool = v30 v0
    let _run_target_args'_v5 = v31 
    #endif
    let v32 : bool = _run_target_args'_v5 
    v32
and method169 (v0 : System.Diagnostics.Process) : unit =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    #endif
#if FABLE_COMPILER_RUST && WASM
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    #endif
#if FABLE_COMPILER_PYTHON
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    #endif
#else
    let v2 : (System.Diagnostics.Process -> unit) = _.Kill()
    v2 v0
    #endif
    // run_target_args' is_unit
    ()
and closure65 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : bool = method168(v0)
    let v2 : bool = v1 = false
    if v2 then
        method169(v0)
and method172 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "ex"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v2, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v86 : string = " }"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v2, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = v2.l0
    v95
and method171 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method172(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure66 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method43()
        let v46 : string = method171(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method170 (v0 : System.Diagnostics.Process, v1 : System.Collections.Concurrent.ConcurrentStack<string>, v2 : System.Threading.CancellationToken) : Async<int32> =
    (* run_target_args'
    let v7 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<int32> = null |> unbox<Async<int32>>
    let _run_target_args'_v7 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : unit = ()
    let _let'_v21 =
        async {
            try
                (* run_target_args'
                let v28 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v30 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v30 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v34 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v38 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v38 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v42 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v42 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v28 = v50 
                #endif
#else
                let v53 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v28 = v53 
                #endif
                let v54 : System.Threading.Tasks.Task = _run_target_args'_v28 
                (* run_target_args'
                let v64 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v66 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v66 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v70 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v70 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v74 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v64 = v74 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v77 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v78 : Async<unit> = v77 v54
                let _run_target_args'_v64 = v78 
                #endif
#if FABLE_COMPILER_PYTHON
                let v79 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v80 : Async<unit> = v79 v54
                let _run_target_args'_v64 = v80 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v81 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v82 : Async<unit> = v81 v54
                let _run_target_args'_v64 = v82 
                #endif
#else
                let v83 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v84 : Async<unit> = v83 v54
                let _run_target_args'_v64 = v84 
                #endif
                let v85 : Async<unit> = _run_target_args'_v64 
                do! v85 
                (* run_target_args'
                let v95 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v97 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v97 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v101 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v101 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v105 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v105 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v109 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v109 
                #endif
#if FABLE_COMPILER_PYTHON
                let v113 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v113 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v117 : int32 = null |> unbox<int32>
                let _run_target_args'_v95 = v117 
                #endif
#else
                let v120 : int32 = v0.ExitCode
                let _run_target_args'_v95 = v120 
                #endif
                let v121 : int32 = _run_target_args'_v95 
                return v121 
                (* indent
                ()
            indent *)
            with ex ->
                let v230 : exn = ex
                (* run_target_args'
                let v235 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v237 : string = $"%A{v230}"
                let _run_target_args'_v235 = v237 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v241 : string = $"%A{v230}"
                let _run_target_args'_v235 = v241 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v245 : string = $"%A{v230}"
                let _run_target_args'_v235 = v245 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v249 : string = $"%A{v230}"
                let _run_target_args'_v235 = v249 
                #endif
#if FABLE_COMPILER_PYTHON
                let v253 : string = $"%A{v230}"
                let _run_target_args'_v235 = v253 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v257 : string = $"%A{v230}"
                let _run_target_args'_v235 = v257 
                #endif
#else
                let v260 : string = $"{v230.GetType ()}: {v230.Message}"
                let _run_target_args'_v235 = v260 
                #endif
                let v261 : string = _run_target_args'_v235 
                (* run_target_args'
                let v267 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v268 : (string -> unit) = v1.Push
                v268 v261
                #endif
                // run_target_args' is_unit
                let v270 : System.Threading.Tasks.TaskCanceledException = v230 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v273 : unit = ()
                let v274 : (unit -> unit) = closure66(v270)
                let v275 : unit = (fun () -> v274 (); v273) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v3144 : Async<int32> = _let'_v21 
    let _run_target_args'_v7 = v3144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3146 : unit = ()
    let _let'_v3146 =
        async {
            try
                (* run_target_args'
                let v3153 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3155 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3155 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3159 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3159 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3163 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3163 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3167 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3167 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3171 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3171 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3175 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v3153 = v3175 
                #endif
#else
                let v3178 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v3153 = v3178 
                #endif
                let v3179 : System.Threading.Tasks.Task = _run_target_args'_v3153 
                (* run_target_args'
                let v3189 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3191 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3191 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3195 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3195 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3199 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v3189 = v3199 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3202 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3203 : Async<unit> = v3202 v3179
                let _run_target_args'_v3189 = v3203 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3204 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3205 : Async<unit> = v3204 v3179
                let _run_target_args'_v3189 = v3205 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3206 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3207 : Async<unit> = v3206 v3179
                let _run_target_args'_v3189 = v3207 
                #endif
#else
                let v3208 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v3209 : Async<unit> = v3208 v3179
                let _run_target_args'_v3189 = v3209 
                #endif
                let v3210 : Async<unit> = _run_target_args'_v3189 
                do! v3210 
                (* run_target_args'
                let v3220 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3222 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3222 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3226 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3226 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3230 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3230 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3234 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3234 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3238 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3238 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3242 : int32 = null |> unbox<int32>
                let _run_target_args'_v3220 = v3242 
                #endif
#else
                let v3245 : int32 = v0.ExitCode
                let _run_target_args'_v3220 = v3245 
                #endif
                let v3246 : int32 = _run_target_args'_v3220 
                return v3246 
                (* indent
                ()
            indent *)
            with ex ->
                let v3355 : exn = ex
                (* run_target_args'
                let v3360 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3362 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3362 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3366 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3366 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3370 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3370 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3374 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3374 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3378 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3378 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3382 : string = $"%A{v3355}"
                let _run_target_args'_v3360 = v3382 
                #endif
#else
                let v3385 : string = $"{v3355.GetType ()}: {v3355.Message}"
                let _run_target_args'_v3360 = v3385 
                #endif
                let v3386 : string = _run_target_args'_v3360 
                (* run_target_args'
                let v3392 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v3393 : (string -> unit) = v1.Push
                v3393 v3386
                #endif
                // run_target_args' is_unit
                let v3395 : System.Threading.Tasks.TaskCanceledException = v3355 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v3398 : unit = ()
                let v3399 : (unit -> unit) = closure66(v3395)
                let v3400 : unit = (fun () -> v3399 (); v3398) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v6269 : Async<int32> = _let'_v3146 
    let _run_target_args'_v7 = v6269 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6271 : unit = ()
    let _let'_v6271 =
        async {
            try
                (* run_target_args'
                let v6278 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6280 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6280 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6284 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6284 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6288 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6288 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6292 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6292 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6296 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6296 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6300 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v6278 = v6300 
                #endif
#else
                let v6303 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v6278 = v6303 
                #endif
                let v6304 : System.Threading.Tasks.Task = _run_target_args'_v6278 
                (* run_target_args'
                let v6314 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6316 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6316 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6320 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6320 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6324 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v6314 = v6324 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6327 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6328 : Async<unit> = v6327 v6304
                let _run_target_args'_v6314 = v6328 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6329 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6330 : Async<unit> = v6329 v6304
                let _run_target_args'_v6314 = v6330 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6331 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6332 : Async<unit> = v6331 v6304
                let _run_target_args'_v6314 = v6332 
                #endif
#else
                let v6333 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v6334 : Async<unit> = v6333 v6304
                let _run_target_args'_v6314 = v6334 
                #endif
                let v6335 : Async<unit> = _run_target_args'_v6314 
                do! v6335 
                (* run_target_args'
                let v6345 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6347 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6347 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6351 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6351 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6355 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6355 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6359 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6359 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6363 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6363 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6367 : int32 = null |> unbox<int32>
                let _run_target_args'_v6345 = v6367 
                #endif
#else
                let v6370 : int32 = v0.ExitCode
                let _run_target_args'_v6345 = v6370 
                #endif
                let v6371 : int32 = _run_target_args'_v6345 
                return v6371 
                (* indent
                ()
            indent *)
            with ex ->
                let v6480 : exn = ex
                (* run_target_args'
                let v6485 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v6487 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6487 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v6491 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6491 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v6495 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6495 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v6499 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6499 
                #endif
#if FABLE_COMPILER_PYTHON
                let v6503 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6503 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v6507 : string = $"%A{v6480}"
                let _run_target_args'_v6485 = v6507 
                #endif
#else
                let v6510 : string = $"{v6480.GetType ()}: {v6480.Message}"
                let _run_target_args'_v6485 = v6510 
                #endif
                let v6511 : string = _run_target_args'_v6485 
                (* run_target_args'
                let v6517 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v6518 : (string -> unit) = v1.Push
                v6518 v6511
                #endif
                // run_target_args' is_unit
                let v6520 : System.Threading.Tasks.TaskCanceledException = v6480 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v6523 : unit = ()
                let v6524 : (unit -> unit) = closure66(v6520)
                let v6525 : unit = (fun () -> v6524 (); v6523) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9394 : Async<int32> = _let'_v6271 
    let _run_target_args'_v7 = v9394 
    #endif
#else
    let v9396 : unit = ()
    let _let'_v9396 =
        async {
            try
                (* run_target_args'
                let v9403 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9405 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9405 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9409 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9409 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9413 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9413 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9417 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9417 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9421 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9421 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9425 : System.Threading.Tasks.Task = null |> unbox<System.Threading.Tasks.Task>
                let _run_target_args'_v9403 = v9425 
                #endif
#else
                let v9428 : System.Threading.Tasks.Task = v0.WaitForExitAsync v2 
                let _run_target_args'_v9403 = v9428 
                #endif
                let v9429 : System.Threading.Tasks.Task = _run_target_args'_v9403 
                (* run_target_args'
                let v9439 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9441 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9441 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9445 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9445 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9449 : Async<unit> = null |> unbox<Async<unit>>
                let _run_target_args'_v9439 = v9449 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9452 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9453 : Async<unit> = v9452 v9429
                let _run_target_args'_v9439 = v9453 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9454 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9455 : Async<unit> = v9454 v9429
                let _run_target_args'_v9439 = v9455 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9456 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9457 : Async<unit> = v9456 v9429
                let _run_target_args'_v9439 = v9457 
                #endif
#else
                let v9458 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                let v9459 : Async<unit> = v9458 v9429
                let _run_target_args'_v9439 = v9459 
                #endif
                let v9460 : Async<unit> = _run_target_args'_v9439 
                do! v9460 
                (* run_target_args'
                let v9470 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9472 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9472 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9476 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9476 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9480 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9480 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9484 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9484 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9488 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9488 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9492 : int32 = null |> unbox<int32>
                let _run_target_args'_v9470 = v9492 
                #endif
#else
                let v9495 : int32 = v0.ExitCode
                let _run_target_args'_v9470 = v9495 
                #endif
                let v9496 : int32 = _run_target_args'_v9470 
                return v9496 
                (* indent
                ()
            indent *)
            with ex ->
                let v9605 : exn = ex
                (* run_target_args'
                let v9610 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v9612 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9612 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v9616 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9616 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v9620 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9620 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v9624 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9624 
                #endif
#if FABLE_COMPILER_PYTHON
                let v9628 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9628 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v9632 : string = $"%A{v9605}"
                let _run_target_args'_v9610 = v9632 
                #endif
#else
                let v9635 : string = $"{v9605.GetType ()}: {v9605.Message}"
                let _run_target_args'_v9610 = v9635 
                #endif
                let v9636 : string = _run_target_args'_v9610 
                (* run_target_args'
                let v9642 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                #endif
#if FABLE_COMPILER_RUST && WASM
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                #endif
#if FABLE_COMPILER_PYTHON
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                #endif
#else
                let v9643 : (string -> unit) = v1.Push
                v9643 v9636
                #endif
                // run_target_args' is_unit
                let v9645 : System.Threading.Tasks.TaskCanceledException = v9605 |> unbox<System.Threading.Tasks.TaskCanceledException>
                let v9648 : unit = ()
                let v9649 : (unit -> unit) = closure66(v9645)
                let v9650 : unit = (fun () -> v9649 (); v9648) ()
                return -2147483648 
                (* indent
                ()
            indent *)
            (* try_unit
            try_unit *)
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v12519 : Async<int32> = _let'_v9396 
    let _run_target_args'_v7 = v12519 
    #endif
    let v12520 : Async<int32> = _run_target_args'_v7 
    v12520
and method174 (v0 : int32, v1 : int32, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v13 : string = "{ "
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v10, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v24 : string = "exit_code"
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v10, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string = " = "
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v10, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v45 : string = $"{v0}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v10, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v55 : string = "; "
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v66 : string = "output_length"
    let v67 : string = $"{v66}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v10, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v76 : string = $"{v35}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v10, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v85 : string = $"{v1}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v10, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v94 : string = $"{v55}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v10, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v104 : string = "options"
    let v105 : string = $"{v104}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v114 : string = $"{v35}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v123 : string = $"{v13}"
    let v126 : unit = ()
    let v127 : (unit -> unit) = closure7(v10, v123)
    let v128 : unit = (fun () -> v127 (); v126) ()
    let v133 : string = "command"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v10, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v143 : string = $"{v35}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v10, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v152 : string = $"{v2}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v10, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v161 : string = $"{v55}"
    let v164 : unit = ()
    let v165 : (unit -> unit) = closure7(v10, v161)
    let v166 : unit = (fun () -> v165 (); v164) ()
    let v171 : string = "cancellation_token"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v10, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v181 : string = $"{v35}"
    let v184 : unit = ()
    let v185 : (unit -> unit) = closure7(v10, v181)
    let v186 : unit = (fun () -> v185 (); v184) ()
    (* run_target_args'
    let v193 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : string = "format!(\"{:#?}\", $0)"
    let v195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v194 
    let v196 : string = "fable_library_rust::String_::fromString($0)"
    let v197 : string = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let _run_target_args'_v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v198 : string = "format!(\"{:#?}\", $0)"
    let v199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v198 
    let v200 : string = "fable_library_rust::String_::fromString($0)"
    let v201 : string = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let _run_target_args'_v193 = v201 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v202 : string = "format!(\"{:#?}\", $0)"
    let v203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v202 
    let v204 : string = "fable_library_rust::String_::fromString($0)"
    let v205 : string = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let _run_target_args'_v193 = v205 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v207 : string = $"%A{v3}"
    let _run_target_args'_v193 = v207 
    #endif
#if FABLE_COMPILER_PYTHON
    let v211 : string = $"%A{v3}"
    let _run_target_args'_v193 = v211 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v215 : string = $"%A{v3}"
    let _run_target_args'_v193 = v215 
    #endif
#else
    let v219 : string = $"%A{v3}"
    let _run_target_args'_v193 = v219 
    #endif
    let v222 : string = _run_target_args'_v193 
    let v229 : string = $"{v222}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v238 : string = $"{v55}"
    let v241 : unit = ()
    let v242 : (unit -> unit) = closure7(v10, v238)
    let v243 : unit = (fun () -> v242 (); v241) ()
    let v248 : string = "environment_variables"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v258 : string = $"{v35}"
    let v261 : unit = ()
    let v262 : (unit -> unit) = closure7(v10, v258)
    let v263 : unit = (fun () -> v262 (); v261) ()
    let v267 : string = $"%A{v4}"
    let v271 : string = $"{v267}"
    let v274 : unit = ()
    let v275 : (unit -> unit) = closure7(v10, v271)
    let v276 : unit = (fun () -> v275 (); v274) ()
    let v280 : string = $"{v55}"
    let v283 : unit = ()
    let v284 : (unit -> unit) = closure7(v10, v280)
    let v285 : unit = (fun () -> v284 (); v283) ()
    let v290 : string = "on_line"
    let v291 : string = $"{v290}"
    let v294 : unit = ()
    let v295 : (unit -> unit) = closure7(v10, v291)
    let v296 : unit = (fun () -> v295 (); v294) ()
    let v300 : string = $"{v35}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    (* run_target_args'
    let v312 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v313 : string = "format!(\"{:#?}\", $0)"
    let v314 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v313 
    let v315 : string = "fable_library_rust::String_::fromString($0)"
    let v316 : string = Fable.Core.RustInterop.emitRustExpr v314 v315 
    let _run_target_args'_v312 = v316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v317 : string = "format!(\"{:#?}\", $0)"
    let v318 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v317 
    let v319 : string = "fable_library_rust::String_::fromString($0)"
    let v320 : string = Fable.Core.RustInterop.emitRustExpr v318 v319 
    let _run_target_args'_v312 = v320 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = "format!(\"{:#?}\", $0)"
    let v322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v321 
    let v323 : string = "fable_library_rust::String_::fromString($0)"
    let v324 : string = Fable.Core.RustInterop.emitRustExpr v322 v323 
    let _run_target_args'_v312 = v324 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : string = $"%A{v5}"
    let _run_target_args'_v312 = v326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v330 : string = $"%A{v5}"
    let _run_target_args'_v312 = v330 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v334 : string = $"%A{v5}"
    let _run_target_args'_v312 = v334 
    #endif
#else
    let v338 : string = $"%A{v5}"
    let _run_target_args'_v312 = v338 
    #endif
    let v341 : string = _run_target_args'_v312 
    let v348 : string = $"{v341}"
    let v351 : unit = ()
    let v352 : (unit -> unit) = closure7(v10, v348)
    let v353 : unit = (fun () -> v352 (); v351) ()
    let v357 : string = $"{v55}"
    let v360 : unit = ()
    let v361 : (unit -> unit) = closure7(v10, v357)
    let v362 : unit = (fun () -> v361 (); v360) ()
    let v367 : string = "stdin"
    let v368 : string = $"{v367}"
    let v371 : unit = ()
    let v372 : (unit -> unit) = closure7(v10, v368)
    let v373 : unit = (fun () -> v372 (); v371) ()
    let v377 : string = $"{v35}"
    let v380 : unit = ()
    let v381 : (unit -> unit) = closure7(v10, v377)
    let v382 : unit = (fun () -> v381 (); v380) ()
    (* run_target_args'
    let v389 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v390 : string = "format!(\"{:#?}\", $0)"
    let v391 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v390 
    let v392 : string = "fable_library_rust::String_::fromString($0)"
    let v393 : string = Fable.Core.RustInterop.emitRustExpr v391 v392 
    let _run_target_args'_v389 = v393 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v394 : string = "format!(\"{:#?}\", $0)"
    let v395 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v394 
    let v396 : string = "fable_library_rust::String_::fromString($0)"
    let v397 : string = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let _run_target_args'_v389 = v397 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v398 : string = "format!(\"{:#?}\", $0)"
    let v399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v398 
    let v400 : string = "fable_library_rust::String_::fromString($0)"
    let v401 : string = Fable.Core.RustInterop.emitRustExpr v399 v400 
    let _run_target_args'_v389 = v401 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v403 : string = $"%A{v6}"
    let _run_target_args'_v389 = v403 
    #endif
#if FABLE_COMPILER_PYTHON
    let v407 : string = $"%A{v6}"
    let _run_target_args'_v389 = v407 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v411 : string = $"%A{v6}"
    let _run_target_args'_v389 = v411 
    #endif
#else
    let v415 : string = $"%A{v6}"
    let _run_target_args'_v389 = v415 
    #endif
    let v418 : string = _run_target_args'_v389 
    let v425 : string = $"{v418}"
    let v428 : unit = ()
    let v429 : (unit -> unit) = closure7(v10, v425)
    let v430 : unit = (fun () -> v429 (); v428) ()
    let v434 : string = $"{v55}"
    let v437 : unit = ()
    let v438 : (unit -> unit) = closure7(v10, v434)
    let v439 : unit = (fun () -> v438 (); v437) ()
    let v444 : string = "trace"
    let v445 : string = $"{v444}"
    let v448 : unit = ()
    let v449 : (unit -> unit) = closure7(v10, v445)
    let v450 : unit = (fun () -> v449 (); v448) ()
    let v454 : string = $"{v35}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v464 : string =
        if v7 then
            let v462 : string = "true"
            v462
        else
            let v463 : string = "false"
            v463
    let v466 : string = $"{v464}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v475 : string = $"{v55}"
    let v478 : unit = ()
    let v479 : (unit -> unit) = closure7(v10, v475)
    let v480 : unit = (fun () -> v479 (); v478) ()
    let v485 : string = "working_directory"
    let v486 : string = $"{v485}"
    let v489 : unit = ()
    let v490 : (unit -> unit) = closure7(v10, v486)
    let v491 : unit = (fun () -> v490 (); v489) ()
    let v495 : string = $"{v35}"
    let v498 : unit = ()
    let v499 : (unit -> unit) = closure7(v10, v495)
    let v500 : unit = (fun () -> v499 (); v498) ()
    (* run_target_args'
    let v507 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v508 : string = "format!(\"{:#?}\", $0)"
    let v509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v508 
    let v510 : string = "fable_library_rust::String_::fromString($0)"
    let v511 : string = Fable.Core.RustInterop.emitRustExpr v509 v510 
    let _run_target_args'_v507 = v511 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v512 : string = "format!(\"{:#?}\", $0)"
    let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v512 
    let v514 : string = "fable_library_rust::String_::fromString($0)"
    let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
    let _run_target_args'_v507 = v515 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v516 : string = "format!(\"{:#?}\", $0)"
    let v517 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v516 
    let v518 : string = "fable_library_rust::String_::fromString($0)"
    let v519 : string = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let _run_target_args'_v507 = v519 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v521 : string = $"%A{v8}"
    let _run_target_args'_v507 = v521 
    #endif
#if FABLE_COMPILER_PYTHON
    let v525 : string = $"%A{v8}"
    let _run_target_args'_v507 = v525 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v529 : string = $"%A{v8}"
    let _run_target_args'_v507 = v529 
    #endif
#else
    let v533 : string = $"%A{v8}"
    let _run_target_args'_v507 = v533 
    #endif
    let v536 : string = _run_target_args'_v507 
    let v543 : string = $"{v536}"
    let v546 : unit = ()
    let v547 : (unit -> unit) = closure7(v10, v543)
    let v548 : unit = (fun () -> v547 (); v546) ()
    let v553 : string = " }"
    let v554 : string = $"{v553}"
    let v557 : unit = ()
    let v558 : (unit -> unit) = closure7(v10, v554)
    let v559 : unit = (fun () -> v558 (); v557) ()
    let v563 : string = $"{v553}"
    let v566 : unit = ()
    let v567 : (unit -> unit) = closure7(v10, v563)
    let v568 : unit = (fun () -> v567 (); v566) ()
    let v571 : string = v10.l0
    v571
and method173 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method174(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v20 : string = "runtime.execute_with_options_async"
    let v21 : string = $"{v6} {v7} #{v18} %s{v20} / {v17}"
    method18(v21)
and closure67 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : int32, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v34 : Mut0, v35 : Mut1, v36 : Mut2, v37 : Mut3, v38 : Mut4, v39 : int64 option) = TraceState.trace_state.Value
        let v52 : string = method8(v34, v35, v36, v37, v38, v39)
        let v53 : string = method12()
        let v54 : int32 = v8.Length
        let v55 : string = method173(v34, v35, v36, v37, v38, v39, v52, v53, v7, v54, v0, v1, v2, v3, v4, v5, v6)
        method19(v55)
and method157 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _run_target_args'_v11 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : unit = ()
    let _let'_v25 =
        async {
            (* run_target_args'
            let v36 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v39 : int32, v40 : string) = null |> unbox<struct (int32 * string)>
            return struct (v39, v40) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v47 : int32, v48 : string) = null |> unbox<struct (int32 * string)>
            return struct (v47, v48) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v55 : int32, v56 : string) = null |> unbox<struct (int32 * string)>
            return struct (v55, v56) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v63 : int32, v64 : string) = null |> unbox<struct (int32 * string)>
            return struct (v63, v64) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v71 : int32, v72 : string) = null |> unbox<struct (int32 * string)>
            return struct (v71, v72) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v79 : int32, v80 : string) = null |> unbox<struct (int32 * string)>
            return struct (v79, v80) 
            #endif
#else
            let v85 : US17 = method103(v0)
            let struct (v97 : string, v98 : US5) =
                match v85 with
                | US17_1(v88) -> (* Error *)
                    let v90 : string = $"resultm.get / Result value was Error: {v88}"
                    failwith<struct (string * US5)> v90
                | US17_0(v86, v87) -> (* Ok *)
                    struct (v86, v87)
            let v101 : (string -> US5) = method6()
            let v102 : US5 option = v6 |> Option.map v101 
            let v122 : US5 = US5_1
            let v123 : US5 = v102 |> Option.defaultValue v122 
            let v130 : string =
                match v123 with
                | US5_1 -> (* None *)
                    let v128 : string = ""
                    v128
                | US5_0(v127) -> (* Some *)
                    v127
            let v131 : unit = ()
            let v132 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v98, v97)
            let v133 : unit = (fun () -> v132 (); v131) ()
            let v180 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v184 : string =
                match v98 with
                | US5_1 -> (* None *)
                    let v182 : string = ""
                    v182
                | US5_0(v181) -> (* Some *)
                    v181
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v184,
              StandardOutputEncoding = v180,
              WorkingDirectory = v130,
              FileName = v97,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v185 : System.Diagnostics.ProcessStartInfo = start_info
            let v186 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v187 : int32 = v186.Length
            let v188 : Mut5 = {l0 = 0} : Mut5
            while method32(v187, v188) do
                let v190 : int32 = v188.l0
                let struct (v191 : string, v192 : string) = v186.[int v190]
                v185.EnvironmentVariables.[v191] <- v192 
                let v193 : int32 = v190 + 1
                v188.l0 <- v193
                ()
            let v194 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v185)
            use v194 = v194 
            let v195 : System.Diagnostics.Process = v194 
            let v196 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v197 : System.Collections.Concurrent.ConcurrentStack<string> = v196 ()
            let v198 : bool = false
            let v199 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v195, v197, v198)
            v195.OutputDataReceived.Add v199 
            let v200 : bool = true
            let v201 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v195, v197, v200)
            v195.ErrorDataReceived.Add v201 
            let v202 : (unit -> bool) = v195.Start
            let v203 : bool = v202 ()
            let v204 : bool = v203 = false
            if v204 then
                let v205 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v205
            let v206 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v206 v195
            let v207 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v207 v195
            let v210 : (System.Threading.CancellationToken -> US35) = method166()
            let v211 : US35 option = v1 |> Option.map v210 
            let v231 : US35 = US35_1
            let v232 : US35 = v211 |> Option.defaultValue v231 
            let v239 : System.Threading.CancellationToken =
                match v232 with
                | US35_1 -> (* None *)
                    let v237 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v237
                | US35_0(v236) -> (* Some *)
                    v236
            let v240 : Async<System.Threading.CancellationToken> = method167(v239)
            let! v240 = v240 
            let v241 : System.Threading.CancellationToken = v240 
            let v242 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v241.Register
            let v243 : (unit -> unit) = closure65(v195)
            let v244 : System.Threading.CancellationTokenRegistration = v242 v243
            use v244 = v244 
            let v245 : System.Threading.CancellationTokenRegistration = v244 
            let v246 : Async<int32> = method170(v195, v197, v241)
            let! v246 = v246 
            let v247 : int32 = v246 
            let v249 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v250 : string seq = v249 v197
            let v254 : (string seq -> string seq) = Seq.rev
            let v255 : string seq = v254 v250
            let v260 : string = method75()
            let v261 : (string -> (string seq -> string)) = String.concat
            let v262 : (string seq -> string) = v261 v260
            let v263 : string = v262 v255
            let v267 : unit = ()
            let v268 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v247, v263)
            let v269 : unit = (fun () -> v268 (); v267) ()
            return struct (v247, v263) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v2404 : Async<struct (int32 * string)> = _let'_v25 
    let _run_target_args'_v11 = v2404 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2406 : unit = ()
    let _let'_v2406 =
        async {
            (* run_target_args'
            let v2417 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v2420 : int32, v2421 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2420, v2421) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v2428 : int32, v2429 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2428, v2429) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v2436 : int32, v2437 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2436, v2437) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v2444 : int32, v2445 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2444, v2445) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v2452 : int32, v2453 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2452, v2453) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v2460 : int32, v2461 : string) = null |> unbox<struct (int32 * string)>
            return struct (v2460, v2461) 
            #endif
#else
            let v2466 : US17 = method103(v0)
            let struct (v2478 : string, v2479 : US5) =
                match v2466 with
                | US17_1(v2469) -> (* Error *)
                    let v2471 : string = $"resultm.get / Result value was Error: {v2469}"
                    failwith<struct (string * US5)> v2471
                | US17_0(v2467, v2468) -> (* Ok *)
                    struct (v2467, v2468)
            let v2482 : (string -> US5) = method6()
            let v2483 : US5 option = v6 |> Option.map v2482 
            let v2503 : US5 = US5_1
            let v2504 : US5 = v2483 |> Option.defaultValue v2503 
            let v2511 : string =
                match v2504 with
                | US5_1 -> (* None *)
                    let v2509 : string = ""
                    v2509
                | US5_0(v2508) -> (* Some *)
                    v2508
            let v2512 : unit = ()
            let v2513 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v2479, v2478)
            let v2514 : unit = (fun () -> v2513 (); v2512) ()
            let v2561 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v2565 : string =
                match v2479 with
                | US5_1 -> (* None *)
                    let v2563 : string = ""
                    v2563
                | US5_0(v2562) -> (* Some *)
                    v2562
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v2565,
              StandardOutputEncoding = v2561,
              WorkingDirectory = v2511,
              FileName = v2478,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v2566 : System.Diagnostics.ProcessStartInfo = start_info
            let v2567 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v2568 : int32 = v2567.Length
            let v2569 : Mut5 = {l0 = 0} : Mut5
            while method32(v2568, v2569) do
                let v2571 : int32 = v2569.l0
                let struct (v2572 : string, v2573 : string) = v2567.[int v2571]
                v2566.EnvironmentVariables.[v2572] <- v2573 
                let v2574 : int32 = v2571 + 1
                v2569.l0 <- v2574
                ()
            let v2575 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v2566)
            use v2575 = v2575 
            let v2576 : System.Diagnostics.Process = v2575 
            let v2577 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v2578 : System.Collections.Concurrent.ConcurrentStack<string> = v2577 ()
            let v2579 : bool = false
            let v2580 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v2576, v2578, v2579)
            v2576.OutputDataReceived.Add v2580 
            let v2581 : bool = true
            let v2582 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v2576, v2578, v2581)
            v2576.ErrorDataReceived.Add v2582 
            let v2583 : (unit -> bool) = v2576.Start
            let v2584 : bool = v2583 ()
            let v2585 : bool = v2584 = false
            if v2585 then
                let v2586 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v2586
            let v2587 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v2587 v2576
            let v2588 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v2588 v2576
            let v2591 : (System.Threading.CancellationToken -> US35) = method166()
            let v2592 : US35 option = v1 |> Option.map v2591 
            let v2612 : US35 = US35_1
            let v2613 : US35 = v2592 |> Option.defaultValue v2612 
            let v2620 : System.Threading.CancellationToken =
                match v2613 with
                | US35_1 -> (* None *)
                    let v2618 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v2618
                | US35_0(v2617) -> (* Some *)
                    v2617
            let v2621 : Async<System.Threading.CancellationToken> = method167(v2620)
            let! v2621 = v2621 
            let v2622 : System.Threading.CancellationToken = v2621 
            let v2623 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v2622.Register
            let v2624 : (unit -> unit) = closure65(v2576)
            let v2625 : System.Threading.CancellationTokenRegistration = v2623 v2624
            use v2625 = v2625 
            let v2626 : System.Threading.CancellationTokenRegistration = v2625 
            let v2627 : Async<int32> = method170(v2576, v2578, v2622)
            let! v2627 = v2627 
            let v2628 : int32 = v2627 
            let v2630 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v2631 : string seq = v2630 v2578
            let v2635 : (string seq -> string seq) = Seq.rev
            let v2636 : string seq = v2635 v2631
            let v2641 : string = method75()
            let v2642 : (string -> (string seq -> string)) = String.concat
            let v2643 : (string seq -> string) = v2642 v2641
            let v2644 : string = v2643 v2636
            let v2648 : unit = ()
            let v2649 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v2628, v2644)
            let v2650 : unit = (fun () -> v2649 (); v2648) ()
            return struct (v2628, v2644) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v4785 : Async<struct (int32 * string)> = _let'_v2406 
    let _run_target_args'_v11 = v4785 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4787 : unit = ()
    let _let'_v4787 =
        async {
            (* run_target_args'
            let v4798 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v4801 : int32, v4802 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4801, v4802) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v4809 : int32, v4810 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4809, v4810) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v4817 : int32, v4818 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4817, v4818) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v4825 : int32, v4826 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4825, v4826) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v4833 : int32, v4834 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4833, v4834) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v4841 : int32, v4842 : string) = null |> unbox<struct (int32 * string)>
            return struct (v4841, v4842) 
            #endif
#else
            let v4847 : US17 = method103(v0)
            let struct (v4859 : string, v4860 : US5) =
                match v4847 with
                | US17_1(v4850) -> (* Error *)
                    let v4852 : string = $"resultm.get / Result value was Error: {v4850}"
                    failwith<struct (string * US5)> v4852
                | US17_0(v4848, v4849) -> (* Ok *)
                    struct (v4848, v4849)
            let v4863 : (string -> US5) = method6()
            let v4864 : US5 option = v6 |> Option.map v4863 
            let v4884 : US5 = US5_1
            let v4885 : US5 = v4864 |> Option.defaultValue v4884 
            let v4892 : string =
                match v4885 with
                | US5_1 -> (* None *)
                    let v4890 : string = ""
                    v4890
                | US5_0(v4889) -> (* Some *)
                    v4889
            let v4893 : unit = ()
            let v4894 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v4860, v4859)
            let v4895 : unit = (fun () -> v4894 (); v4893) ()
            let v4942 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v4946 : string =
                match v4860 with
                | US5_1 -> (* None *)
                    let v4944 : string = ""
                    v4944
                | US5_0(v4943) -> (* Some *)
                    v4943
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v4946,
              StandardOutputEncoding = v4942,
              WorkingDirectory = v4892,
              FileName = v4859,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v4947 : System.Diagnostics.ProcessStartInfo = start_info
            let v4948 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v4949 : int32 = v4948.Length
            let v4950 : Mut5 = {l0 = 0} : Mut5
            while method32(v4949, v4950) do
                let v4952 : int32 = v4950.l0
                let struct (v4953 : string, v4954 : string) = v4948.[int v4952]
                v4947.EnvironmentVariables.[v4953] <- v4954 
                let v4955 : int32 = v4952 + 1
                v4950.l0 <- v4955
                ()
            let v4956 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v4947)
            use v4956 = v4956 
            let v4957 : System.Diagnostics.Process = v4956 
            let v4958 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v4959 : System.Collections.Concurrent.ConcurrentStack<string> = v4958 ()
            let v4960 : bool = false
            let v4961 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v4957, v4959, v4960)
            v4957.OutputDataReceived.Add v4961 
            let v4962 : bool = true
            let v4963 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v4957, v4959, v4962)
            v4957.ErrorDataReceived.Add v4963 
            let v4964 : (unit -> bool) = v4957.Start
            let v4965 : bool = v4964 ()
            let v4966 : bool = v4965 = false
            if v4966 then
                let v4967 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v4967
            let v4968 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v4968 v4957
            let v4969 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v4969 v4957
            let v4972 : (System.Threading.CancellationToken -> US35) = method166()
            let v4973 : US35 option = v1 |> Option.map v4972 
            let v4993 : US35 = US35_1
            let v4994 : US35 = v4973 |> Option.defaultValue v4993 
            let v5001 : System.Threading.CancellationToken =
                match v4994 with
                | US35_1 -> (* None *)
                    let v4999 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v4999
                | US35_0(v4998) -> (* Some *)
                    v4998
            let v5002 : Async<System.Threading.CancellationToken> = method167(v5001)
            let! v5002 = v5002 
            let v5003 : System.Threading.CancellationToken = v5002 
            let v5004 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v5003.Register
            let v5005 : (unit -> unit) = closure65(v4957)
            let v5006 : System.Threading.CancellationTokenRegistration = v5004 v5005
            use v5006 = v5006 
            let v5007 : System.Threading.CancellationTokenRegistration = v5006 
            let v5008 : Async<int32> = method170(v4957, v4959, v5003)
            let! v5008 = v5008 
            let v5009 : int32 = v5008 
            let v5011 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v5012 : string seq = v5011 v4959
            let v5016 : (string seq -> string seq) = Seq.rev
            let v5017 : string seq = v5016 v5012
            let v5022 : string = method75()
            let v5023 : (string -> (string seq -> string)) = String.concat
            let v5024 : (string seq -> string) = v5023 v5022
            let v5025 : string = v5024 v5017
            let v5029 : unit = ()
            let v5030 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v5009, v5025)
            let v5031 : unit = (fun () -> v5030 (); v5029) ()
            return struct (v5009, v5025) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v7166 : Async<struct (int32 * string)> = _let'_v4787 
    let _run_target_args'_v11 = v7166 
    #endif
#else
    let v7168 : unit = ()
    let _let'_v7168 =
        async {
            (* run_target_args'
            let v7179 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let struct (v7182 : int32, v7183 : string) = null |> unbox<struct (int32 * string)>
            return struct (v7182, v7183) 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let struct (v7190 : int32, v7191 : string) = null |> unbox<struct (int32 * string)>
            return struct (v7190, v7191) 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let struct (v7198 : int32, v7199 : string) = null |> unbox<struct (int32 * string)>
            return struct (v7198, v7199) 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let struct (v7206 : int32, v7207 : string) = null |> unbox<struct (int32 * string)>
            return struct (v7206, v7207) 
            #endif
#if FABLE_COMPILER_PYTHON
            let struct (v7214 : int32, v7215 : string) = null |> unbox<struct (int32 * string)>
            return struct (v7214, v7215) 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let struct (v7222 : int32, v7223 : string) = null |> unbox<struct (int32 * string)>
            return struct (v7222, v7223) 
            #endif
#else
            let v7228 : US17 = method103(v0)
            let struct (v7240 : string, v7241 : US5) =
                match v7228 with
                | US17_1(v7231) -> (* Error *)
                    let v7233 : string = $"resultm.get / Result value was Error: {v7231}"
                    failwith<struct (string * US5)> v7233
                | US17_0(v7229, v7230) -> (* Ok *)
                    struct (v7229, v7230)
            let v7244 : (string -> US5) = method6()
            let v7245 : US5 option = v6 |> Option.map v7244 
            let v7265 : US5 = US5_1
            let v7266 : US5 = v7245 |> Option.defaultValue v7265 
            let v7273 : string =
                match v7266 with
                | US5_1 -> (* None *)
                    let v7271 : string = ""
                    v7271
                | US5_0(v7270) -> (* Some *)
                    v7270
            let v7274 : unit = ()
            let v7275 : (unit -> unit) = closure60(v0, v1, v2, v3, v4, v5, v6, v7241, v7240)
            let v7276 : unit = (fun () -> v7275 (); v7274) ()
            let v7323 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v7327 : string =
                match v7241 with
                | US5_1 -> (* None *)
                    let v7325 : string = ""
                    v7325
                | US5_0(v7324) -> (* Some *)
                    v7324
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v7327,
              StandardOutputEncoding = v7323,
              WorkingDirectory = v7273,
              FileName = v7240,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v7328 : System.Diagnostics.ProcessStartInfo = start_info
            let v7329 : (struct (string * string) []) = method160(v0, v1, v2, v3, v4, v5, v6)
            let v7330 : int32 = v7329.Length
            let v7331 : Mut5 = {l0 = 0} : Mut5
            while method32(v7330, v7331) do
                let v7333 : int32 = v7331.l0
                let struct (v7334 : string, v7335 : string) = v7329.[int v7333]
                v7328.EnvironmentVariables.[v7334] <- v7335 
                let v7336 : int32 = v7333 + 1
                v7331.l0 <- v7336
                ()
            let v7337 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v7328)
            use v7337 = v7337 
            let v7338 : System.Diagnostics.Process = v7337 
            let v7339 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v7340 : System.Collections.Concurrent.ConcurrentStack<string> = v7339 ()
            let v7341 : bool = false
            let v7342 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7338, v7340, v7341)
            v7338.OutputDataReceived.Add v7342 
            let v7343 : bool = true
            let v7344 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure61(v0, v1, v2, v3, v4, v5, v6, v7338, v7340, v7343)
            v7338.ErrorDataReceived.Add v7344 
            let v7345 : (unit -> bool) = v7338.Start
            let v7346 : bool = v7345 ()
            let v7347 : bool = v7346 = false
            if v7347 then
                let v7348 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v7348
            let v7349 : (System.Diagnostics.Process -> unit) = _.BeginErrorReadLine()
            v7349 v7338
            let v7350 : (System.Diagnostics.Process -> unit) = _.BeginOutputReadLine()
            v7350 v7338
            let v7353 : (System.Threading.CancellationToken -> US35) = method166()
            let v7354 : US35 option = v1 |> Option.map v7353 
            let v7374 : US35 = US35_1
            let v7375 : US35 = v7354 |> Option.defaultValue v7374 
            let v7382 : System.Threading.CancellationToken =
                match v7375 with
                | US35_1 -> (* None *)
                    let v7380 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v7380
                | US35_0(v7379) -> (* Some *)
                    v7379
            let v7383 : Async<System.Threading.CancellationToken> = method167(v7382)
            let! v7383 = v7383 
            let v7384 : System.Threading.CancellationToken = v7383 
            let v7385 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v7384.Register
            let v7386 : (unit -> unit) = closure65(v7338)
            let v7387 : System.Threading.CancellationTokenRegistration = v7385 v7386
            use v7387 = v7387 
            let v7388 : System.Threading.CancellationTokenRegistration = v7387 
            let v7389 : Async<int32> = method170(v7338, v7340, v7384)
            let! v7389 = v7389 
            let v7390 : int32 = v7389 
            let v7392 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v7393 : string seq = v7392 v7340
            let v7397 : (string seq -> string seq) = Seq.rev
            let v7398 : string seq = v7397 v7393
            let v7403 : string = method75()
            let v7404 : (string -> (string seq -> string)) = String.concat
            let v7405 : (string seq -> string) = v7404 v7403
            let v7406 : string = v7405 v7398
            let v7410 : unit = ()
            let v7411 : (unit -> unit) = closure67(v0, v1, v2, v3, v4, v5, v6, v7390, v7406)
            let v7412 : unit = (fun () -> v7411 (); v7410) ()
            return struct (v7390, v7406) 
            #endif
            // run_target_args' is_unit
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v9547 : Async<struct (int32 * string)> = _let'_v7168 
    let _run_target_args'_v11 = v9547 
    #endif
    let v9548 : Async<struct (int32 * string)> = _run_target_args'_v11 
    v9548
and method156 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    method157(v0, v1, v2, v3, v4, v5, v6)
and method101 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    (* run_target_args'
    let v15 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = method102(v0, v1, v2, v3, v4, v5, v6)
    let v17 : US17 = method103(v16)
    let struct (v29 : string, v30 : US5) =
        match v17 with
        | US17_1(v20) -> (* Error *)
            let v22 : string = $"resultm.get / Result value was Error: {v20}"
            failwith<struct (string * US5)> v22
        | US17_0(v18, v19) -> (* Ok *)
            struct (v18, v19)
    let v34 : string =
        match v30 with
        | US5_1 -> (* None *)
            let v32 : string = ""
            v32
        | US5_0(v31) -> (* Some *)
            v31
    let v35 : US25 = method116(v34)
    let v44 : (string []) =
        match v35 with
        | US25_1(v37) -> (* Error *)
            let v39 : string = $"resultm.get / Result value was Error: {v37}"
            failwith<(string [])> v39
        | US25_0(v36) -> (* Ok *)
            v36
    let v45 : string = "$0.to_vec()"
    let v46 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "x"
    let v50 : string = Fable.Core.RustInterop.emitRustExpr () v49 
    (* run_target_args'
    let v55 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _run_target_args'_v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _run_target_args'_v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _run_target_args'_v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v71 
    #endif
#else
    let v75 : Ref<Str> = v50 |> unbox<Ref<Str>>
    let _run_target_args'_v55 = v75 
    #endif
    let v78 : Ref<Str> = _run_target_args'_v55 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v104 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
#else
    let v108 : std_string_String = v78 |> unbox<std_string_String>
    let _run_target_args'_v88 = v108 
    #endif
    let v111 : std_string_String = _run_target_args'_v88 
    let v117 : string = "true; $0 }).collect::<Vec<_>>()"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let v119 : string = "_vec_map"
    let v120 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure40(v0, v1, v2, v3, v4, v5, v6, v29, v120)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v175 : bool = true
    let mutable _capture_v175 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v176 : string = "std::process::Command::new(&*$0)"
    let v177 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v29 v176 
    let v178 : string = "true; let mut v177 = v177"
    let v179 : bool = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : string = "true; std::process::Command::args(&mut v177, &*$0)"
    let v181 : bool = Fable.Core.RustInterop.emitRustExpr v120 v180 
    let v182 : string = "$0"
    let v183 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v177 v182 
    let v184 : string = "std::process::Stdio::piped()"
    let v185 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : string = "true; let mut v183 = v183"
    let v187 : bool = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "true; std::process::Command::stdout(&mut v183, std::process::Stdio::piped())"
    let v189 : bool = Fable.Core.RustInterop.emitRustExpr () v188 
    let v190 : string = "$0"
    let v191 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v183 v190 
    let v192 : string = "std::process::Stdio::piped()"
    let v193 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v192 
    let v194 : string = "true; let mut v191 = v191"
    let v195 : bool = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "true; std::process::Command::stderr(&mut v191, std::process::Stdio::piped())"
    let v197 : bool = Fable.Core.RustInterop.emitRustExpr () v196 
    let v198 : string = "$0"
    let v199 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v191 v198 
    let v200 : string = "std::process::Stdio::piped()"
    let v201 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v200 
    let v202 : string = "true; let mut v199 = v199"
    let v203 : bool = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : string = "true; std::process::Command::stdin(&mut v199, std::process::Stdio::piped())"
    let v205 : bool = Fable.Core.RustInterop.emitRustExpr () v204 
    let v206 : string = "$0"
    let v207 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v199 v206 
    let v210 : (string -> US5) = method6()
    let v211 : US5 option = v6 |> Option.map v210 
    let v231 : US5 = US5_1
    let v232 : US5 = v211 |> Option.defaultValue v231 
    let v246 : std_process_Command =
        match v232 with
        | US5_1 -> (* None *)
            let v243 : string = $"v207"
            let v244 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v243 
            v244
        | US5_0(v236) -> (* Some *)
            let v237 : string = "true; let mut v207 = v207"
            let v238 : bool = Fable.Core.RustInterop.emitRustExpr () v237 
            let v239 : string = "true; std::process::Command::current_dir(&mut v207, &*$0)"
            let v240 : bool = Fable.Core.RustInterop.emitRustExpr v236 v239 
            let v241 : string = $"v207"
            let v242 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v241 
            v242
    let v247 : uint64 = System.Convert.ToUInt64 v2.Length
    let v248 : bool = v247 = 0UL
    let v268 : std_process_Command =
        if v248 then
            v246
        else
            let v249 : string = "$0.to_vec()"
            let v250 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v249 
            let v251 : string = "true; let _vec_fold_ = $0.into_iter().fold(v246, |acc, x| { //"
            let v252 : bool = Fable.Core.RustInterop.emitRustExpr v250 v251 
            let v253 : string = "acc"
            let v254 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v253 
            let v255 : string = "x"
            let struct (v256 : string, v257 : string) = Fable.Core.RustInterop.emitRustExpr () v255 
            let v258 : string = "true; let mut v254 = v254"
            let v259 : bool = Fable.Core.RustInterop.emitRustExpr () v258 
            let v260 : string = "true; std::process::Command::env(&mut v254, &*$0, &*$1)"
            let v261 : bool = Fable.Core.RustInterop.emitRustExpr struct (v256, v257) v260 
            let v262 : string = "$0"
            let v263 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v254 v262 
            let v264 : string = "true; $0 })"
            let v265 : bool = Fable.Core.RustInterop.emitRustExpr v263 v264 
            let v266 : string = "_vec_fold_"
            let v267 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v266 
            v267
    let v269 : string = "true; let mut v268 = v268"
    let v270 : bool = Fable.Core.RustInterop.emitRustExpr () v269 
    let v271 : string = "std::process::Command::spawn(&mut v268)"
    let v272 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v275 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v276 : string = "$0.map_err(|x| $1(x))"
    let v277 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v272, v273) v276 
    let _run_target_args'_v275 = v277 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v278 : string = "$0.map_err(|x| $1(x))"
    let v279 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v272, v273) v278 
    let _run_target_args'_v275 = v279 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v280 : string = "$0.map_err(|x| $1(x))"
    let v281 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v272, v273) v280 
    let _run_target_args'_v275 = v281 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v282 : Result<std_process_Child, std_string_String> = match v272 with Ok x -> Ok x | Error x -> Error (v273 x)
    let _run_target_args'_v275 = v282 
    #endif
#if FABLE_COMPILER_PYTHON
    let v283 : Result<std_process_Child, std_string_String> = match v272 with Ok x -> Ok x | Error x -> Error (v273 x)
    let _run_target_args'_v275 = v283 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v284 : Result<std_process_Child, std_string_String> = match v272 with Ok x -> Ok x | Error x -> Error (v273 x)
    let _run_target_args'_v275 = v284 
    #endif
#else
    let v285 : Result<std_process_Child, std_string_String> = match v272 with Ok x -> Ok x | Error x -> Error (v273 x)
    let _run_target_args'_v275 = v285 
    #endif
    let v286 : Result<std_process_Child, std_string_String> = _run_target_args'_v275 
    let v289 : (std_process_Child option -> std_process_Child option) = method128()
    let v290 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v291 : bool = Fable.Core.RustInterop.emitRustExpr v286 v290 
    let v292 : string = "x"
    let v293 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v292 
    let v295 : std_process_Child option = Some v293 
    let v298 : std_process_Child option = v289 v295
    let v299 : string = "std::sync::Mutex::new(v298)"
    let v300 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v299 
    let v301 : string = "std::sync::Arc::new(v300)"
    let v302 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v301 
    let v303 : string = "true; $0 })"
    let v304 : bool = Fable.Core.RustInterop.emitRustExpr v302 v303 
    let v305 : string = "_result_map_"
    let v306 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v305 
    let v307 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US27) = method129()
    let v308 : (std_string_String -> US27) = method130()
    let v309 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v310 : US27 = Fable.Core.RustInterop.emitRustExpr struct (v307, v308, v306) v309 
    let struct (v1639 : int32, v1640 : US7, v1641 : US28) =
        match v310 with
        | US27_1(v1580) -> (* Error *)
            let v1581 : unit = ()
            let v1582 : (unit -> unit) = closure44(v0, v1, v2, v3, v4, v5, v6, v29, v120, v1580)
            let v1583 : unit = (fun () -> v1582 (); v1581) ()
            let v1634 : US7 = US7_0(v1580)
            let v1635 : US28 = US28_1
            struct (-1, v1634, v1635)
        | US27_0(v311) -> (* Ok *)
            let v312 : string = "true; let _capture = (|| { //"
            let v313 : bool = Fable.Core.RustInterop.emitRustExpr () v312 
            let v314 : string = "$0"
            let v315 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v311 v314 
            let v316 : string = "v315.lock()"
            let v317 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v316 
            (* run_target_args'
            let v319 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v320 : string = "$0.unwrap()"
            let v321 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v317 v320 
            let _run_target_args'_v319 = v321 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v322 : string = "$0.unwrap()"
            let v323 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v317 v322 
            let _run_target_args'_v319 = v323 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v324 : string = "$0.unwrap()"
            let v325 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v317 v324 
            let _run_target_args'_v319 = v325 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v326 : std_sync_MutexGuard<std_process_Child option> = match v317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v319 = v326 
            #endif
#if FABLE_COMPILER_PYTHON
            let v327 : std_sync_MutexGuard<std_process_Child option> = match v317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v319 = v327 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v328 : std_sync_MutexGuard<std_process_Child option> = match v317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v319 = v328 
            #endif
#else
            let v329 : std_sync_MutexGuard<std_process_Child option> = match v317 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v319 = v329 
            #endif
            let v330 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v319 
            let v333 : std_sync_MutexGuard<std_process_Child option> = method133(v330)
            let v334 : string = "true; let mut v333 = v333"
            let v335 : bool = Fable.Core.RustInterop.emitRustExpr () v334 
            let v336 : string = "&mut $0"
            let v337 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v333 v336 
            let v338 : string = "$0.as_mut()"
            let v339 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v337 v338 
            let v340 : string = "$0.unwrap()"
            let v341 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v339 v340 
            let v342 : string = "&mut $0.stdout"
            let v343 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v341 v342 
            let v344 : string = "Option::take($0)"
            let v345 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v343 v344 
            let v346 : string = "$0.unwrap()"
            let v347 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v345 v346 
            let v348 : string = "true; $0 })()"
            let v349 : bool = Fable.Core.RustInterop.emitRustExpr v347 v348 
            let v350 : string = "_capture"
            let v351 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v350 
            let v352 : string = "true; let _capture = (|| { //"
            let v353 : bool = Fable.Core.RustInterop.emitRustExpr () v352 
            let v354 : string = "$0"
            let v355 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v311 v354 
            let v356 : string = "v355.lock()"
            let v357 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v356 
            (* run_target_args'
            let v359 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v360 : string = "$0.unwrap()"
            let v361 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v357 v360 
            let _run_target_args'_v359 = v361 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v362 : string = "$0.unwrap()"
            let v363 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v357 v362 
            let _run_target_args'_v359 = v363 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v364 : string = "$0.unwrap()"
            let v365 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v357 v364 
            let _run_target_args'_v359 = v365 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v366 : std_sync_MutexGuard<std_process_Child option> = match v357 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v359 = v366 
            #endif
#if FABLE_COMPILER_PYTHON
            let v367 : std_sync_MutexGuard<std_process_Child option> = match v357 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v359 = v367 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v368 : std_sync_MutexGuard<std_process_Child option> = match v357 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v359 = v368 
            #endif
#else
            let v369 : std_sync_MutexGuard<std_process_Child option> = match v357 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v359 = v369 
            #endif
            let v370 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v359 
            let v373 : std_sync_MutexGuard<std_process_Child option> = method133(v370)
            let v374 : string = "true; let mut v373 = v373"
            let v375 : bool = Fable.Core.RustInterop.emitRustExpr () v374 
            let v376 : string = "&mut $0"
            let v377 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v373 v376 
            let v378 : string = "$0.as_mut()"
            let v379 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v377 v378 
            let v380 : string = "$0.unwrap()"
            let v381 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v379 v380 
            let v382 : string = "&mut $0.stderr"
            let v383 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v381 v382 
            let v384 : string = "Option::take($0)"
            let v385 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v383 v384 
            let v386 : string = "$0.unwrap()"
            let v387 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v385 v386 
            let v388 : string = "true; $0 })()"
            let v389 : bool = Fable.Core.RustInterop.emitRustExpr v387 v388 
            let v390 : string = "_capture"
            let v391 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v390 
            let v392 : string = "true; let _capture = (|| { //"
            let v393 : bool = Fable.Core.RustInterop.emitRustExpr () v392 
            let v394 : string = "$0"
            let v395 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v311 v394 
            let v396 : string = "v395.lock()"
            let v397 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v396 
            (* run_target_args'
            let v399 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v400 : string = "$0.unwrap()"
            let v401 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v397 v400 
            let _run_target_args'_v399 = v401 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v402 : string = "$0.unwrap()"
            let v403 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v397 v402 
            let _run_target_args'_v399 = v403 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v404 : string = "$0.unwrap()"
            let v405 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v397 v404 
            let _run_target_args'_v399 = v405 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v406 : std_sync_MutexGuard<std_process_Child option> = match v397 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v399 = v406 
            #endif
#if FABLE_COMPILER_PYTHON
            let v407 : std_sync_MutexGuard<std_process_Child option> = match v397 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v399 = v407 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v408 : std_sync_MutexGuard<std_process_Child option> = match v397 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v399 = v408 
            #endif
#else
            let v409 : std_sync_MutexGuard<std_process_Child option> = match v397 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v399 = v409 
            #endif
            let v410 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v399 
            let v413 : std_sync_MutexGuard<std_process_Child option> = method133(v410)
            let v414 : string = "true; let mut v413 = v413"
            let v415 : bool = Fable.Core.RustInterop.emitRustExpr () v414 
            let v416 : string = "&mut $0"
            let v417 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v413 v416 
            let v418 : string = "$0.as_mut()"
            let v419 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v417 v418 
            let v420 : string = "$0.unwrap()"
            let v421 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v419 v420 
            let v422 : string = "&mut $0.stdin"
            let v423 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v421 v422 
            let v424 : string = "Option::take($0)"
            let v425 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v423 v424 
            let v426 : string = "$0.unwrap()"
            let v427 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v425 v426 
            let v429 : std_process_ChildStdin option = Some v427 
            let v432 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method134()
            let v433 : std_process_ChildStdin option = v432 v429
            let v434 : string = "std::sync::Mutex::new(v433)"
            let v435 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v434 
            let v436 : string = "std::sync::Arc::new(v435)"
            let v437 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v436 
            let v438 : string = "true; $0 })()"
            let v439 : bool = Fable.Core.RustInterop.emitRustExpr v437 v438 
            let v440 : string = "_capture"
            let v441 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v440 
            let v442 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v443 : std_sync_mpsc_Sender<std_string_String>, v444 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v442 
            let v445 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method135()
            let v446 : std_sync_mpsc_Sender<std_string_String> = v445 v443
            let v447 : string = "std::sync::Mutex::new(v446)"
            let v448 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v447 
            let v449 : string = "std::sync::Arc::new(v448)"
            let v450 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v449 
            let v451 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method136()
            let v452 : std_sync_mpsc_Sender<std_string_String> = v451 v443
            let v453 : string = "std::sync::Mutex::new(v452)"
            let v454 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v453 
            let v455 : string = "std::sync::Arc::new(v454)"
            let v456 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v455 
            let v457 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method137()
            let v458 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v457 v444
            let v459 : string = "std::sync::Mutex::new(v458)"
            let v460 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v459 
            let v461 : string = "std::sync::Arc::new(v460)"
            let v462 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v461 
            let v463 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v464 : bool = Fable.Core.RustInterop.emitRustExpr () v463 
            let v465 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v466 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v351 v465 
            let v467 : string = "std::io::BufReader::new($0)"
            let v468 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v466 v467 
            let v469 : string = "std::io::BufRead::lines(v468)"
            let v470 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v469 
            let v471 : string = "true; let mut v470 = v470; let _iter_try_for_each = v470.try_for_each(|x| { //"
            let v472 : bool = Fable.Core.RustInterop.emitRustExpr () v471 
            let v473 : string = "x"
            let v474 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v473 
            let v475 : string = "$0.clone()"
            let v476 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v450 v475 
            let v477 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v479 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v480 : string = "$0.map_err(|x| $1(x))"
            let v481 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v474, v477) v480 
            let _run_target_args'_v479 = v481 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v482 : string = "$0.map_err(|x| $1(x))"
            let v483 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v474, v477) v482 
            let _run_target_args'_v479 = v483 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v484 : string = "$0.map_err(|x| $1(x))"
            let v485 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v474, v477) v484 
            let _run_target_args'_v479 = v485 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v486 : Result<std_string_String, std_string_String> = match v474 with Ok x -> Ok x | Error x -> Error (v477 x)
            let _run_target_args'_v479 = v486 
            #endif
#if FABLE_COMPILER_PYTHON
            let v487 : Result<std_string_String, std_string_String> = match v474 with Ok x -> Ok x | Error x -> Error (v477 x)
            let _run_target_args'_v479 = v487 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v488 : Result<std_string_String, std_string_String> = match v474 with Ok x -> Ok x | Error x -> Error (v477 x)
            let _run_target_args'_v479 = v488 
            #endif
#else
            let v489 : Result<std_string_String, std_string_String> = match v474 with Ok x -> Ok x | Error x -> Error (v477 x)
            let _run_target_args'_v479 = v489 
            #endif
            let v490 : Result<std_string_String, std_string_String> = _run_target_args'_v479 
            let v493 : (std_string_String -> US29) = method138()
            let v494 : (std_string_String -> US29) = method139()
            let v495 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v496 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v493, v494, v490) v495 
            let v733 : std_string_String =
                match v496 with
                | US29_1(v615) -> (* Error *)
                    let v616 : unit = ()
                    let v617 : (unit -> unit) = closure50(v5, v615)
                    let v618 : unit = (fun () -> v617 (); v616) ()
                    let v665 : string = $"\u001b[4;7m{v615}\u001b[0m"
                    (* run_target_args'
                    let v670 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v671 : string = "&*$0"
                    let v672 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v665 v671 
                    let _run_target_args'_v670 = v672 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v673 : string = "&*$0"
                    let v674 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v665 v673 
                    let _run_target_args'_v670 = v674 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v675 : string = "&*$0"
                    let v676 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v665 v675 
                    let _run_target_args'_v670 = v676 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v678 : Ref<Str> = v665 |> unbox<Ref<Str>>
                    let _run_target_args'_v670 = v678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v682 : Ref<Str> = v665 |> unbox<Ref<Str>>
                    let _run_target_args'_v670 = v682 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v686 : Ref<Str> = v665 |> unbox<Ref<Str>>
                    let _run_target_args'_v670 = v686 
                    #endif
#else
                    let v690 : Ref<Str> = v665 |> unbox<Ref<Str>>
                    let _run_target_args'_v670 = v690 
                    #endif
                    let v693 : Ref<Str> = _run_target_args'_v670 
                    (* run_target_args'
                    let v703 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v704 : string = "String::from($0)"
                    let v705 : std_string_String = Fable.Core.RustInterop.emitRustExpr v693 v704 
                    let _run_target_args'_v703 = v705 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v706 : string = "String::from($0)"
                    let v707 : std_string_String = Fable.Core.RustInterop.emitRustExpr v693 v706 
                    let _run_target_args'_v703 = v707 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v708 : string = "String::from($0)"
                    let v709 : std_string_String = Fable.Core.RustInterop.emitRustExpr v693 v708 
                    let _run_target_args'_v703 = v709 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v711 : std_string_String = v693 |> unbox<std_string_String>
                    let _run_target_args'_v703 = v711 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v715 : std_string_String = v693 |> unbox<std_string_String>
                    let _run_target_args'_v703 = v715 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v719 : std_string_String = v693 |> unbox<std_string_String>
                    let _run_target_args'_v703 = v719 
                    #endif
#else
                    let v723 : std_string_String = v693 |> unbox<std_string_String>
                    let _run_target_args'_v703 = v723 
                    #endif
                    let v726 : std_string_String = _run_target_args'_v703 
                    v726
                | US29_0(v497) -> (* Ok *)
                    let v498 : string = "fable_library_rust::String_::fromString($0)"
                    let v499 : string = Fable.Core.RustInterop.emitRustExpr v497 v498 
                    let v500 : string = "encoding_rs::UTF_8"
                    let v501 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v500 
                    let v502 : string = "$0.encode(&*$1).0"
                    let v503 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v501, v499) v502 
                    let v504 : string = "$0.as_ref()"
                    let v505 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v503 v504 
                    let v506 : string = "std::str::from_utf8($0)"
                    let v507 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v505 v506 
                    (* run_target_args'
                    let v509 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v510 : string = "$0.unwrap()"
                    let v511 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v507 v510 
                    let _run_target_args'_v509 = v511 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v512 : string = "$0.unwrap()"
                    let v513 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v507 v512 
                    let _run_target_args'_v509 = v513 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v514 : string = "$0.unwrap()"
                    let v515 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v507 v514 
                    let _run_target_args'_v509 = v515 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v516 : Ref<Str> = match v507 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v509 = v516 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v517 : Ref<Str> = match v507 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v509 = v517 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v518 : Ref<Str> = match v507 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v509 = v518 
                    #endif
#else
                    let v519 : Ref<Str> = match v507 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v509 = v519 
                    #endif
                    let v520 : Ref<Str> = _run_target_args'_v509 
                    (* run_target_args'
                    let v527 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v528 : string = "String::from($0)"
                    let v529 : std_string_String = Fable.Core.RustInterop.emitRustExpr v520 v528 
                    let _run_target_args'_v527 = v529 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v530 : string = "String::from($0)"
                    let v531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v520 v530 
                    let _run_target_args'_v527 = v531 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v532 : string = "String::from($0)"
                    let v533 : std_string_String = Fable.Core.RustInterop.emitRustExpr v520 v532 
                    let _run_target_args'_v527 = v533 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v535 : std_string_String = v520 |> unbox<std_string_String>
                    let _run_target_args'_v527 = v535 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v539 : std_string_String = v520 |> unbox<std_string_String>
                    let _run_target_args'_v527 = v539 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v543 : std_string_String = v520 |> unbox<std_string_String>
                    let _run_target_args'_v527 = v543 
                    #endif
#else
                    let v547 : std_string_String = v520 |> unbox<std_string_String>
                    let _run_target_args'_v527 = v547 
                    #endif
                    let v550 : std_string_String = _run_target_args'_v527 
                    let v556 : string = "fable_library_rust::String_::fromString($0)"
                    let v557 : string = Fable.Core.RustInterop.emitRustExpr v550 v556 
                    let v558 : string = $"> {v557}"
                    if v5 then
                        let v559 : unit = ()
                        let v560 : (unit -> unit) = closure51(v558)
                        let v561 : unit = (fun () -> v560 (); v559) ()
                        ()
                    else
                        let v611 : unit = ()
                        let v612 : (unit -> unit) = closure10(v558)
                        let v613 : unit = (fun () -> v612 (); v611) ()
                        ()
                    v550
            let v734 : string = "$0"
            let v735 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v476 v734 
            let v736 : string = "v735.lock()"
            let v737 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v736 
            (* run_target_args'
            let v739 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v740 : string = "$0.unwrap()"
            let v741 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v737 v740 
            let _run_target_args'_v739 = v741 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v742 : string = "$0.unwrap()"
            let v743 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v737 v742 
            let _run_target_args'_v739 = v743 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v744 : string = "$0.unwrap()"
            let v745 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v737 v744 
            let _run_target_args'_v739 = v745 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v746 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v739 = v746 
            #endif
#if FABLE_COMPILER_PYTHON
            let v747 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v739 = v747 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v748 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v739 = v748 
            #endif
#else
            let v749 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v739 = v749 
            #endif
            let v750 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v739 
            let v753 : string = "&$0"
            let v754 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v750 v753 
            let v755 : string = "$0.send($1)"
            let v756 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v754, v733) v755 
            let v757 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method144()
            (* run_target_args'
            let v759 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v760 : string = "$0.map_err(|x| $1(x))"
            let v761 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v756, v757) v760 
            let _run_target_args'_v759 = v761 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v762 : string = "$0.map_err(|x| $1(x))"
            let v763 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v756, v757) v762 
            let _run_target_args'_v759 = v763 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v764 : string = "$0.map_err(|x| $1(x))"
            let v765 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v756, v757) v764 
            let _run_target_args'_v759 = v765 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v766 : Result<unit, std_string_String> = match v756 with Ok x -> Ok x | Error x -> Error (v757 x)
            let _run_target_args'_v759 = v766 
            #endif
#if FABLE_COMPILER_PYTHON
            let v767 : Result<unit, std_string_String> = match v756 with Ok x -> Ok x | Error x -> Error (v757 x)
            let _run_target_args'_v759 = v767 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v768 : Result<unit, std_string_String> = match v756 with Ok x -> Ok x | Error x -> Error (v757 x)
            let _run_target_args'_v759 = v768 
            #endif
#else
            let v769 : Result<unit, std_string_String> = match v756 with Ok x -> Ok x | Error x -> Error (v757 x)
            let _run_target_args'_v759 = v769 
            #endif
            let v770 : Result<unit, std_string_String> = _run_target_args'_v759 
            let v773 : string = "$0"
            let v774 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v770 v773 
            let v775 : string = "true; $0 }); //"
            let v776 : bool = Fable.Core.RustInterop.emitRustExpr v774 v775 
            let v777 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v778 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v777 
            let v779 : Result<unit, string> = method145(v778)
            let v780 : string = ""
            let v781 : string = "}"
            let v782 : string = v780 + v781 
            let x = v779 //
            let v783 : _ = x
            let v784 : unit = ()
            (* run_target_args'
            let v785 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v786 : string = $"true; let _fix_closure_v784 = $0"
            let v787 : bool = Fable.Core.RustInterop.emitRustExpr v783 v786 
            let _run_target_args'_v785 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v788 : string = $"true; let _fix_closure_v784 = $0"
            let v789 : bool = Fable.Core.RustInterop.emitRustExpr v783 v788 
            let _run_target_args'_v785 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v790 : string = $"true; let _fix_closure_v784 = $0"
            let v791 : bool = Fable.Core.RustInterop.emitRustExpr v783 v790 
            let _run_target_args'_v785 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v785 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v785 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v785 = false 
            #endif
#else
            let _run_target_args'_v785 = false 
            #endif
            let v792 : bool = _run_target_args'_v785 
            let v794 : string = $"true; _fix_closure_v784 " + v782 + "); " + v780 + " // rust.fix_closure'"
            let v795 : bool = Fable.Core.RustInterop.emitRustExpr () v794 
            let v796 : string = "__spawn"
            let v797 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v796 
            let v798 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v799 : bool = Fable.Core.RustInterop.emitRustExpr () v798 
            let v800 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v801 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v391 v800 
            let v802 : string = "std::io::BufReader::new($0)"
            let v803 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v801 v802 
            let v804 : string = "std::io::BufRead::lines(v803)"
            let v805 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v804 
            let v806 : string = "true; let mut v805 = v805; let _iter_try_for_each = v805.try_for_each(|x| { //"
            let v807 : bool = Fable.Core.RustInterop.emitRustExpr () v806 
            let v808 : string = "x"
            let v809 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v808 
            let v810 : string = "$0.clone()"
            let v811 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v456 v810 
            let v812 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v814 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v815 : string = "$0.map_err(|x| $1(x))"
            let v816 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v809, v812) v815 
            let _run_target_args'_v814 = v816 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v817 : string = "$0.map_err(|x| $1(x))"
            let v818 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v809, v812) v817 
            let _run_target_args'_v814 = v818 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v819 : string = "$0.map_err(|x| $1(x))"
            let v820 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v809, v812) v819 
            let _run_target_args'_v814 = v820 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v821 : Result<std_string_String, std_string_String> = match v809 with Ok x -> Ok x | Error x -> Error (v812 x)
            let _run_target_args'_v814 = v821 
            #endif
#if FABLE_COMPILER_PYTHON
            let v822 : Result<std_string_String, std_string_String> = match v809 with Ok x -> Ok x | Error x -> Error (v812 x)
            let _run_target_args'_v814 = v822 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v823 : Result<std_string_String, std_string_String> = match v809 with Ok x -> Ok x | Error x -> Error (v812 x)
            let _run_target_args'_v814 = v823 
            #endif
#else
            let v824 : Result<std_string_String, std_string_String> = match v809 with Ok x -> Ok x | Error x -> Error (v812 x)
            let _run_target_args'_v814 = v824 
            #endif
            let v825 : Result<std_string_String, std_string_String> = _run_target_args'_v814 
            let v828 : (std_string_String -> US29) = method138()
            let v829 : (std_string_String -> US29) = method139()
            let v830 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v831 : US29 = Fable.Core.RustInterop.emitRustExpr struct (v828, v829, v825) v830 
            let v1134 : std_string_String =
                match v831 with
                | US29_1(v1016) -> (* Error *)
                    let v1017 : unit = ()
                    let v1018 : (unit -> unit) = closure50(v5, v1016)
                    let v1019 : unit = (fun () -> v1018 (); v1017) ()
                    let v1066 : string = $"\u001b[4;7m{v1016}\u001b[0m"
                    (* run_target_args'
                    let v1071 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1072 : string = "&*$0"
                    let v1073 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1066 v1072 
                    let _run_target_args'_v1071 = v1073 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1074 : string = "&*$0"
                    let v1075 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1066 v1074 
                    let _run_target_args'_v1071 = v1075 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1076 : string = "&*$0"
                    let v1077 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1066 v1076 
                    let _run_target_args'_v1071 = v1077 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1079 : Ref<Str> = v1066 |> unbox<Ref<Str>>
                    let _run_target_args'_v1071 = v1079 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1083 : Ref<Str> = v1066 |> unbox<Ref<Str>>
                    let _run_target_args'_v1071 = v1083 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1087 : Ref<Str> = v1066 |> unbox<Ref<Str>>
                    let _run_target_args'_v1071 = v1087 
                    #endif
#else
                    let v1091 : Ref<Str> = v1066 |> unbox<Ref<Str>>
                    let _run_target_args'_v1071 = v1091 
                    #endif
                    let v1094 : Ref<Str> = _run_target_args'_v1071 
                    (* run_target_args'
                    let v1104 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1105 : string = "String::from($0)"
                    let v1106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1094 v1105 
                    let _run_target_args'_v1104 = v1106 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1107 : string = "String::from($0)"
                    let v1108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1094 v1107 
                    let _run_target_args'_v1104 = v1108 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1109 : string = "String::from($0)"
                    let v1110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1094 v1109 
                    let _run_target_args'_v1104 = v1110 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1112 : std_string_String = v1094 |> unbox<std_string_String>
                    let _run_target_args'_v1104 = v1112 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1116 : std_string_String = v1094 |> unbox<std_string_String>
                    let _run_target_args'_v1104 = v1116 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1120 : std_string_String = v1094 |> unbox<std_string_String>
                    let _run_target_args'_v1104 = v1120 
                    #endif
#else
                    let v1124 : std_string_String = v1094 |> unbox<std_string_String>
                    let _run_target_args'_v1104 = v1124 
                    #endif
                    let v1127 : std_string_String = _run_target_args'_v1104 
                    v1127
                | US29_0(v832) -> (* Ok *)
                    let v833 : string = "fable_library_rust::String_::fromString($0)"
                    let v834 : string = Fable.Core.RustInterop.emitRustExpr v832 v833 
                    let v835 : string = "encoding_rs::UTF_8"
                    let v836 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v835 
                    let v837 : string = "$0.encode(&*$1).0"
                    let v838 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v836, v834) v837 
                    let v839 : string = "$0.as_ref()"
                    let v840 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v838 v839 
                    let v841 : string = "std::str::from_utf8($0)"
                    let v842 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v840 v841 
                    (* run_target_args'
                    let v844 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v845 : string = "$0.unwrap()"
                    let v846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v842 v845 
                    let _run_target_args'_v844 = v846 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v847 : string = "$0.unwrap()"
                    let v848 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v842 v847 
                    let _run_target_args'_v844 = v848 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v849 : string = "$0.unwrap()"
                    let v850 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v842 v849 
                    let _run_target_args'_v844 = v850 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v851 : Ref<Str> = match v842 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v844 = v851 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v852 : Ref<Str> = match v842 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v844 = v852 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v853 : Ref<Str> = match v842 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v844 = v853 
                    #endif
#else
                    let v854 : Ref<Str> = match v842 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v844 = v854 
                    #endif
                    let v855 : Ref<Str> = _run_target_args'_v844 
                    (* run_target_args'
                    let v862 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v863 : string = "String::from($0)"
                    let v864 : std_string_String = Fable.Core.RustInterop.emitRustExpr v855 v863 
                    let _run_target_args'_v862 = v864 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v865 : string = "String::from($0)"
                    let v866 : std_string_String = Fable.Core.RustInterop.emitRustExpr v855 v865 
                    let _run_target_args'_v862 = v866 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v867 : string = "String::from($0)"
                    let v868 : std_string_String = Fable.Core.RustInterop.emitRustExpr v855 v867 
                    let _run_target_args'_v862 = v868 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v870 : std_string_String = v855 |> unbox<std_string_String>
                    let _run_target_args'_v862 = v870 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v874 : std_string_String = v855 |> unbox<std_string_String>
                    let _run_target_args'_v862 = v874 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v878 : std_string_String = v855 |> unbox<std_string_String>
                    let _run_target_args'_v862 = v878 
                    #endif
#else
                    let v882 : std_string_String = v855 |> unbox<std_string_String>
                    let _run_target_args'_v862 = v882 
                    #endif
                    let v885 : std_string_String = _run_target_args'_v862 
                    let v891 : string = "fable_library_rust::String_::fromString($0)"
                    let v892 : string = Fable.Core.RustInterop.emitRustExpr v885 v891 
                    let v893 : string = $"! {v892}"
                    if v5 then
                        let v894 : unit = ()
                        let v895 : (unit -> unit) = closure51(v893)
                        let v896 : unit = (fun () -> v895 (); v894) ()
                        ()
                    else
                        let v945 : unit = ()
                        let v946 : (unit -> unit) = closure10(v893)
                        let v947 : unit = (fun () -> v946 (); v945) ()
                        ()
                    let v949 : string = $"\u001b[4;7m{v885}\u001b[0m"
                    (* run_target_args'
                    let v954 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v955 : string = "&*$0"
                    let v956 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v949 v955 
                    let _run_target_args'_v954 = v956 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v957 : string = "&*$0"
                    let v958 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v949 v957 
                    let _run_target_args'_v954 = v958 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v959 : string = "&*$0"
                    let v960 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v949 v959 
                    let _run_target_args'_v954 = v960 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v962 : Ref<Str> = v949 |> unbox<Ref<Str>>
                    let _run_target_args'_v954 = v962 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v966 : Ref<Str> = v949 |> unbox<Ref<Str>>
                    let _run_target_args'_v954 = v966 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v970 : Ref<Str> = v949 |> unbox<Ref<Str>>
                    let _run_target_args'_v954 = v970 
                    #endif
#else
                    let v974 : Ref<Str> = v949 |> unbox<Ref<Str>>
                    let _run_target_args'_v954 = v974 
                    #endif
                    let v977 : Ref<Str> = _run_target_args'_v954 
                    (* run_target_args'
                    let v987 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v988 : string = "String::from($0)"
                    let v989 : std_string_String = Fable.Core.RustInterop.emitRustExpr v977 v988 
                    let _run_target_args'_v987 = v989 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v990 : string = "String::from($0)"
                    let v991 : std_string_String = Fable.Core.RustInterop.emitRustExpr v977 v990 
                    let _run_target_args'_v987 = v991 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v992 : string = "String::from($0)"
                    let v993 : std_string_String = Fable.Core.RustInterop.emitRustExpr v977 v992 
                    let _run_target_args'_v987 = v993 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v995 : std_string_String = v977 |> unbox<std_string_String>
                    let _run_target_args'_v987 = v995 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v999 : std_string_String = v977 |> unbox<std_string_String>
                    let _run_target_args'_v987 = v999 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1003 : std_string_String = v977 |> unbox<std_string_String>
                    let _run_target_args'_v987 = v1003 
                    #endif
#else
                    let v1007 : std_string_String = v977 |> unbox<std_string_String>
                    let _run_target_args'_v987 = v1007 
                    #endif
                    let v1010 : std_string_String = _run_target_args'_v987 
                    v1010
            let v1135 : string = "$0"
            let v1136 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v811 v1135 
            let v1137 : string = "v1136.lock()"
            let v1138 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1137 
            (* run_target_args'
            let v1140 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1141 : string = "$0.unwrap()"
            let v1142 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1138 v1141 
            let _run_target_args'_v1140 = v1142 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1143 : string = "$0.unwrap()"
            let v1144 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1138 v1143 
            let _run_target_args'_v1140 = v1144 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1145 : string = "$0.unwrap()"
            let v1146 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1138 v1145 
            let _run_target_args'_v1140 = v1146 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1147 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1140 = v1147 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1148 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1140 = v1148 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1149 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1140 = v1149 
            #endif
#else
            let v1150 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v1138 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1140 = v1150 
            #endif
            let v1151 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _run_target_args'_v1140 
            let v1154 : string = "&$0"
            let v1155 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1151 v1154 
            let v1156 : string = "$0.send($1)"
            let v1157 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v1155, v1134) v1156 
            let v1158 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method144()
            (* run_target_args'
            let v1160 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1161 : string = "$0.map_err(|x| $1(x))"
            let v1162 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1157, v1158) v1161 
            let _run_target_args'_v1160 = v1162 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1163 : string = "$0.map_err(|x| $1(x))"
            let v1164 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1157, v1158) v1163 
            let _run_target_args'_v1160 = v1164 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1165 : string = "$0.map_err(|x| $1(x))"
            let v1166 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1157, v1158) v1165 
            let _run_target_args'_v1160 = v1166 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1167 : Result<unit, std_string_String> = match v1157 with Ok x -> Ok x | Error x -> Error (v1158 x)
            let _run_target_args'_v1160 = v1167 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1168 : Result<unit, std_string_String> = match v1157 with Ok x -> Ok x | Error x -> Error (v1158 x)
            let _run_target_args'_v1160 = v1168 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1169 : Result<unit, std_string_String> = match v1157 with Ok x -> Ok x | Error x -> Error (v1158 x)
            let _run_target_args'_v1160 = v1169 
            #endif
#else
            let v1170 : Result<unit, std_string_String> = match v1157 with Ok x -> Ok x | Error x -> Error (v1158 x)
            let _run_target_args'_v1160 = v1170 
            #endif
            let v1171 : Result<unit, std_string_String> = _run_target_args'_v1160 
            let v1174 : string = "$0"
            let v1175 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1171 v1174 
            let v1176 : string = "true; $0 }); //"
            let v1177 : bool = Fable.Core.RustInterop.emitRustExpr v1175 v1176 
            let v1178 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1179 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1178 
            let v1180 : Result<unit, string> = method145(v1179)
            let v1181 : string = v780 + v781 
            let x = v1180 //
            let v1182 : _ = x
            let v1183 : unit = ()
            (* run_target_args'
            let v1184 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1185 : string = $"true; let _fix_closure_v1183 = $0"
            let v1186 : bool = Fable.Core.RustInterop.emitRustExpr v1182 v1185 
            let _run_target_args'_v1184 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1187 : string = $"true; let _fix_closure_v1183 = $0"
            let v1188 : bool = Fable.Core.RustInterop.emitRustExpr v1182 v1187 
            let _run_target_args'_v1184 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1189 : string = $"true; let _fix_closure_v1183 = $0"
            let v1190 : bool = Fable.Core.RustInterop.emitRustExpr v1182 v1189 
            let _run_target_args'_v1184 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1184 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1184 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1184 = false 
            #endif
#else
            let _run_target_args'_v1184 = false 
            #endif
            let v1191 : bool = _run_target_args'_v1184 
            let v1193 : string = $"true; _fix_closure_v1183 " + v1181 + "); " + v780 + " // rust.fix_closure'"
            let v1194 : bool = Fable.Core.RustInterop.emitRustExpr () v1193 
            let v1195 : string = "__spawn"
            let v1196 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1195 
            let v1199 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US30) = method146()
            let v1200 : US30 option = v4 |> Option.map v1199 
            let v1220 : US30 = US30_1
            let v1221 : US30 = v1200 |> Option.defaultValue v1220 
            match v1221 with
            | US30_1 -> (* None *)
                ()
            | US30_0(v1225) -> (* Some *)
                let v1226 : string = "$0"
                let v1227 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v441 v1226 
                let v1228 : string = "v1227.lock()"
                let v1229 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1228 
                (* run_target_args'
                let v1231 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1232 : string = "$0.unwrap()"
                let v1233 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1229 v1232 
                let _run_target_args'_v1231 = v1233 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1234 : string = "$0.unwrap()"
                let v1235 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1229 v1234 
                let _run_target_args'_v1231 = v1235 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1236 : string = "$0.unwrap()"
                let v1237 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1229 v1236 
                let _run_target_args'_v1231 = v1237 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1238 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1231 = v1238 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1239 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1231 = v1239 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1240 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1231 = v1240 
                #endif
#else
                let v1241 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1229 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1231 = v1241 
                #endif
                let v1242 : std_sync_MutexGuard<std_process_ChildStdin option> = _run_target_args'_v1231 
                let v1245 : std_sync_MutexGuard<std_process_ChildStdin option> = method147(v1242)
                let v1246 : string = "true; let mut v1245 = v1245"
                let v1247 : bool = Fable.Core.RustInterop.emitRustExpr () v1246 
                let v1248 : string = "&mut $0"
                let v1249 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1245 v1248 
                let v1250 : string = "Option::take($0)"
                let v1251 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1249 v1250 
                let v1252 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1253 : bool = Fable.Core.RustInterop.emitRustExpr v1251 v1252 
                let v1254 : string = "x"
                let v1255 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1254 
                let v1256 : string = "std::sync::Mutex::new(v1255)"
                let v1257 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1256 
                let v1258 : string = "std::sync::Arc::new(v1257)"
                let v1259 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1258 
                let v1260 : string = "true; $0 })"
                let v1261 : bool = Fable.Core.RustInterop.emitRustExpr v1259 v1260 
                let v1262 : string = "_optionm_map_"
                let v1263 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1262 
                let v1266 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US31) = method148()
                let v1267 : US31 option = v1263 |> Option.map v1266 
                let v1287 : US31 = US31_1
                let v1288 : US31 = v1267 |> Option.defaultValue v1287 
                match v1288 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1292) -> (* Some *)
                    v1225 v1292
                    let v1293 : string = "$0"
                    let v1294 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1292 v1293 
                    let v1295 : string = "v1294.lock()"
                    let v1296 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1295 
                    (* run_target_args'
                    let v1298 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1299 : string = "$0.unwrap()"
                    let v1300 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1296 v1299 
                    let _run_target_args'_v1298 = v1300 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1301 : string = "$0.unwrap()"
                    let v1302 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1296 v1301 
                    let _run_target_args'_v1298 = v1302 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1303 : string = "$0.unwrap()"
                    let v1304 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1296 v1303 
                    let _run_target_args'_v1298 = v1304 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1305 : std_sync_MutexGuard<std_process_ChildStdin> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1298 = v1305 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1306 : std_sync_MutexGuard<std_process_ChildStdin> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1298 = v1306 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1307 : std_sync_MutexGuard<std_process_ChildStdin> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1298 = v1307 
                    #endif
#else
                    let v1308 : std_sync_MutexGuard<std_process_ChildStdin> = match v1296 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1298 = v1308 
                    #endif
                    let v1309 : std_sync_MutexGuard<std_process_ChildStdin> = _run_target_args'_v1298 
                    let v1312 : std_sync_MutexGuard<std_process_ChildStdin> = method149(v1309)
                    let v1313 : string = "true; let mut v1312 = v1312"
                    let v1314 : bool = Fable.Core.RustInterop.emitRustExpr () v1313 
                    let v1315 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1316 : bool = Fable.Core.RustInterop.emitRustExpr v1312 v1315 
                    ()
            let v1317 : string = "$0"
            let v1318 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v311 v1317 
            let v1319 : string = "v1318.lock()"
            let v1320 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1319 
            (* run_target_args'
            let v1322 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1323 : string = "$0.unwrap()"
            let v1324 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1320 v1323 
            let _run_target_args'_v1322 = v1324 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1325 : string = "$0.unwrap()"
            let v1326 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1320 v1325 
            let _run_target_args'_v1322 = v1326 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1327 : string = "$0.unwrap()"
            let v1328 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1320 v1327 
            let _run_target_args'_v1322 = v1328 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1329 : std_sync_MutexGuard<std_process_Child option> = match v1320 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1322 = v1329 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1330 : std_sync_MutexGuard<std_process_Child option> = match v1320 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1322 = v1330 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1331 : std_sync_MutexGuard<std_process_Child option> = match v1320 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1322 = v1331 
            #endif
#else
            let v1332 : std_sync_MutexGuard<std_process_Child option> = match v1320 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1322 = v1332 
            #endif
            let v1333 : std_sync_MutexGuard<std_process_Child option> = _run_target_args'_v1322 
            let v1336 : std_sync_MutexGuard<std_process_Child option> = method133(v1333)
            let v1337 : string = "true; let mut v1336 = v1336"
            let v1338 : bool = Fable.Core.RustInterop.emitRustExpr () v1337 
            let v1339 : string = "&mut $0"
            let v1340 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1336 v1339 
            let v1341 : string = "Option::take($0)"
            let v1342 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1340 v1341 
            let v1343 : string = "$0.unwrap()"
            let v1344 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1342 v1343 
            let v1345 : string = "$0.wait_with_output()"
            let v1346 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1344 v1345 
            let v1347 : (std_io_Error -> std_string_String) = method79()
            (* run_target_args'
            let v1349 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1350 : string = "$0.map_err(|x| $1(x))"
            let v1351 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1346, v1347) v1350 
            let _run_target_args'_v1349 = v1351 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1352 : string = "$0.map_err(|x| $1(x))"
            let v1353 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1346, v1347) v1352 
            let _run_target_args'_v1349 = v1353 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1354 : string = "$0.map_err(|x| $1(x))"
            let v1355 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1346, v1347) v1354 
            let _run_target_args'_v1349 = v1355 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1356 : Result<std_process_Output, std_string_String> = match v1346 with Ok x -> Ok x | Error x -> Error (v1347 x)
            let _run_target_args'_v1349 = v1356 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1357 : Result<std_process_Output, std_string_String> = match v1346 with Ok x -> Ok x | Error x -> Error (v1347 x)
            let _run_target_args'_v1349 = v1357 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1358 : Result<std_process_Output, std_string_String> = match v1346 with Ok x -> Ok x | Error x -> Error (v1347 x)
            let _run_target_args'_v1349 = v1358 
            #endif
#else
            let v1359 : Result<std_process_Output, std_string_String> = match v1346 with Ok x -> Ok x | Error x -> Error (v1347 x)
            let _run_target_args'_v1349 = v1359 
            #endif
            let v1360 : Result<std_process_Output, std_string_String> = _run_target_args'_v1349 
            let v1363 : string = "v1196"
            let v1364 : string = v1363 + v780 
            let v1365 : string = v1364 + v780 
            let v1366 : string = "v797"
            let v1367 : string = ", "
            let v1368 : string = v1366 + v1367 
            let v1369 : string = v1368 + v1365 
            let v1370 : string = "vec![" + v1369 + "]"
            let v1371 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1370 
            let v1372 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1373 : bool = Fable.Core.RustInterop.emitRustExpr v1371 v1372 
            let v1374 : string = "x"
            let v1375 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1374 
            let v1376 : string = "std::thread::JoinHandle::join($0)"
            let v1377 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1375 v1376 
            (* run_target_args'
            let v1379 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1380 : string = "$0.unwrap()"
            let v1381 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1377 v1380 
            let _run_target_args'_v1379 = v1381 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1382 : string = "$0.unwrap()"
            let v1383 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1377 v1382 
            let _run_target_args'_v1379 = v1383 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1384 : string = "$0.unwrap()"
            let v1385 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1377 v1384 
            let _run_target_args'_v1379 = v1385 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1386 : Result<unit, string> = match v1377 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1379 = v1386 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1387 : Result<unit, string> = match v1377 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1379 = v1387 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1388 : Result<unit, string> = match v1377 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1379 = v1388 
            #endif
#else
            let v1389 : Result<unit, string> = match v1377 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v1379 = v1389 
            #endif
            let v1390 : Result<unit, string> = _run_target_args'_v1379 
            (* run_target_args'
            let v1393 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1394 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1390 v1394 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1395 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1390 v1395 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1396 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1390 v1396 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1390 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1390 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1390 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1390 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            let v1397 : string = $"true"
            let v1398 : bool = Fable.Core.RustInterop.emitRustExpr () v1397 
            let v1399 : string = "true; }}); { //"
            let v1400 : bool = Fable.Core.RustInterop.emitRustExpr () v1399 
            let v1401 : (std_process_Output -> US32) = method150()
            let v1402 : (std_string_String -> US32) = method151()
            let v1404 : US32 = match v1360 with Ok x -> v1401 x | Error x -> v1402 x
            match v1404 with
            | US32_1(v1518) -> (* Error *)
                let v1519 : unit = ()
                let v1520 : (unit -> unit) = closure57(v0, v1, v2, v3, v4, v5, v6, v29, v120, v1518)
                let v1521 : unit = (fun () -> v1520 (); v1519) ()
                let v1572 : US7 = US7_0(v1518)
                let v1573 : US28 = US28_1
                struct (-2, v1572, v1573)
            | US32_0(v1407) -> (* Ok *)
                let v1408 : string = "$0.status"
                let v1409 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1407 v1408 
                let v1410 : string = "$0.code()"
                let v1411 : int32 option = Fable.Core.RustInterop.emitRustExpr v1409 v1410 
                let v1414 : (int32 -> US33) = method153()
                let v1415 : US33 option = v1411 |> Option.map v1414 
                let v1435 : US33 = US33_1
                let v1436 : US33 = v1415 |> Option.defaultValue v1435 
                match v1436 with
                | US33_1 -> (* None *)
                    let v1443 : string = "runtime.execute_with_options / exit_code=None"
                    (* run_target_args'
                    let v1448 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1449 : string = "&*$0"
                    let v1450 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1443 v1449 
                    let _run_target_args'_v1448 = v1450 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1451 : string = "&*$0"
                    let v1452 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1443 v1451 
                    let _run_target_args'_v1448 = v1452 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1453 : string = "&*$0"
                    let v1454 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1443 v1453 
                    let _run_target_args'_v1448 = v1454 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1456 : Ref<Str> = v1443 |> unbox<Ref<Str>>
                    let _run_target_args'_v1448 = v1456 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1460 : Ref<Str> = v1443 |> unbox<Ref<Str>>
                    let _run_target_args'_v1448 = v1460 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1464 : Ref<Str> = v1443 |> unbox<Ref<Str>>
                    let _run_target_args'_v1448 = v1464 
                    #endif
#else
                    let v1468 : Ref<Str> = v1443 |> unbox<Ref<Str>>
                    let _run_target_args'_v1448 = v1468 
                    #endif
                    let v1471 : Ref<Str> = _run_target_args'_v1448 
                    (* run_target_args'
                    let v1481 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1482 : string = "String::from($0)"
                    let v1483 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1471 v1482 
                    let _run_target_args'_v1481 = v1483 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1484 : string = "String::from($0)"
                    let v1485 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1471 v1484 
                    let _run_target_args'_v1481 = v1485 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1486 : string = "String::from($0)"
                    let v1487 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1471 v1486 
                    let _run_target_args'_v1481 = v1487 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1489 : std_string_String = v1471 |> unbox<std_string_String>
                    let _run_target_args'_v1481 = v1489 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1493 : std_string_String = v1471 |> unbox<std_string_String>
                    let _run_target_args'_v1481 = v1493 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1497 : std_string_String = v1471 |> unbox<std_string_String>
                    let _run_target_args'_v1481 = v1497 
                    #endif
#else
                    let v1501 : std_string_String = v1471 |> unbox<std_string_String>
                    let _run_target_args'_v1481 = v1501 
                    #endif
                    let v1504 : std_string_String = _run_target_args'_v1481 
                    let v1510 : US7 = US7_0(v1504)
                    let v1511 : US28 = US28_0(v462)
                    struct (-1, v1510, v1511)
                | US33_0(v1440) -> (* Some *)
                    let v1441 : US7 = US7_1
                    let v1442 : US28 = US28_0(v462)
                    struct (v1440, v1441, v1442)
    let v1652 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1641 with
        | US28_1 -> (* None *)
            let v1648 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1648
        | US28_0(v1642) -> (* Some *)
            let v1644 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1642 
            v1644
    let v1653 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1654 : bool = Fable.Core.RustInterop.emitRustExpr v1652 v1653 
    let v1655 : string = "x"
    let v1656 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1655 
    let v1657 : string = "$0"
    let v1658 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1656 v1657 
    let v1659 : string = "v1658.lock()"
    let v1660 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1659 
    (* run_target_args'
    let v1662 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1663 : string = "$0.unwrap()"
    let v1664 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1660 v1663 
    let _run_target_args'_v1662 = v1664 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1665 : string = "$0.unwrap()"
    let v1666 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1660 v1665 
    let _run_target_args'_v1662 = v1666 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1667 : string = "$0.unwrap()"
    let v1668 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1660 v1667 
    let _run_target_args'_v1662 = v1668 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1669 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1660 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1662 = v1669 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1670 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1660 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1662 = v1670 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1671 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1660 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1662 = v1671 
    #endif
#else
    let v1672 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1660 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v1662 = v1672 
    #endif
    let v1673 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _run_target_args'_v1662 
    let v1676 : string = "$0.iter()"
    let v1677 : _ = Fable.Core.RustInterop.emitRustExpr v1673 v1676 
    let v1678 : string = "$0.collect::<Vec<_>>()"
    let v1679 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1677 v1678 
    let v1680 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1681 : bool = Fable.Core.RustInterop.emitRustExpr v1679 v1680 
    let v1682 : string = "x"
    let v1683 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1682 
    let v1684 : string = "fable_library_rust::String_::fromString($0)"
    let v1685 : string = Fable.Core.RustInterop.emitRustExpr v1683 v1684 
    let v1686 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1687 : bool = Fable.Core.RustInterop.emitRustExpr v1685 v1686 
    let v1688 : string = "_vec_map"
    let v1689 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1688 
    let v1690 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v1691 : (string []) = Fable.Core.RustInterop.emitRustExpr v1689 v1690 
    let v1693 : string seq = v1691 |> Seq.ofArray
    let v1698 : string = method75()
    let v1699 : (string -> (string seq -> string)) = String.concat
    let v1700 : (string seq -> string) = v1699 v1698
    let v1701 : string = v1700 v1693
    let v1705 : string = "true; $0 })"
    let v1706 : bool = Fable.Core.RustInterop.emitRustExpr v1701 v1705 
    let v1707 : string = "_optionm_map_"
    let v1708 : string option = Fable.Core.RustInterop.emitRustExpr () v1707 
    let v1715 : US5 =
        match v1640 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1709) -> (* Some *)
            let v1710 : string = "fable_library_rust::String_::fromString($0)"
            let v1711 : string = Fable.Core.RustInterop.emitRustExpr v1709 v1710 
            US5_0(v1711)
    let v1719 : string =
        match v1715 with
        | US5_1 -> (* None *)
            let v1717 : string = ""
            v1717
        | US5_0(v1716) -> (* Some *)
            v1716
    let v1721 : string = v1708 |> Option.defaultValue v1719 
    let v1724 : unit = ()
    let v1725 : (unit -> unit) = closure59(v1639, v1721)
    let v1726 : unit = (fun () -> v1725 (); v1724) ()
    let v1775 : (int32 * string) = v1639, v1721 
    v1775 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _capture_v175 <- Some x
    let v1778 : (int32 * string) = match _capture_v175 with Some x -> x | None -> failwith "base.capture / _capture_v175=None"
    let (a, b) = v1778 
    let v3382 : int32 = a
    let v3383 : string = b
    let _run_target_args'_v15 = struct (v3382, v3383) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3390 : int32, v3391 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3390, v3391) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3398 : int32, v3399 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3398, v3399) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3406 : int32, v3407 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3406, v3407) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v3414 : int32, v3415 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3414, v3415) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v3422 : int32, v3423 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v15 = struct (v3422, v3423) 
    #endif
#else
    let v3428 : Async<struct (int32 * string)> = method156(v0, v1, v2, v3, v4, v5, v6)
    (* run_target_args'
    let v3437 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v3440 : int32, v3441 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3437 = struct (v3440, v3441) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v3448 : int32, v3449 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3437 = struct (v3448, v3449) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v3456 : int32, v3457 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3437 = struct (v3456, v3457) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v3464 : int32, v3465 : string) = null |> unbox<struct (int32 * string)>
    let _run_target_args'_v3437 = struct (v3464, v3465) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3470 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3471 : int32, v3472 : string) = v3470 v3428
    let _run_target_args'_v3437 = struct (v3471, v3472) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3473 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3474 : int32, v3475 : string) = v3473 v3428
    let _run_target_args'_v3437 = struct (v3474, v3475) 
    #endif
#else
    let v3476 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v3477 : int32, v3478 : string) = v3476 v3428
    let _run_target_args'_v3437 = struct (v3477, v3478) 
    #endif
    let struct (v3479 : int32, v3480 : string) = _run_target_args'_v3437 
    let _run_target_args'_v15 = struct (v3479, v3480) 
    #endif
    let struct (v3485 : int32, v3486 : string) = _run_target_args'_v15 
    struct (v3485, v3486)
and method176 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v4, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v4, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v4, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v4, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v60 : string = "run_result"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v4, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v29}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v4, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v4, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v49}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v4, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "new_code_path"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v29}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v2}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v4, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v127 : string = " }"
    let v128 : string = $"{v127}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v4, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = v4.l0
    v136
and method175 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method176(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.process_gleam / check error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure68 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure2()
        let v7 : unit = (fun () -> v6 (); v5) ()
        let struct (v28 : Mut0, v29 : Mut1, v30 : Mut2, v31 : Mut3, v32 : Mut4, v33 : int64 option) = TraceState.trace_state.Value
        let v46 : string = method8(v28, v29, v30, v31, v32, v33)
        let v47 : string = method82()
        let v48 : string = method175(v28, v29, v30, v31, v32, v33, v46, v47, v2, v1, v0)
        method19(v48)
and method178 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "exit_code"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v40 : string = $"{v0}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v5, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v50 : string = "; "
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v61 : string = "run_result"
    let v62 : string = $"{v61}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v71 : string = $"{v30}"
    let v74 : unit = ()
    let v75 : (unit -> unit) = closure7(v5, v71)
    let v76 : unit = (fun () -> v75 (); v74) ()
    let v80 : string = $"{v1}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v5, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v89 : string = $"{v50}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v99 : string = "new_code_path"
    let v100 : string = $"{v99}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v5, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v109 : string = $"{v30}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v5, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v118 : string = $"{v2}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v5, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v127 : string = $"{v50}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v5, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v137 : string = "external_command"
    let v138 : string = $"{v137}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v147 : string = $"{v30}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v156 : string = $"{v3}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v5, v156)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v5, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v175 : string = v5.l0
    v175
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method178(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure69 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method177(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method179 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method176(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.process_gleam / esbuild error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure70 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure2()
        let v7 : unit = (fun () -> v6 (); v5) ()
        let struct (v28 : Mut0, v29 : Mut1, v30 : Mut2, v31 : Mut3, v32 : Mut4, v33 : int64 option) = TraceState.trace_state.Value
        let v46 : string = method8(v28, v29, v30, v31, v32, v33)
        let v47 : string = method82()
        let v48 : string = method179(v28, v29, v30, v31, v32, v33, v46, v47, v2, v1, v0)
        method19(v48)
and method180 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method176(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.process_gleam / trunk error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure71 (v0 : string, v1 : string, v2 : int32) () : unit =
    let v3 : US0 = US0_4
    let v4 : bool = method7(v3)
    if v4 then
        let v5 : unit = ()
        let v6 : (unit -> unit) = closure2()
        let v7 : unit = (fun () -> v6 (); v5) ()
        let struct (v28 : Mut0, v29 : Mut1, v30 : Mut2, v31 : Mut3, v32 : Mut4, v33 : int64 option) = TraceState.trace_state.Value
        let v46 : string = method8(v28, v29, v30, v31, v32, v33)
        let v47 : string = method82()
        let v48 : string = method180(v28, v29, v30, v31, v32, v33, v46, v47, v2, v1, v0)
        method19(v48)
and closure72 () (v0 : string) : US5 =
    US5_0(v0)
and closure73 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method182 (v0 : exn, v1 : std_string_String, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "run_result'"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    (* run_target_args'
    let v122 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v123 : string = "format!(\"{:#?}\", $0)"
    let v124 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v123 
    let v125 : string = "fable_library_rust::String_::fromString($0)"
    let v126 : string = Fable.Core.RustInterop.emitRustExpr v124 v125 
    let _run_target_args'_v122 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "format!(\"{:#?}\", $0)"
    let v128 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v127 
    let v129 : string = "fable_library_rust::String_::fromString($0)"
    let v130 : string = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let _run_target_args'_v122 = v130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v131 : string = "format!(\"{:#?}\", $0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v131 
    let v133 : string = "fable_library_rust::String_::fromString($0)"
    let v134 : string = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let _run_target_args'_v122 = v134 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : string = $"%A{v1}"
    let _run_target_args'_v122 = v136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v140 : string = $"%A{v1}"
    let _run_target_args'_v122 = v140 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v144 : string = $"%A{v1}"
    let _run_target_args'_v122 = v144 
    #endif
#else
    let v148 : string = $"%A{v1}"
    let _run_target_args'_v122 = v148 
    #endif
    let v151 : string = _run_target_args'_v122 
    let v158 : string = $"{v151}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v5, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v167 : string = $"{v89}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v5, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v177 : string = "new_code_path"
    let v178 : string = $"{v177}"
    let v181 : unit = ()
    let v182 : (unit -> unit) = closure7(v5, v178)
    let v183 : unit = (fun () -> v182 (); v181) ()
    let v187 : string = $"{v30}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v5, v187)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v196 : string = $"{v2}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v5, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v205 : string = $"{v89}"
    let v208 : unit = ()
    let v209 : (unit -> unit) = closure7(v5, v205)
    let v210 : unit = (fun () -> v209 (); v208) ()
    let v215 : string = "external_command"
    let v216 : string = $"{v215}"
    let v219 : unit = ()
    let v220 : (unit -> unit) = closure7(v5, v216)
    let v221 : unit = (fun () -> v220 (); v219) ()
    let v225 : string = $"{v30}"
    let v228 : unit = ()
    let v229 : (unit -> unit) = closure7(v5, v225)
    let v230 : unit = (fun () -> v229 (); v228) ()
    let v234 : string = $"{v3}"
    let v237 : unit = ()
    let v238 : (unit -> unit) = closure7(v5, v234)
    let v239 : unit = (fun () -> v238 (); v237) ()
    let v244 : string = " }"
    let v245 : string = $"{v244}"
    let v248 : unit = ()
    let v249 : (unit -> unit) = closure7(v5, v245)
    let v250 : unit = (fun () -> v249 (); v248) ()
    let v253 : string = v5.l0
    v253
and method181 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : std_string_String, v10 : string, v11 : string) : string =
    let v12 : string = method182(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_gleam / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure75 (v0 : string, v1 : string, v2 : std_string_String, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method181(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v0, v1)
        method19(v49)
and closure74 (v0 : string, v1 : string, v2 : std_string_String) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure75(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method183 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) : Func0<struct (string * string), (std_string_String * std_string_String)> =
    v0
and closure76 (v0 : Func0<struct (string * string), (std_string_String * std_string_String)>) struct (v1 : string, v2 : string) : (std_string_String * std_string_String) =
    let v3 : Func0<struct (string * string), (std_string_String * std_string_String)> = method183(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : (std_string_String * std_string_String) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method184 () : string =
    let v0 : string = "py-path"
    v0
and method185 () : string =
    let v0 : string = "env"
    v0
and method187 (v0 : US38, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "env"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v40 : string = $"%A{v0}"
    let v44 : string = $"{v40}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v5, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v54 : string = "; "
    let v55 : string = $"{v54}"
    let v58 : unit = ()
    let v59 : (unit -> unit) = closure7(v5, v55)
    let v60 : unit = (fun () -> v59 (); v58) ()
    let v65 : string = "exit_code"
    let v66 : string = $"{v65}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v5, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v75 : string = $"{v30}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v84 : string = $"{v1}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v93 : string = $"{v54}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v5, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v103 : string = "run_result"
    let v104 : string = $"{v103}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v5, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v113 : string = $"{v30}"
    let v116 : unit = ()
    let v117 : (unit -> unit) = closure7(v5, v113)
    let v118 : unit = (fun () -> v117 (); v116) ()
    let v122 : string = $"{v2}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v131 : string = $"{v54}"
    let v134 : unit = ()
    let v135 : (unit -> unit) = closure7(v5, v131)
    let v136 : unit = (fun () -> v135 (); v134) ()
    let v141 : string = "new_code_path"
    let v142 : string = $"{v141}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v151 : string = $"{v30}"
    let v154 : unit = ()
    let v155 : (unit -> unit) = closure7(v5, v151)
    let v156 : unit = (fun () -> v155 (); v154) ()
    let v160 : string = $"{v3}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v5, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v170 : string = " }"
    let v171 : string = $"{v170}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v5, v171)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v179 : string = v5.l0
    v179
and method186 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US38, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method187(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / env install error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure77 (v0 : US38, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method186(v29, v30, v31, v32, v33, v34, v47, v48, v0, v3, v2, v1)
        method19(v49)
and closure78 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method189 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "run_result"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v1}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v5, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v89}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "new_code_path"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v5, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v30}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v157 : string = $"{v2}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v5, v157)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v166 : string = $"{v89}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v166)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v176 : string = "external_command"
    let v177 : string = $"{v176}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v5, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v186 : string = $"{v30}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v186)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v195 : string = $"{v3}"
    let v198 : unit = ()
    let v199 : (unit -> unit) = closure7(v5, v195)
    let v200 : unit = (fun () -> v199 (); v198) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v5, v206)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v214 : string = v5.l0
    v214
and method188 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method189(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure80 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method188(v29, v30, v31, v32, v33, v34, v47, v48, v3, v1, v0, v2)
        method19(v49)
and closure79 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure80(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method190 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method178(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_cuda / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure81 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method190(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method191 () : string =
    let v0 : string = "fs-path"
    v0
and method192 () : string =
    let v0 : string = "command"
    v0
and method193 () : string =
    let v0 : string = "path"
    v0
and method195 (v0 : string) : string =
    let v1 : string = method34()
    let v2 : string = method36(v1, v0)
    method69(v2)
and closure82 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method195(v2)
and method194 () : (std_string_String -> string) =
    closure82()
and method196 () : string =
    let v0 : string = "retries"
    v0
and method197 () : string =
    let v0 : string = "working-directory"
    v0
and method200 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v4, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v18 : string = "exit_code"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v4, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v4, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v4, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v60 : string = "repl_result"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v4, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v29}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v4, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v4, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v49}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v4, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "retry"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v29}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"{v2}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v4, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v127 : string = " }"
    let v128 : string = $"{v127}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v4, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = v4.l0
    v136
and method199 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method200(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v14 : string = "spiral.run / repl error"
    let v15 : string = $"{v6} {v7} #{v12} %s{v14} / {v11}"
    method18(v15)
and closure83 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v1}/{v0}"
        let v50 : string = method199(v29, v30, v31, v32, v33, v34, v47, v48, v3, v2, v49)
        method19(v50)
and method198 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v8 : (struct (string * string) []) = [||]
    let v10 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v18 : string option = None
    let v21 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v22 : string = "TRACE_LEVEL"
    let v23 : string = "Verbose"
    let v24 : string = "AUTOMATION"
    let v25 : string = "True"
    let v26 : (struct (string * string) []) = [|struct (v22, v23); struct (v24, v25)|]
    let v37 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v33 : string option = None
            v33
        | US5_0(v27) -> (* Some *)
            let v29 : string option = Some v27 
            v29
    let v38 : bool = false
    let struct (v39 : int32, v40 : string) = method101(v21, v5, v26, v10, v14, v38, v37)
    let v41 : bool = v39 = 0
    let v43 : bool =
        if v41 then
            true
        else
            let v42 : bool = v3 >= v1
            v42
    if v43 then
        struct (v39, v40)
    else
        let v44 : unit = ()
        let v45 : (unit -> unit) = closure83(v1, v3, v40, v39)
        let v46 : unit = (fun () -> v45 (); v44) ()
        let v94 : uint8 = v3 + 1uy
        method198(v0, v1, v2, v94)
and method202 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "jupyter_result_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method201 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method202(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / jupyter nbconvert"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure84 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method201(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method204 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "pwsh_replace_html_result_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method203 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method204(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib / html cell ids"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure85 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method203(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method206 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "result_length"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method205 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method206(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / dib"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure86 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : int32 = v0.Length
        let v48 : string = method205(v27, v28, v29, v30, v31, v32, v45, v46, v1, v47)
        method19(v48)
and method207 () : string =
    let v0 : string = "cleanup"
    v0
and method208 () : string =
    let v0 : string = "wasm"
    v0
and method209 () : string =
    let v0 : string = "contract"
    v0
and method210 (v0 : string, v1 : string, v2 : US39) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v4, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v18 : string = "extension"
    let v19 : string = $"{v18}"
    let v22 : unit = ()
    let v23 : (unit -> unit) = closure7(v4, v19)
    let v24 : unit = (fun () -> v23 (); v22) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v4, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v39 : string = $"{v0}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v4, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v49 : string = "; "
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v60 : string = "code"
    let v61 : string = $"{v60}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v4, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v70 : string = $"{v29}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v4, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v79 : string = $"{v1}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v4, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v88 : string = $"{v49}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v4, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "runtime"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v29}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v117 : string = $"%A{v2}"
    let v121 : string = $"{v117}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v4, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v131 : string = " }"
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v4, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v140 : string = v4.l0
    v140
and method211 (v0 : US5, v1 : string, v2 : US42, v3 : string) : string =
    let v4 : string = "target/spiral"
    let v5 : string = method36(v3, v4)
    let v6 : string = method36(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US42_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method36(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US41_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US41_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US41_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method36(v10, v42)
            method36(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method213 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method213(v0, v4, v2)
        let v6 : string = method36(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method214 (v0 : UH4, v1 : UH2) : UH2 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH2 = method214(v4, v1)
        let v6 : string = $"<PackageReference Include=\"{v2}\" Version=\"{v3}\" />"
        UH2_1(v6, v5)
    | UH4_0 -> (* Nil *)
        v1
and method212 (v0 : string, v1 : string, v2 : UH2, v3 : UH4, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method78(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method36(v4, v7)
    let v9 : string = method46(v8)
    method76(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method213(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method124(v11, v12)
    let v18 : unit = ()
    let _let'_v18 =
        seq {
            yield! v13 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v21 : string seq = _let'_v18 
    let v29 : (string -> (string seq -> string)) = String.concat
    let v30 : string = "\\n        "
    let v31 : (string seq -> string) = v29 v30
    let v32 : string = v31 v21
    let v35 : UH2 = UH2_0
    let v36 : UH2 = method214(v3, v35)
    let v37 : string list = []
    let v38 : string list = method124(v36, v37)
    let v43 : unit = ()
    let _let'_v43 =
        seq {
            yield! v38 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v46 : string seq = _let'_v43 
    let v53 : (string -> (string seq -> string)) = String.concat
    let v54 : (string seq -> string) = v53 v30
    let v55 : string = v54 v46
    let v58 : string = $"{v1}.fsproj"
    let v59 : string = method36(v4, v58)
    let v60 : string = method46(v59)
    let v61 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v62 : string = $"<PropertyGroup>"
    let v63 : string = "\n"
    let v64 : string = v61 + v63 
    let v65 : string = v64 + v62 
    let v66 : string = $"    <TargetFramework>net10.0</TargetFramework>"
    let v67 : string = v65 + v63 
    let v68 : string = v67 + v66 
    let v69 : string = $"    <LangVersion>preview</LangVersion>"
    let v70 : string = v68 + v63 
    let v71 : string = v70 + v69 
    let v72 : string = $"    <RollForward>Major</RollForward>"
    let v73 : string = v71 + v63 
    let v74 : string = v73 + v72 
    let v75 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v76 : string = v74 + v63 
    let v77 : string = v76 + v75 
    let v78 : string = $"    <PublishAot>false</PublishAot>"
    let v79 : string = v77 + v63 
    let v80 : string = v79 + v78 
    let v81 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v82 : string = v80 + v63 
    let v83 : string = v82 + v81 
    let v84 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v85 : string = v83 + v63 
    let v86 : string = v85 + v84 
    let v87 : string = $"    <SelfContained>true</SelfContained>"
    let v88 : string = v86 + v63 
    let v89 : string = v88 + v87 
    let v90 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v91 : string = v89 + v63 
    let v92 : string = v91 + v90 
    let v93 : string = $"    <OutputType>Exe</OutputType>"
    let v94 : string = v92 + v63 
    let v95 : string = v94 + v93 
    let v96 : string = $"    <ServerGarbageCollection>true</ServerGarbageCollection>"
    let v97 : string = v95 + v63 
    let v98 : string = v97 + v96 
    let v99 : string = $"    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>"
    let v100 : string = v98 + v63 
    let v101 : string = v100 + v99 
    let v102 : string = $"</PropertyGroup>"
    let v103 : string = v101 + v63 
    let v104 : string = v103 + v102 
    let v105 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v106 : string = v104 + v63 
    let v107 : string = v106 + v105 
    let v108 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v109 : string = v107 + v63 
    let v110 : string = v109 + v108 
    let v111 : string = $"</PropertyGroup>"
    let v112 : string = v110 + v63 
    let v113 : string = v112 + v111 
    let v114 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v115 : string = v113 + v63 
    let v116 : string = v115 + v114 
    let v117 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v118 : string = v116 + v63 
    let v119 : string = v118 + v117 
    let v120 : string = $"</PropertyGroup>"
    let v121 : string = v119 + v63 
    let v122 : string = v121 + v120 
    let v123 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v124 : string = v122 + v63 
    let v125 : string = v124 + v123 
    let v126 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v127 : string = v125 + v63 
    let v128 : string = v127 + v126 
    let v129 : string = $"</PropertyGroup>"
    let v130 : string = v128 + v63 
    let v131 : string = v130 + v129 
    let v132 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v133 : string = v131 + v63 
    let v134 : string = v133 + v132 
    let v135 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v136 : string = v134 + v63 
    let v137 : string = v136 + v135 
    let v138 : string = $"</PropertyGroup>"
    let v139 : string = v137 + v63 
    let v140 : string = v139 + v138 
    let v141 : string = $"<ItemGroup>"
    let v142 : string = v140 + v63 
    let v143 : string = v142 + v141 
    let v144 : string = $"    {v32}"
    let v145 : string = v143 + v63 
    let v146 : string = v145 + v144 
    let v147 : string = $"    <Compile Include=\"{v9}\" />"
    let v148 : string = v146 + v63 
    let v149 : string = v148 + v147 
    let v150 : string = $"</ItemGroup>"
    let v151 : string = v149 + v63 
    let v152 : string = v151 + v150 
    let v153 : string = $"<ItemGroup>"
    let v154 : string = v152 + v63 
    let v155 : string = v154 + v153 
    let v156 : string = $"    {v55}"
    let v157 : string = v155 + v63 
    let v158 : string = v157 + v156 
    let v159 : string = $"</ItemGroup>"
    let v160 : string = v158 + v63 
    let v161 : string = v160 + v159 
    let v162 : string = $"</Project>"
    let v163 : string = v161 + v63 
    let v164 : string = v163 + v162 
    method76(v60, v164)
    v60
and closure87 () (v0 : chrono_DateTime<chrono_Utc>) : US43 =
    US43_0(v0)
and method216 () : (chrono_DateTime<chrono_Utc> -> US43) =
    closure87()
and method217 () : string =
    let v0 : string = "hh:mm"
    v0
and method218 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method219 () : string =
    let v0 : string = "hhmm"
    v0
and method215 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    (* run_target_args'
    let v569 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v571 : System.DateTime = System.DateTime.UnixEpoch
    let v575 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v576 : System.DateTime = v575 v571
    let v580 : System.DateTimeKind = System.DateTimeKind.Local
    let v581 : System.DateTime = System.DateTime.SpecifyKind (v1, v580)
    let v585 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v586 : System.DateTime = v585 v581
    (* run_target_args'
    let v592 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v593 : (System.DateTime -> int64) = _.Ticks
    let v594 : int64 = v593 v586
    let _run_target_args'_v592 = v594 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v595 : (System.DateTime -> int64) = _.Ticks
    let v596 : int64 = v595 v586
    let _run_target_args'_v592 = v596 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v598 : int64 = null |> unbox<int64>
    let _run_target_args'_v592 = v598 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v601 : (System.DateTime -> int64) = _.Ticks
    let v602 : int64 = v601 v586
    let _run_target_args'_v592 = v602 
    #endif
#if FABLE_COMPILER_PYTHON
    let v603 : (System.DateTime -> int64) = _.Ticks
    let v604 : int64 = v603 v586
    let _run_target_args'_v592 = v604 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v605 : (System.DateTime -> int64) = _.Ticks
    let v606 : int64 = v605 v586
    let _run_target_args'_v592 = v606 
    #endif
#else
    let v607 : (System.DateTime -> int64) = _.Ticks
    let v608 : int64 = v607 v586
    let _run_target_args'_v592 = v608 
    #endif
    let v609 : int64 = _run_target_args'_v592 
    (* run_target_args'
    let v632 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v633 : (System.DateTime -> int64) = _.Ticks
    let v634 : int64 = v633 v576
    let _run_target_args'_v632 = v634 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v635 : (System.DateTime -> int64) = _.Ticks
    let v636 : int64 = v635 v576
    let _run_target_args'_v632 = v636 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v638 : int64 = null |> unbox<int64>
    let _run_target_args'_v632 = v638 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v641 : (System.DateTime -> int64) = _.Ticks
    let v642 : int64 = v641 v576
    let _run_target_args'_v632 = v642 
    #endif
#if FABLE_COMPILER_PYTHON
    let v643 : (System.DateTime -> int64) = _.Ticks
    let v644 : int64 = v643 v576
    let _run_target_args'_v632 = v644 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v645 : (System.DateTime -> int64) = _.Ticks
    let v646 : int64 = v645 v576
    let _run_target_args'_v632 = v646 
    #endif
#else
    let v647 : (System.DateTime -> int64) = _.Ticks
    let v648 : int64 = v647 v576
    let _run_target_args'_v632 = v648 
    #endif
    let v649 : int64 = _run_target_args'_v632 
    let v670 : int64 = v609 |> int64 
    let v674 : int64 = v649 |> int64 
    let v677 : int64 = v670 - v674
    let v678 : int64 = v677 / 10L
    let v679 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v680 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v678 v679 
    let v683 : (chrono_DateTime<chrono_Utc> -> US43) = method216()
    let v684 : US43 option = v680 |> Option.map v683 
    let v704 : US43 = US43_1
    let v705 : US43 = v684 |> Option.defaultValue v704 
    let v725 : US5 =
        match v705 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v709) -> (* Some *)
            let v710 : string = "$0.naive_utc()"
            let v711 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v709 v710 
            let v712 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v713 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v711 v712 
            let v714 : string = "%Y%m%d-%H%M-%S%f"
            let v715 : string = "r#\"" + v714 + "\"#"
            let v716 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v715 
            let v717 : string = "$0.format($1).to_string()"
            let v718 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v713, v716) v717 
            let v719 : string = "fable_library_rust::String_::fromString($0)"
            let v720 : string = Fable.Core.RustInterop.emitRustExpr v718 v719 
            let v721 : string = $"{v720.[0..17]}-{v720.[18..21]}-{v720.[22]}"
            US5_0(v721)
    let v729 : string =
        match v725 with
        | US5_1 -> (* None *)
            let v727 : string = ""
            v727
        | US5_0(v726) -> (* Some *)
            v726
    (* run_target_args'
    let v734 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v735 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v736 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v735 
    let _run_target_args'_v734 = v736 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v738 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v734 = v738 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v742 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v734 = v742 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v746 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v734 = v746 
    #endif
#if FABLE_COMPILER_PYTHON
    let v750 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v734 = v750 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v753 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v734 = v753 
    #endif
#else
    let v754 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v734 = v754 
    #endif
    let v755 : System.TimeZoneInfo = _run_target_args'_v734 
    (* run_target_args'
    let v768 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v772 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v773 : (System.DateTime -> int64) = _.Ticks
    let v774 : int64 = v773 v586
    let _run_target_args'_v772 = v774 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v775 : (System.DateTime -> int64) = _.Ticks
    let v776 : int64 = v775 v586
    let _run_target_args'_v772 = v776 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v778 : int64 = null |> unbox<int64>
    let _run_target_args'_v772 = v778 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v781 : (System.DateTime -> int64) = _.Ticks
    let v782 : int64 = v781 v586
    let _run_target_args'_v772 = v782 
    #endif
#if FABLE_COMPILER_PYTHON
    let v783 : (System.DateTime -> int64) = _.Ticks
    let v784 : int64 = v783 v586
    let _run_target_args'_v772 = v784 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v785 : (System.DateTime -> int64) = _.Ticks
    let v786 : int64 = v785 v586
    let _run_target_args'_v772 = v786 
    #endif
#else
    let v787 : (System.DateTime -> int64) = _.Ticks
    let v788 : int64 = v787 v586
    let _run_target_args'_v772 = v788 
    #endif
    let v789 : int64 = _run_target_args'_v772 
    let v809 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v810 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v789) v809 
    let v812 : System.TimeSpan = v810 |> System.TimeSpan 
    let _run_target_args'_v768 = v812 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v818 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v819 : (System.DateTime -> int64) = _.Ticks
    let v820 : int64 = v819 v586
    let _run_target_args'_v818 = v820 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v821 : (System.DateTime -> int64) = _.Ticks
    let v822 : int64 = v821 v586
    let _run_target_args'_v818 = v822 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v824 : int64 = null |> unbox<int64>
    let _run_target_args'_v818 = v824 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v827 : (System.DateTime -> int64) = _.Ticks
    let v828 : int64 = v827 v586
    let _run_target_args'_v818 = v828 
    #endif
#if FABLE_COMPILER_PYTHON
    let v829 : (System.DateTime -> int64) = _.Ticks
    let v830 : int64 = v829 v586
    let _run_target_args'_v818 = v830 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v831 : (System.DateTime -> int64) = _.Ticks
    let v832 : int64 = v831 v586
    let _run_target_args'_v818 = v832 
    #endif
#else
    let v833 : (System.DateTime -> int64) = _.Ticks
    let v834 : int64 = v833 v586
    let _run_target_args'_v818 = v834 
    #endif
    let v835 : int64 = _run_target_args'_v818 
    let v855 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v856 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v586, v835) v855 
    let v858 : System.TimeSpan = v856 |> System.TimeSpan 
    let _run_target_args'_v768 = v858 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v862 : US3 = US3_2
    let v863 : US4 = US4_3(v862)
    let v864 : string = $"date_time.get_utc_offset / target: {v863}"
    let v865 : System.TimeSpan = failwith<System.TimeSpan> v864
    let _run_target_args'_v768 = v865 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v869 : US3 = US3_0
    let v870 : US4 = US4_4(v869)
    let v871 : string = $"date_time.get_utc_offset / target: {v870}"
    let v872 : System.TimeSpan = failwith<System.TimeSpan> v871
    let _run_target_args'_v768 = v872 
    #endif
#if FABLE_COMPILER_PYTHON
    let v876 : US3 = US3_0
    let v877 : US4 = US4_5(v876)
    let v878 : string = $"date_time.get_utc_offset / target: {v877}"
    let v879 : System.TimeSpan = failwith<System.TimeSpan> v878
    let _run_target_args'_v768 = v879 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v882 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v887 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v888 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v889 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v888 
    let _run_target_args'_v887 = v889 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v891 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v887 = v891 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v895 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v887 = v895 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v899 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v887 = v899 
    #endif
#if FABLE_COMPILER_PYTHON
    let v903 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v887 = v903 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v906 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v887 = v906 
    #endif
#else
    let v907 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v887 = v907 
    #endif
    let v908 : System.TimeZoneInfo = _run_target_args'_v887 
    let v914 : (System.DateTime -> System.TimeSpan) = v882 v908
    let v915 : System.TimeSpan = v914 v586
    let _run_target_args'_v768 = v915 
    #endif
#else
    let v916 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v921 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v922 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v923 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v922 
    let _run_target_args'_v921 = v923 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v925 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v921 = v925 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v929 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v921 = v929 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v933 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v921 = v933 
    #endif
#if FABLE_COMPILER_PYTHON
    let v937 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v921 = v937 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v940 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v921 = v940 
    #endif
#else
    let v941 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v921 = v941 
    #endif
    let v942 : System.TimeZoneInfo = _run_target_args'_v921 
    let v948 : (System.DateTime -> System.TimeSpan) = v916 v942
    let v949 : System.TimeSpan = v948 v586
    let _run_target_args'_v768 = v949 
    #endif
    let v950 : System.TimeSpan = _run_target_args'_v768 
    let v960 : (System.TimeSpan -> int32) = _.Hours
    let v961 : int32 = v960 v950
    let v964 : bool = v961 > 0
    let v965 : uint8 =
        if v964 then
            1uy
        else
            0uy
    let v966 : string = method217()
    (* run_target_args'
    let v1020 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1021 : string = "$0.toString($1)"
    let v1022 : string = Fable.Core.RustInterop.emitRustExpr struct (v950, v966) v1021 
    let _run_target_args'_v1020 = v1022 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1023 : string = "$0.toString($1)"
    let v1024 : string = Fable.Core.RustInterop.emitRustExpr struct (v950, v966) v1023 
    let _run_target_args'_v1020 = v1024 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1025 : string = "$0.toString($1)"
    let v1026 : string = Fable.Core.RustInterop.emitRustExpr struct (v950, v966) v1025 
    let _run_target_args'_v1020 = v1026 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1027 : string = v950.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1020 = v1027 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1028 : string = v950.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1020 = v1028 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1030 : string = v950.ToString v966 
    let _run_target_args'_v1020 = v1030 
    #endif
#else
    let v1083 : string = v950.ToString v966 
    let _run_target_args'_v1020 = v1083 
    #endif
    let v1135 : string = _run_target_args'_v1020 
    let v1190 : string = $"{v965}{v1135.[0..1]}{v1135.[3..4]}"
    let v1192 : (System.Guid -> string) = _.ToString()
    let v1193 : string = v1192 v0
    let v1196 : int32 = v729.Length
    let v1197 : int32 = v1190.Length
    let v1198 : int32 = v1196 + v1197
    let v1200 : (string -> int32) = String.length
    let v1201 : int32 = v1200 v1193
    let v1209 : int32 = v1198 |> int32 
    let v1222 : int32 = v1201 |> int32 
    let v1230 : int32 = v1222 - 1
    let v1232 : string = v1193.[int v1209..int v1230]
    let v1236 : string = $"{v729}{v1190}{v1232}"
    (* run_target_args'
    let v1241 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1243 : System.Guid = v1236 |> System.Guid 
    let _run_target_args'_v1241 = v1243 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1247 : System.Guid = v1236 |> System.Guid 
    let _run_target_args'_v1241 = v1247 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1251 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1241 = v1251 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1255 : System.Guid = v1236 |> System.Guid 
    let _run_target_args'_v1241 = v1255 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1259 : System.Guid = v1236 |> System.Guid 
    let _run_target_args'_v1241 = v1259 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1263 : System.Guid = v1236 |> System.Guid 
    let _run_target_args'_v1241 = v1263 
    #endif
#else
    let v1267 : System.Guid = v1236 |> System.Guid 
    let _run_target_args'_v1241 = v1267 
    #endif
    let v1270 : System.Guid = _run_target_args'_v1241 
    let _run_target_args'_v569 = v1270 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1277 : System.DateTime = System.DateTime.UnixEpoch
    let v1281 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1282 : System.DateTime = v1281 v1277
    let v1286 : System.DateTimeKind = System.DateTimeKind.Local
    let v1287 : System.DateTime = System.DateTime.SpecifyKind (v1, v1286)
    let v1291 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v1292 : System.DateTime = v1291 v1287
    (* run_target_args'
    let v1298 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1299 : (System.DateTime -> int64) = _.Ticks
    let v1300 : int64 = v1299 v1292
    let _run_target_args'_v1298 = v1300 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1301 : (System.DateTime -> int64) = _.Ticks
    let v1302 : int64 = v1301 v1292
    let _run_target_args'_v1298 = v1302 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1304 : int64 = null |> unbox<int64>
    let _run_target_args'_v1298 = v1304 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1307 : (System.DateTime -> int64) = _.Ticks
    let v1308 : int64 = v1307 v1292
    let _run_target_args'_v1298 = v1308 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1309 : (System.DateTime -> int64) = _.Ticks
    let v1310 : int64 = v1309 v1292
    let _run_target_args'_v1298 = v1310 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1311 : (System.DateTime -> int64) = _.Ticks
    let v1312 : int64 = v1311 v1292
    let _run_target_args'_v1298 = v1312 
    #endif
#else
    let v1313 : (System.DateTime -> int64) = _.Ticks
    let v1314 : int64 = v1313 v1292
    let _run_target_args'_v1298 = v1314 
    #endif
    let v1315 : int64 = _run_target_args'_v1298 
    (* run_target_args'
    let v1338 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1339 : (System.DateTime -> int64) = _.Ticks
    let v1340 : int64 = v1339 v1282
    let _run_target_args'_v1338 = v1340 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1341 : (System.DateTime -> int64) = _.Ticks
    let v1342 : int64 = v1341 v1282
    let _run_target_args'_v1338 = v1342 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1344 : int64 = null |> unbox<int64>
    let _run_target_args'_v1338 = v1344 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1347 : (System.DateTime -> int64) = _.Ticks
    let v1348 : int64 = v1347 v1282
    let _run_target_args'_v1338 = v1348 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1349 : (System.DateTime -> int64) = _.Ticks
    let v1350 : int64 = v1349 v1282
    let _run_target_args'_v1338 = v1350 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1351 : (System.DateTime -> int64) = _.Ticks
    let v1352 : int64 = v1351 v1282
    let _run_target_args'_v1338 = v1352 
    #endif
#else
    let v1353 : (System.DateTime -> int64) = _.Ticks
    let v1354 : int64 = v1353 v1282
    let _run_target_args'_v1338 = v1354 
    #endif
    let v1355 : int64 = _run_target_args'_v1338 
    let v1376 : int64 = v1315 |> int64 
    let v1380 : int64 = v1355 |> int64 
    let v1383 : int64 = v1376 - v1380
    let v1384 : int64 = v1383 / 10L
    let v1385 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v1386 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1384 v1385 
    let v1389 : (chrono_DateTime<chrono_Utc> -> US43) = method216()
    let v1390 : US43 option = v1386 |> Option.map v1389 
    let v1410 : US43 = US43_1
    let v1411 : US43 = v1390 |> Option.defaultValue v1410 
    let v1431 : US5 =
        match v1411 with
        | US43_1 -> (* None *)
            US5_1
        | US43_0(v1415) -> (* Some *)
            let v1416 : string = "$0.naive_utc()"
            let v1417 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1415 v1416 
            let v1418 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v1419 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1417 v1418 
            let v1420 : string = "%Y%m%d-%H%M-%S%f"
            let v1421 : string = "r#\"" + v1420 + "\"#"
            let v1422 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1421 
            let v1423 : string = "$0.format($1).to_string()"
            let v1424 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1419, v1422) v1423 
            let v1425 : string = "fable_library_rust::String_::fromString($0)"
            let v1426 : string = Fable.Core.RustInterop.emitRustExpr v1424 v1425 
            let v1427 : string = $"{v1426.[0..17]}-{v1426.[18..21]}-{v1426.[22]}"
            US5_0(v1427)
    let v1435 : string =
        match v1431 with
        | US5_1 -> (* None *)
            let v1433 : string = ""
            v1433
        | US5_0(v1432) -> (* Some *)
            v1432
    (* run_target_args'
    let v1440 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1441 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1442 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1441 
    let _run_target_args'_v1440 = v1442 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1444 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1440 = v1444 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1448 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1440 = v1448 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1452 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1440 = v1452 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1456 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1440 = v1456 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1459 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1440 = v1459 
    #endif
#else
    let v1460 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1440 = v1460 
    #endif
    let v1461 : System.TimeZoneInfo = _run_target_args'_v1440 
    (* run_target_args'
    let v1474 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v1478 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1479 : (System.DateTime -> int64) = _.Ticks
    let v1480 : int64 = v1479 v1292
    let _run_target_args'_v1478 = v1480 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1481 : (System.DateTime -> int64) = _.Ticks
    let v1482 : int64 = v1481 v1292
    let _run_target_args'_v1478 = v1482 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1484 : int64 = null |> unbox<int64>
    let _run_target_args'_v1478 = v1484 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1487 : (System.DateTime -> int64) = _.Ticks
    let v1488 : int64 = v1487 v1292
    let _run_target_args'_v1478 = v1488 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1489 : (System.DateTime -> int64) = _.Ticks
    let v1490 : int64 = v1489 v1292
    let _run_target_args'_v1478 = v1490 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1491 : (System.DateTime -> int64) = _.Ticks
    let v1492 : int64 = v1491 v1292
    let _run_target_args'_v1478 = v1492 
    #endif
#else
    let v1493 : (System.DateTime -> int64) = _.Ticks
    let v1494 : int64 = v1493 v1292
    let _run_target_args'_v1478 = v1494 
    #endif
    let v1495 : int64 = _run_target_args'_v1478 
    let v1515 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1516 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1292, v1495) v1515 
    let v1518 : System.TimeSpan = v1516 |> System.TimeSpan 
    let _run_target_args'_v1474 = v1518 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v1524 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1525 : (System.DateTime -> int64) = _.Ticks
    let v1526 : int64 = v1525 v1292
    let _run_target_args'_v1524 = v1526 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1527 : (System.DateTime -> int64) = _.Ticks
    let v1528 : int64 = v1527 v1292
    let _run_target_args'_v1524 = v1528 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1530 : int64 = null |> unbox<int64>
    let _run_target_args'_v1524 = v1530 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1533 : (System.DateTime -> int64) = _.Ticks
    let v1534 : int64 = v1533 v1292
    let _run_target_args'_v1524 = v1534 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1535 : (System.DateTime -> int64) = _.Ticks
    let v1536 : int64 = v1535 v1292
    let _run_target_args'_v1524 = v1536 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1537 : (System.DateTime -> int64) = _.Ticks
    let v1538 : int64 = v1537 v1292
    let _run_target_args'_v1524 = v1538 
    #endif
#else
    let v1539 : (System.DateTime -> int64) = _.Ticks
    let v1540 : int64 = v1539 v1292
    let _run_target_args'_v1524 = v1540 
    #endif
    let v1541 : int64 = _run_target_args'_v1524 
    let v1561 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1562 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1292, v1541) v1561 
    let v1564 : System.TimeSpan = v1562 |> System.TimeSpan 
    let _run_target_args'_v1474 = v1564 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1568 : US3 = US3_2
    let v1569 : US4 = US4_3(v1568)
    let v1570 : string = $"date_time.get_utc_offset / target: {v1569}"
    let v1571 : System.TimeSpan = failwith<System.TimeSpan> v1570
    let _run_target_args'_v1474 = v1571 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1575 : US3 = US3_0
    let v1576 : US4 = US4_4(v1575)
    let v1577 : string = $"date_time.get_utc_offset / target: {v1576}"
    let v1578 : System.TimeSpan = failwith<System.TimeSpan> v1577
    let _run_target_args'_v1474 = v1578 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1582 : US3 = US3_0
    let v1583 : US4 = US4_5(v1582)
    let v1584 : string = $"date_time.get_utc_offset / target: {v1583}"
    let v1585 : System.TimeSpan = failwith<System.TimeSpan> v1584
    let _run_target_args'_v1474 = v1585 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1588 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1593 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1594 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1595 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1594 
    let _run_target_args'_v1593 = v1595 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1597 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1593 = v1597 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1601 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1593 = v1601 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1605 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1593 = v1605 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1609 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1593 = v1609 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1612 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1593 = v1612 
    #endif
#else
    let v1613 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1593 = v1613 
    #endif
    let v1614 : System.TimeZoneInfo = _run_target_args'_v1593 
    let v1620 : (System.DateTime -> System.TimeSpan) = v1588 v1614
    let v1621 : System.TimeSpan = v1620 v1292
    let _run_target_args'_v1474 = v1621 
    #endif
#else
    let v1622 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v1627 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1628 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1629 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1628 
    let _run_target_args'_v1627 = v1629 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1631 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1627 = v1631 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1635 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1627 = v1635 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1639 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1627 = v1639 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1643 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v1627 = v1643 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1646 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1627 = v1646 
    #endif
#else
    let v1647 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v1627 = v1647 
    #endif
    let v1648 : System.TimeZoneInfo = _run_target_args'_v1627 
    let v1654 : (System.DateTime -> System.TimeSpan) = v1622 v1648
    let v1655 : System.TimeSpan = v1654 v1292
    let _run_target_args'_v1474 = v1655 
    #endif
    let v1656 : System.TimeSpan = _run_target_args'_v1474 
    let v1666 : (System.TimeSpan -> int32) = _.Hours
    let v1667 : int32 = v1666 v1656
    let v1670 : bool = v1667 > 0
    let v1671 : uint8 =
        if v1670 then
            1uy
        else
            0uy
    let v1672 : string = method217()
    (* run_target_args'
    let v1726 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1727 : string = "$0.toString($1)"
    let v1728 : string = Fable.Core.RustInterop.emitRustExpr struct (v1656, v1672) v1727 
    let _run_target_args'_v1726 = v1728 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1729 : string = "$0.toString($1)"
    let v1730 : string = Fable.Core.RustInterop.emitRustExpr struct (v1656, v1672) v1729 
    let _run_target_args'_v1726 = v1730 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1731 : string = "$0.toString($1)"
    let v1732 : string = Fable.Core.RustInterop.emitRustExpr struct (v1656, v1672) v1731 
    let _run_target_args'_v1726 = v1732 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1733 : string = v1656.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1726 = v1733 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1734 : string = v1656.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v1726 = v1734 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1736 : string = v1656.ToString v1672 
    let _run_target_args'_v1726 = v1736 
    #endif
#else
    let v1789 : string = v1656.ToString v1672 
    let _run_target_args'_v1726 = v1789 
    #endif
    let v1841 : string = _run_target_args'_v1726 
    let v1896 : string = $"{v1671}{v1841.[0..1]}{v1841.[3..4]}"
    let v1898 : (System.Guid -> string) = _.ToString()
    let v1899 : string = v1898 v0
    let v1902 : int32 = v1435.Length
    let v1903 : int32 = v1896.Length
    let v1904 : int32 = v1902 + v1903
    let v1906 : (string -> int32) = String.length
    let v1907 : int32 = v1906 v1899
    let v1915 : int32 = v1904 |> int32 
    let v1928 : int32 = v1907 |> int32 
    let v1936 : int32 = v1928 - 1
    let v1938 : string = v1899.[int v1915..int v1936]
    let v1942 : string = $"{v1435}{v1896}{v1938}"
    (* run_target_args'
    let v1947 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1949 : System.Guid = v1942 |> System.Guid 
    let _run_target_args'_v1947 = v1949 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1953 : System.Guid = v1942 |> System.Guid 
    let _run_target_args'_v1947 = v1953 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1957 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v1947 = v1957 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1961 : System.Guid = v1942 |> System.Guid 
    let _run_target_args'_v1947 = v1961 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1965 : System.Guid = v1942 |> System.Guid 
    let _run_target_args'_v1947 = v1965 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1969 : System.Guid = v1942 |> System.Guid 
    let _run_target_args'_v1947 = v1969 
    #endif
#else
    let v1973 : System.Guid = v1942 |> System.Guid 
    let _run_target_args'_v1947 = v1973 
    #endif
    let v1976 : System.Guid = _run_target_args'_v1947 
    let _run_target_args'_v569 = v1976 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1983 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v569 = v1983 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1986 : string = method218()
    let v1988 : bool = v1986 = ""
    let v1990 : string =
        if v1988 then
            let v1989 : string = "M-d-y hh:mm:ss tt"
            v1989
        else
            v1986
    let v1991 : (string -> string) = v1.ToString
    let v1992 : string = v1991 v1990
    (* run_target_args'
    let v2011 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2012 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2013 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2012 
    let _run_target_args'_v2011 = v2013 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2015 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2011 = v2015 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2019 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2011 = v2019 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2023 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2011 = v2023 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2027 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2011 = v2027 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2030 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2011 = v2030 
    #endif
#else
    let v2031 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2011 = v2031 
    #endif
    let v2032 : System.TimeZoneInfo = _run_target_args'_v2011 
    (* run_target_args'
    let v2045 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2049 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2050 : (System.DateTime -> int64) = _.Ticks
    let v2051 : int64 = v2050 v1
    let _run_target_args'_v2049 = v2051 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2052 : (System.DateTime -> int64) = _.Ticks
    let v2053 : int64 = v2052 v1
    let _run_target_args'_v2049 = v2053 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2055 : int64 = null |> unbox<int64>
    let _run_target_args'_v2049 = v2055 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2058 : (System.DateTime -> int64) = _.Ticks
    let v2059 : int64 = v2058 v1
    let _run_target_args'_v2049 = v2059 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2060 : (System.DateTime -> int64) = _.Ticks
    let v2061 : int64 = v2060 v1
    let _run_target_args'_v2049 = v2061 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2062 : (System.DateTime -> int64) = _.Ticks
    let v2063 : int64 = v2062 v1
    let _run_target_args'_v2049 = v2063 
    #endif
#else
    let v2064 : (System.DateTime -> int64) = _.Ticks
    let v2065 : int64 = v2064 v1
    let _run_target_args'_v2049 = v2065 
    #endif
    let v2066 : int64 = _run_target_args'_v2049 
    let v2086 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2087 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2066) v2086 
    let v2089 : System.TimeSpan = v2087 |> System.TimeSpan 
    let _run_target_args'_v2045 = v2089 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2095 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2096 : (System.DateTime -> int64) = _.Ticks
    let v2097 : int64 = v2096 v1
    let _run_target_args'_v2095 = v2097 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2098 : (System.DateTime -> int64) = _.Ticks
    let v2099 : int64 = v2098 v1
    let _run_target_args'_v2095 = v2099 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2101 : int64 = null |> unbox<int64>
    let _run_target_args'_v2095 = v2101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2104 : (System.DateTime -> int64) = _.Ticks
    let v2105 : int64 = v2104 v1
    let _run_target_args'_v2095 = v2105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2106 : (System.DateTime -> int64) = _.Ticks
    let v2107 : int64 = v2106 v1
    let _run_target_args'_v2095 = v2107 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2108 : (System.DateTime -> int64) = _.Ticks
    let v2109 : int64 = v2108 v1
    let _run_target_args'_v2095 = v2109 
    #endif
#else
    let v2110 : (System.DateTime -> int64) = _.Ticks
    let v2111 : int64 = v2110 v1
    let _run_target_args'_v2095 = v2111 
    #endif
    let v2112 : int64 = _run_target_args'_v2095 
    let v2132 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2133 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2112) v2132 
    let v2135 : System.TimeSpan = v2133 |> System.TimeSpan 
    let _run_target_args'_v2045 = v2135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2139 : US3 = US3_2
    let v2140 : US4 = US4_3(v2139)
    let v2141 : string = $"date_time.get_utc_offset / target: {v2140}"
    let v2142 : System.TimeSpan = failwith<System.TimeSpan> v2141
    let _run_target_args'_v2045 = v2142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2146 : US3 = US3_0
    let v2147 : US4 = US4_4(v2146)
    let v2148 : string = $"date_time.get_utc_offset / target: {v2147}"
    let v2149 : System.TimeSpan = failwith<System.TimeSpan> v2148
    let _run_target_args'_v2045 = v2149 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2153 : US3 = US3_0
    let v2154 : US4 = US4_5(v2153)
    let v2155 : string = $"date_time.get_utc_offset / target: {v2154}"
    let v2156 : System.TimeSpan = failwith<System.TimeSpan> v2155
    let _run_target_args'_v2045 = v2156 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2159 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2164 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2165 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2166 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2165 
    let _run_target_args'_v2164 = v2166 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2168 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2164 = v2168 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2172 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2164 = v2172 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2176 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2164 = v2176 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2180 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2164 = v2180 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2183 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2164 = v2183 
    #endif
#else
    let v2184 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2164 = v2184 
    #endif
    let v2185 : System.TimeZoneInfo = _run_target_args'_v2164 
    let v2191 : (System.DateTime -> System.TimeSpan) = v2159 v2185
    let v2192 : System.TimeSpan = v2191 v1
    let _run_target_args'_v2045 = v2192 
    #endif
#else
    let v2193 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2198 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2199 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2200 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2199 
    let _run_target_args'_v2198 = v2200 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2202 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2198 = v2202 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2206 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2198 = v2206 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2210 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2198 = v2210 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2214 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2198 = v2214 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2217 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2198 = v2217 
    #endif
#else
    let v2218 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2198 = v2218 
    #endif
    let v2219 : System.TimeZoneInfo = _run_target_args'_v2198 
    let v2225 : (System.DateTime -> System.TimeSpan) = v2193 v2219
    let v2226 : System.TimeSpan = v2225 v1
    let _run_target_args'_v2045 = v2226 
    #endif
    let v2227 : System.TimeSpan = _run_target_args'_v2045 
    let v2237 : (System.TimeSpan -> int32) = _.Hours
    let v2238 : int32 = v2237 v2227
    let v2241 : bool = v2238 > 0
    let v2242 : uint8 =
        if v2241 then
            1uy
        else
            0uy
    let v2243 : string = method219()
    (* run_target_args'
    let v2297 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2298 : string = "$0.toString($1)"
    let v2299 : string = Fable.Core.RustInterop.emitRustExpr struct (v2227, v2243) v2298 
    let _run_target_args'_v2297 = v2299 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2300 : string = "$0.toString($1)"
    let v2301 : string = Fable.Core.RustInterop.emitRustExpr struct (v2227, v2243) v2300 
    let _run_target_args'_v2297 = v2301 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2302 : string = "$0.toString($1)"
    let v2303 : string = Fable.Core.RustInterop.emitRustExpr struct (v2227, v2243) v2302 
    let _run_target_args'_v2297 = v2303 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2304 : string = v2227.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2297 = v2304 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2305 : string = v2227.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2297 = v2305 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2307 : string = v2227.ToString v2243 
    let _run_target_args'_v2297 = v2307 
    #endif
#else
    let v2360 : string = v2227.ToString v2243 
    let _run_target_args'_v2297 = v2360 
    #endif
    let v2412 : string = _run_target_args'_v2297 
    let v2467 : string = $"{v2242}{v2412}"
    let v2469 : (System.Guid -> string) = _.ToString()
    let v2470 : string = v2469 v0
    let v2473 : int32 = v1992.Length
    let v2474 : int32 = v2467.Length
    let v2475 : int32 = v2473 + v2474
    let v2477 : (string -> int32) = String.length
    let v2478 : int32 = v2477 v2470
    let v2486 : int32 = v2475 |> int32 
    let v2499 : int32 = v2478 |> int32 
    let v2507 : int32 = v2499 - 1
    let v2509 : string = v2470.[int v2486..int v2507]
    let v2513 : string = $"{v1992}{v2467}{v2509}"
    (* run_target_args'
    let v2518 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2520 : System.Guid = v2513 |> System.Guid 
    let _run_target_args'_v2518 = v2520 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2524 : System.Guid = v2513 |> System.Guid 
    let _run_target_args'_v2518 = v2524 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2528 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v2518 = v2528 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2532 : System.Guid = v2513 |> System.Guid 
    let _run_target_args'_v2518 = v2532 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2536 : System.Guid = v2513 |> System.Guid 
    let _run_target_args'_v2518 = v2536 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2540 : System.Guid = v2513 |> System.Guid 
    let _run_target_args'_v2518 = v2540 
    #endif
#else
    let v2544 : System.Guid = v2513 |> System.Guid 
    let _run_target_args'_v2518 = v2544 
    #endif
    let v2547 : System.Guid = _run_target_args'_v2518 
    let _run_target_args'_v569 = v2547 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2553 : string = method218()
    let v2555 : bool = v2553 = ""
    let v2557 : string =
        if v2555 then
            let v2556 : string = "M-d-y hh:mm:ss tt"
            v2556
        else
            v2553
    let v2558 : (string -> string) = v1.ToString
    let v2559 : string = v2558 v2557
    (* run_target_args'
    let v2578 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2579 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2580 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2579 
    let _run_target_args'_v2578 = v2580 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2582 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2578 = v2582 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2586 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2578 = v2586 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2590 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2578 = v2590 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2594 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2578 = v2594 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2597 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2578 = v2597 
    #endif
#else
    let v2598 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2578 = v2598 
    #endif
    let v2599 : System.TimeZoneInfo = _run_target_args'_v2578 
    (* run_target_args'
    let v2612 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v2616 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2617 : (System.DateTime -> int64) = _.Ticks
    let v2618 : int64 = v2617 v1
    let _run_target_args'_v2616 = v2618 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2619 : (System.DateTime -> int64) = _.Ticks
    let v2620 : int64 = v2619 v1
    let _run_target_args'_v2616 = v2620 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2622 : int64 = null |> unbox<int64>
    let _run_target_args'_v2616 = v2622 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2625 : (System.DateTime -> int64) = _.Ticks
    let v2626 : int64 = v2625 v1
    let _run_target_args'_v2616 = v2626 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2627 : (System.DateTime -> int64) = _.Ticks
    let v2628 : int64 = v2627 v1
    let _run_target_args'_v2616 = v2628 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2629 : (System.DateTime -> int64) = _.Ticks
    let v2630 : int64 = v2629 v1
    let _run_target_args'_v2616 = v2630 
    #endif
#else
    let v2631 : (System.DateTime -> int64) = _.Ticks
    let v2632 : int64 = v2631 v1
    let _run_target_args'_v2616 = v2632 
    #endif
    let v2633 : int64 = _run_target_args'_v2616 
    let v2653 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2654 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2633) v2653 
    let v2656 : System.TimeSpan = v2654 |> System.TimeSpan 
    let _run_target_args'_v2612 = v2656 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v2662 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2663 : (System.DateTime -> int64) = _.Ticks
    let v2664 : int64 = v2663 v1
    let _run_target_args'_v2662 = v2664 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2665 : (System.DateTime -> int64) = _.Ticks
    let v2666 : int64 = v2665 v1
    let _run_target_args'_v2662 = v2666 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2668 : int64 = null |> unbox<int64>
    let _run_target_args'_v2662 = v2668 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2671 : (System.DateTime -> int64) = _.Ticks
    let v2672 : int64 = v2671 v1
    let _run_target_args'_v2662 = v2672 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2673 : (System.DateTime -> int64) = _.Ticks
    let v2674 : int64 = v2673 v1
    let _run_target_args'_v2662 = v2674 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2675 : (System.DateTime -> int64) = _.Ticks
    let v2676 : int64 = v2675 v1
    let _run_target_args'_v2662 = v2676 
    #endif
#else
    let v2677 : (System.DateTime -> int64) = _.Ticks
    let v2678 : int64 = v2677 v1
    let _run_target_args'_v2662 = v2678 
    #endif
    let v2679 : int64 = _run_target_args'_v2662 
    let v2699 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v2700 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v2679) v2699 
    let v2702 : System.TimeSpan = v2700 |> System.TimeSpan 
    let _run_target_args'_v2612 = v2702 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2706 : US3 = US3_2
    let v2707 : US4 = US4_3(v2706)
    let v2708 : string = $"date_time.get_utc_offset / target: {v2707}"
    let v2709 : System.TimeSpan = failwith<System.TimeSpan> v2708
    let _run_target_args'_v2612 = v2709 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2713 : US3 = US3_0
    let v2714 : US4 = US4_4(v2713)
    let v2715 : string = $"date_time.get_utc_offset / target: {v2714}"
    let v2716 : System.TimeSpan = failwith<System.TimeSpan> v2715
    let _run_target_args'_v2612 = v2716 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2720 : US3 = US3_0
    let v2721 : US4 = US4_5(v2720)
    let v2722 : string = $"date_time.get_utc_offset / target: {v2721}"
    let v2723 : System.TimeSpan = failwith<System.TimeSpan> v2722
    let _run_target_args'_v2612 = v2723 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2726 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2731 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2732 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2733 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2732 
    let _run_target_args'_v2731 = v2733 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2735 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2731 = v2735 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2739 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2731 = v2739 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2743 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2731 = v2743 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2747 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2731 = v2747 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2750 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2731 = v2750 
    #endif
#else
    let v2751 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2731 = v2751 
    #endif
    let v2752 : System.TimeZoneInfo = _run_target_args'_v2731 
    let v2758 : (System.DateTime -> System.TimeSpan) = v2726 v2752
    let v2759 : System.TimeSpan = v2758 v1
    let _run_target_args'_v2612 = v2759 
    #endif
#else
    let v2760 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v2765 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2766 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v2767 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v2766 
    let _run_target_args'_v2765 = v2767 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2769 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2765 = v2769 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2773 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2765 = v2773 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2777 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2765 = v2777 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2781 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v2765 = v2781 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2784 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2765 = v2784 
    #endif
#else
    let v2785 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v2765 = v2785 
    #endif
    let v2786 : System.TimeZoneInfo = _run_target_args'_v2765 
    let v2792 : (System.DateTime -> System.TimeSpan) = v2760 v2786
    let v2793 : System.TimeSpan = v2792 v1
    let _run_target_args'_v2612 = v2793 
    #endif
    let v2794 : System.TimeSpan = _run_target_args'_v2612 
    let v2804 : (System.TimeSpan -> int32) = _.Hours
    let v2805 : int32 = v2804 v2794
    let v2808 : bool = v2805 > 0
    let v2809 : uint8 =
        if v2808 then
            1uy
        else
            0uy
    let v2810 : string = method219()
    (* run_target_args'
    let v2864 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2865 : string = "$0.toString($1)"
    let v2866 : string = Fable.Core.RustInterop.emitRustExpr struct (v2794, v2810) v2865 
    let _run_target_args'_v2864 = v2866 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2867 : string = "$0.toString($1)"
    let v2868 : string = Fable.Core.RustInterop.emitRustExpr struct (v2794, v2810) v2867 
    let _run_target_args'_v2864 = v2868 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2869 : string = "$0.toString($1)"
    let v2870 : string = Fable.Core.RustInterop.emitRustExpr struct (v2794, v2810) v2869 
    let _run_target_args'_v2864 = v2870 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2871 : string = v2794.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2864 = v2871 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2872 : string = v2794.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v2864 = v2872 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2874 : string = v2794.ToString v2810 
    let _run_target_args'_v2864 = v2874 
    #endif
#else
    let v2927 : string = v2794.ToString v2810 
    let _run_target_args'_v2864 = v2927 
    #endif
    let v2979 : string = _run_target_args'_v2864 
    let v3034 : string = $"{v2809}{v2979}"
    let v3036 : (System.Guid -> string) = _.ToString()
    let v3037 : string = v3036 v0
    let v3040 : int32 = v2559.Length
    let v3041 : int32 = v3034.Length
    let v3042 : int32 = v3040 + v3041
    let v3044 : (string -> int32) = String.length
    let v3045 : int32 = v3044 v3037
    let v3053 : int32 = v3042 |> int32 
    let v3066 : int32 = v3045 |> int32 
    let v3074 : int32 = v3066 - 1
    let v3076 : string = v3037.[int v3053..int v3074]
    let v3080 : string = $"{v2559}{v3034}{v3076}"
    (* run_target_args'
    let v3085 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3087 : System.Guid = v3080 |> System.Guid 
    let _run_target_args'_v3085 = v3087 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3091 : System.Guid = v3080 |> System.Guid 
    let _run_target_args'_v3085 = v3091 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3095 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3085 = v3095 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3099 : System.Guid = v3080 |> System.Guid 
    let _run_target_args'_v3085 = v3099 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3103 : System.Guid = v3080 |> System.Guid 
    let _run_target_args'_v3085 = v3103 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3107 : System.Guid = v3080 |> System.Guid 
    let _run_target_args'_v3085 = v3107 
    #endif
#else
    let v3111 : System.Guid = v3080 |> System.Guid 
    let _run_target_args'_v3085 = v3111 
    #endif
    let v3114 : System.Guid = _run_target_args'_v3085 
    let _run_target_args'_v569 = v3114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3120 : string = method218()
    let v3122 : bool = v3120 = ""
    let v3124 : string =
        if v3122 then
            let v3123 : string = "M-d-y hh:mm:ss tt"
            v3123
        else
            v3120
    let v3125 : (string -> string) = v1.ToString
    let v3126 : string = v3125 v3124
    (* run_target_args'
    let v3145 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3146 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3147 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3146 
    let _run_target_args'_v3145 = v3147 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3149 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3145 = v3149 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3153 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3145 = v3153 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3157 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3145 = v3157 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3161 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3145 = v3161 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3164 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3145 = v3164 
    #endif
#else
    let v3165 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3145 = v3165 
    #endif
    let v3166 : System.TimeZoneInfo = _run_target_args'_v3145 
    (* run_target_args'
    let v3179 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3183 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3184 : (System.DateTime -> int64) = _.Ticks
    let v3185 : int64 = v3184 v1
    let _run_target_args'_v3183 = v3185 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3186 : (System.DateTime -> int64) = _.Ticks
    let v3187 : int64 = v3186 v1
    let _run_target_args'_v3183 = v3187 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3189 : int64 = null |> unbox<int64>
    let _run_target_args'_v3183 = v3189 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3192 : (System.DateTime -> int64) = _.Ticks
    let v3193 : int64 = v3192 v1
    let _run_target_args'_v3183 = v3193 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3194 : (System.DateTime -> int64) = _.Ticks
    let v3195 : int64 = v3194 v1
    let _run_target_args'_v3183 = v3195 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3196 : (System.DateTime -> int64) = _.Ticks
    let v3197 : int64 = v3196 v1
    let _run_target_args'_v3183 = v3197 
    #endif
#else
    let v3198 : (System.DateTime -> int64) = _.Ticks
    let v3199 : int64 = v3198 v1
    let _run_target_args'_v3183 = v3199 
    #endif
    let v3200 : int64 = _run_target_args'_v3183 
    let v3220 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3221 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3200) v3220 
    let v3223 : System.TimeSpan = v3221 |> System.TimeSpan 
    let _run_target_args'_v3179 = v3223 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3229 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3230 : (System.DateTime -> int64) = _.Ticks
    let v3231 : int64 = v3230 v1
    let _run_target_args'_v3229 = v3231 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3232 : (System.DateTime -> int64) = _.Ticks
    let v3233 : int64 = v3232 v1
    let _run_target_args'_v3229 = v3233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3235 : int64 = null |> unbox<int64>
    let _run_target_args'_v3229 = v3235 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3238 : (System.DateTime -> int64) = _.Ticks
    let v3239 : int64 = v3238 v1
    let _run_target_args'_v3229 = v3239 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3240 : (System.DateTime -> int64) = _.Ticks
    let v3241 : int64 = v3240 v1
    let _run_target_args'_v3229 = v3241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3242 : (System.DateTime -> int64) = _.Ticks
    let v3243 : int64 = v3242 v1
    let _run_target_args'_v3229 = v3243 
    #endif
#else
    let v3244 : (System.DateTime -> int64) = _.Ticks
    let v3245 : int64 = v3244 v1
    let _run_target_args'_v3229 = v3245 
    #endif
    let v3246 : int64 = _run_target_args'_v3229 
    let v3266 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3267 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3246) v3266 
    let v3269 : System.TimeSpan = v3267 |> System.TimeSpan 
    let _run_target_args'_v3179 = v3269 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3273 : US3 = US3_2
    let v3274 : US4 = US4_3(v3273)
    let v3275 : string = $"date_time.get_utc_offset / target: {v3274}"
    let v3276 : System.TimeSpan = failwith<System.TimeSpan> v3275
    let _run_target_args'_v3179 = v3276 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3280 : US3 = US3_0
    let v3281 : US4 = US4_4(v3280)
    let v3282 : string = $"date_time.get_utc_offset / target: {v3281}"
    let v3283 : System.TimeSpan = failwith<System.TimeSpan> v3282
    let _run_target_args'_v3179 = v3283 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3287 : US3 = US3_0
    let v3288 : US4 = US4_5(v3287)
    let v3289 : string = $"date_time.get_utc_offset / target: {v3288}"
    let v3290 : System.TimeSpan = failwith<System.TimeSpan> v3289
    let _run_target_args'_v3179 = v3290 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3293 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3298 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3299 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3300 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3299 
    let _run_target_args'_v3298 = v3300 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3302 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3298 = v3302 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3306 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3298 = v3306 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3310 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3298 = v3310 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3314 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3298 = v3314 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3317 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3298 = v3317 
    #endif
#else
    let v3318 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3298 = v3318 
    #endif
    let v3319 : System.TimeZoneInfo = _run_target_args'_v3298 
    let v3325 : (System.DateTime -> System.TimeSpan) = v3293 v3319
    let v3326 : System.TimeSpan = v3325 v1
    let _run_target_args'_v3179 = v3326 
    #endif
#else
    let v3327 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3332 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3333 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3334 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3333 
    let _run_target_args'_v3332 = v3334 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3336 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3332 = v3336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3340 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3332 = v3340 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3344 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3332 = v3344 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3348 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3332 = v3348 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3351 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3332 = v3351 
    #endif
#else
    let v3352 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3332 = v3352 
    #endif
    let v3353 : System.TimeZoneInfo = _run_target_args'_v3332 
    let v3359 : (System.DateTime -> System.TimeSpan) = v3327 v3353
    let v3360 : System.TimeSpan = v3359 v1
    let _run_target_args'_v3179 = v3360 
    #endif
    let v3361 : System.TimeSpan = _run_target_args'_v3179 
    let v3371 : (System.TimeSpan -> int32) = _.Hours
    let v3372 : int32 = v3371 v3361
    let v3375 : bool = v3372 > 0
    let v3376 : uint8 =
        if v3375 then
            1uy
        else
            0uy
    let v3377 : string = method219()
    (* run_target_args'
    let v3431 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3432 : string = "$0.toString($1)"
    let v3433 : string = Fable.Core.RustInterop.emitRustExpr struct (v3361, v3377) v3432 
    let _run_target_args'_v3431 = v3433 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3434 : string = "$0.toString($1)"
    let v3435 : string = Fable.Core.RustInterop.emitRustExpr struct (v3361, v3377) v3434 
    let _run_target_args'_v3431 = v3435 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3436 : string = "$0.toString($1)"
    let v3437 : string = Fable.Core.RustInterop.emitRustExpr struct (v3361, v3377) v3436 
    let _run_target_args'_v3431 = v3437 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3438 : string = v3361.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3431 = v3438 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3439 : string = v3361.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3431 = v3439 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3441 : string = v3361.ToString v3377 
    let _run_target_args'_v3431 = v3441 
    #endif
#else
    let v3494 : string = v3361.ToString v3377 
    let _run_target_args'_v3431 = v3494 
    #endif
    let v3546 : string = _run_target_args'_v3431 
    let v3601 : string = $"{v3376}{v3546}"
    let v3603 : (System.Guid -> string) = _.ToString()
    let v3604 : string = v3603 v0
    let v3607 : int32 = v3126.Length
    let v3608 : int32 = v3601.Length
    let v3609 : int32 = v3607 + v3608
    let v3611 : (string -> int32) = String.length
    let v3612 : int32 = v3611 v3604
    let v3620 : int32 = v3609 |> int32 
    let v3633 : int32 = v3612 |> int32 
    let v3641 : int32 = v3633 - 1
    let v3643 : string = v3604.[int v3620..int v3641]
    let v3647 : string = $"{v3126}{v3601}{v3643}"
    (* run_target_args'
    let v3652 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3654 : System.Guid = v3647 |> System.Guid 
    let _run_target_args'_v3652 = v3654 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3658 : System.Guid = v3647 |> System.Guid 
    let _run_target_args'_v3652 = v3658 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3662 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v3652 = v3662 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3666 : System.Guid = v3647 |> System.Guid 
    let _run_target_args'_v3652 = v3666 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3670 : System.Guid = v3647 |> System.Guid 
    let _run_target_args'_v3652 = v3670 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3674 : System.Guid = v3647 |> System.Guid 
    let _run_target_args'_v3652 = v3674 
    #endif
#else
    let v3678 : System.Guid = v3647 |> System.Guid 
    let _run_target_args'_v3652 = v3678 
    #endif
    let v3681 : System.Guid = _run_target_args'_v3652 
    let _run_target_args'_v569 = v3681 
    #endif
#else
    let v3687 : string = method218()
    let v3689 : bool = v3687 = ""
    let v3691 : string =
        if v3689 then
            let v3690 : string = "M-d-y hh:mm:ss tt"
            v3690
        else
            v3687
    let v3692 : (string -> string) = v1.ToString
    let v3693 : string = v3692 v3691
    (* run_target_args'
    let v3712 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3713 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3714 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3713 
    let _run_target_args'_v3712 = v3714 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3716 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3712 = v3716 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3720 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3712 = v3720 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3724 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3712 = v3724 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3728 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3712 = v3728 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3731 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3712 = v3731 
    #endif
#else
    let v3732 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3712 = v3732 
    #endif
    let v3733 : System.TimeZoneInfo = _run_target_args'_v3712 
    (* run_target_args'
    let v3746 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v3750 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3751 : (System.DateTime -> int64) = _.Ticks
    let v3752 : int64 = v3751 v1
    let _run_target_args'_v3750 = v3752 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3753 : (System.DateTime -> int64) = _.Ticks
    let v3754 : int64 = v3753 v1
    let _run_target_args'_v3750 = v3754 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3756 : int64 = null |> unbox<int64>
    let _run_target_args'_v3750 = v3756 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3759 : (System.DateTime -> int64) = _.Ticks
    let v3760 : int64 = v3759 v1
    let _run_target_args'_v3750 = v3760 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3761 : (System.DateTime -> int64) = _.Ticks
    let v3762 : int64 = v3761 v1
    let _run_target_args'_v3750 = v3762 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3763 : (System.DateTime -> int64) = _.Ticks
    let v3764 : int64 = v3763 v1
    let _run_target_args'_v3750 = v3764 
    #endif
#else
    let v3765 : (System.DateTime -> int64) = _.Ticks
    let v3766 : int64 = v3765 v1
    let _run_target_args'_v3750 = v3766 
    #endif
    let v3767 : int64 = _run_target_args'_v3750 
    let v3787 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3788 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3767) v3787 
    let v3790 : System.TimeSpan = v3788 |> System.TimeSpan 
    let _run_target_args'_v3746 = v3790 
    #endif
#if FABLE_COMPILER_RUST && WASM
    (* run_target_args'
    let v3796 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3797 : (System.DateTime -> int64) = _.Ticks
    let v3798 : int64 = v3797 v1
    let _run_target_args'_v3796 = v3798 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3799 : (System.DateTime -> int64) = _.Ticks
    let v3800 : int64 = v3799 v1
    let _run_target_args'_v3796 = v3800 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3802 : int64 = null |> unbox<int64>
    let _run_target_args'_v3796 = v3802 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3805 : (System.DateTime -> int64) = _.Ticks
    let v3806 : int64 = v3805 v1
    let _run_target_args'_v3796 = v3806 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3807 : (System.DateTime -> int64) = _.Ticks
    let v3808 : int64 = v3807 v1
    let _run_target_args'_v3796 = v3808 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3809 : (System.DateTime -> int64) = _.Ticks
    let v3810 : int64 = v3809 v1
    let _run_target_args'_v3796 = v3810 
    #endif
#else
    let v3811 : (System.DateTime -> int64) = _.Ticks
    let v3812 : int64 = v3811 v1
    let _run_target_args'_v3796 = v3812 
    #endif
    let v3813 : int64 = _run_target_args'_v3796 
    let v3833 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v3834 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v3813) v3833 
    let v3836 : System.TimeSpan = v3834 |> System.TimeSpan 
    let _run_target_args'_v3746 = v3836 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3840 : US3 = US3_2
    let v3841 : US4 = US4_3(v3840)
    let v3842 : string = $"date_time.get_utc_offset / target: {v3841}"
    let v3843 : System.TimeSpan = failwith<System.TimeSpan> v3842
    let _run_target_args'_v3746 = v3843 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3847 : US3 = US3_0
    let v3848 : US4 = US4_4(v3847)
    let v3849 : string = $"date_time.get_utc_offset / target: {v3848}"
    let v3850 : System.TimeSpan = failwith<System.TimeSpan> v3849
    let _run_target_args'_v3746 = v3850 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3854 : US3 = US3_0
    let v3855 : US4 = US4_5(v3854)
    let v3856 : string = $"date_time.get_utc_offset / target: {v3855}"
    let v3857 : System.TimeSpan = failwith<System.TimeSpan> v3856
    let _run_target_args'_v3746 = v3857 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3860 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3865 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3866 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3867 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3866 
    let _run_target_args'_v3865 = v3867 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3869 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3865 = v3869 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3873 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3865 = v3873 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3877 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3865 = v3877 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3881 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3865 = v3881 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3884 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3865 = v3884 
    #endif
#else
    let v3885 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3865 = v3885 
    #endif
    let v3886 : System.TimeZoneInfo = _run_target_args'_v3865 
    let v3892 : (System.DateTime -> System.TimeSpan) = v3860 v3886
    let v3893 : System.TimeSpan = v3892 v1
    let _run_target_args'_v3746 = v3893 
    #endif
#else
    let v3894 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    (* run_target_args'
    let v3899 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3900 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v3901 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v3900 
    let _run_target_args'_v3899 = v3901 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3903 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3899 = v3903 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3907 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3899 = v3907 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3911 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3899 = v3911 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3915 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _run_target_args'_v3899 = v3915 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3918 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3899 = v3918 
    #endif
#else
    let v3919 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _run_target_args'_v3899 = v3919 
    #endif
    let v3920 : System.TimeZoneInfo = _run_target_args'_v3899 
    let v3926 : (System.DateTime -> System.TimeSpan) = v3894 v3920
    let v3927 : System.TimeSpan = v3926 v1
    let _run_target_args'_v3746 = v3927 
    #endif
    let v3928 : System.TimeSpan = _run_target_args'_v3746 
    let v3938 : (System.TimeSpan -> int32) = _.Hours
    let v3939 : int32 = v3938 v3928
    let v3942 : bool = v3939 > 0
    let v3943 : uint8 =
        if v3942 then
            1uy
        else
            0uy
    let v3944 : string = method219()
    (* run_target_args'
    let v3998 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3999 : string = "$0.toString($1)"
    let v4000 : string = Fable.Core.RustInterop.emitRustExpr struct (v3928, v3944) v3999 
    let _run_target_args'_v3998 = v4000 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4001 : string = "$0.toString($1)"
    let v4002 : string = Fable.Core.RustInterop.emitRustExpr struct (v3928, v3944) v4001 
    let _run_target_args'_v3998 = v4002 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4003 : string = "$0.toString($1)"
    let v4004 : string = Fable.Core.RustInterop.emitRustExpr struct (v3928, v3944) v4003 
    let _run_target_args'_v3998 = v4004 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4005 : string = v3928.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3998 = v4005 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4006 : string = v3928.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _run_target_args'_v3998 = v4006 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4008 : string = v3928.ToString v3944 
    let _run_target_args'_v3998 = v4008 
    #endif
#else
    let v4061 : string = v3928.ToString v3944 
    let _run_target_args'_v3998 = v4061 
    #endif
    let v4113 : string = _run_target_args'_v3998 
    let v4168 : string = $"{v3943}{v4113}"
    let v4170 : (System.Guid -> string) = _.ToString()
    let v4171 : string = v4170 v0
    let v4174 : int32 = v3693.Length
    let v4175 : int32 = v4168.Length
    let v4176 : int32 = v4174 + v4175
    let v4178 : (string -> int32) = String.length
    let v4179 : int32 = v4178 v4171
    let v4187 : int32 = v4176 |> int32 
    let v4200 : int32 = v4179 |> int32 
    let v4208 : int32 = v4200 - 1
    let v4210 : string = v4171.[int v4187..int v4208]
    let v4214 : string = $"{v3693}{v4168}{v4210}"
    (* run_target_args'
    let v4219 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4221 : System.Guid = v4214 |> System.Guid 
    let _run_target_args'_v4219 = v4221 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4225 : System.Guid = v4214 |> System.Guid 
    let _run_target_args'_v4219 = v4225 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4229 : System.Guid = null |> unbox<System.Guid>
    let _run_target_args'_v4219 = v4229 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4233 : System.Guid = v4214 |> System.Guid 
    let _run_target_args'_v4219 = v4233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4237 : System.Guid = v4214 |> System.Guid 
    let _run_target_args'_v4219 = v4237 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4241 : System.Guid = v4214 |> System.Guid 
    let _run_target_args'_v4219 = v4241 
    #endif
#else
    let v4245 : System.Guid = v4214 |> System.Guid 
    let _run_target_args'_v4219 = v4245 
    #endif
    let v4248 : System.Guid = _run_target_args'_v4219 
    let _run_target_args'_v569 = v4248 
    #endif
    let v4254 : System.Guid = _run_target_args'_v569 
    v4254
and method220 (v0 : string, v1 : string) : unit =
    let v2 : bool = method39(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method78(v0)
        ()
    let v5 : string option = method41(v1)
    let v8 : string = ""
    let v9 : string = v5 |> Option.defaultValue v8 
    let v12 : bool = method39(v9)
    let v13 : bool = v12 = false
    if v13 then
        let v14 : System.IDisposable = method78(v9)
        ()
    let v15 : bool = method39(v1)
    let v26 : bool =
        if v15 then
            let v16 : Result<std_path_PathBuf, std_io_Error> = method47(v1)
            (* run_target_args'
            let v17 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v16 v18 
            let _run_target_args'_v17 = v19 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v16 v20 
            let _run_target_args'_v17 = v21 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v22 : string = "$0.is_err()"
            let v23 : bool = Fable.Core.RustInterop.emitRustExpr v16 v22 
            let _run_target_args'_v17 = v23 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v17 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v17 = true 
            #endif
#else
            let _run_target_args'_v17 = true 
            #endif
            let v24 : bool = _run_target_args'_v17 
            v24
        else
            false
    if v26 then
        let v27 : bool = true
        method89(v27, v1)
    let v28 : bool = method39(v1)
    let v29 : bool = v28 = false
    if v29 then
        (* run_target_args'
        let v30 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v31 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        let v33 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v34 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v33 
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v35 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        #endif
        // run_target_args' is_unit
        ()
and method222 () : string =
    let v0 : string = "("
    v0
and method223 () : string =
    let v0 : string = " "
    v0
and method224 (v0 : US40) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v4 : string = $"%A{v0}"
    let v8 : string = $"{v4}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v2, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = v2.l0
    v16
and method228 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "is_error"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v41 : string =
        if v0 then
            let v39 : string = "true"
            v39
        else
            let v40 : string = "false"
            v40
    let v43 : string = $"{v41}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v5, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v53 : string = "; "
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v64 : string = "retry"
    let v65 : string = $"{v64}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v5, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v74 : string = $"{v30}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v5, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v83 : string = $"{v1}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v5, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v92 : string = $"{v53}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v102 : string = "result"
    let v103 : string = $"{v102}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v112 : string = $"{v30}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v121 : string = $"{v2}"
    let v124 : unit = ()
    let v125 : (unit -> unit) = closure7(v5, v121)
    let v126 : unit = (fun () -> v125 (); v124) ()
    let v131 : string = ", "
    let v132 : string = $"{v131}"
    let v135 : unit = ()
    let v136 : (unit -> unit) = closure7(v5, v132)
    let v137 : unit = (fun () -> v136 (); v135) ()
    let v141 : string = $"{v3}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v5, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v151 : string = " }"
    let v152 : string = $"{v151}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v5, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v160 : string = v5.l0
    v160
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method228(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "common.retry_fn' / loop"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure88 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method12()
        let v50 : string = $"{v1}/{v0}"
        let v51 : string = method227(v30, v31, v32, v33, v34, v35, v48, v49, v4, v50, v2, v3)
        method19(v51)
and method226 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method101(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US44 =
        if v11 then
            US44_0(v9, v10)
        else
            US44_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US44_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US44_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure88(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v78 : uint8 = v8 + 1uy
        method226(v0, v1, v2, v3, v4, v5, v6, v7, v78)
and method225 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method226(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method221 (v0 : US39, v1 : string, v2 : string, v3 : string, v4 : US13) : struct (int32 * string) =
    let v6 : System.Threading.CancellationToken option = None
    let v9 : (struct (string * string) []) = [||]
    let v11 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v15 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v19 : string option = None
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "cfg!(windows)"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr () v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "cfg!(windows)"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr () v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "cfg!(windows)"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : US3 = US3_0
    let v34 : US4 = US4_4(v33)
    let v35 : string = $"platform.is_windows / target: {v34}"
    let v36 : bool = failwith<bool> v35
    let _run_target_args'_v26 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : US3 = US3_0
    let v38 : US4 = US4_5(v37)
    let v39 : string = $"platform.is_windows / target: {v38}"
    let v40 : bool = failwith<bool> v39
    let _run_target_args'_v26 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v42 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v43 : bool = v42 v41
    let _run_target_args'_v26 = v43 
    #endif
#else
    let v44 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v45 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v46 : bool = v45 v44
    let _run_target_args'_v26 = v46 
    #endif
    let v47 : bool = _run_target_args'_v26 
    let v55 : string =
        if v47 then
            let v53 : string = "_WINDOWS"
            v53
        else
            let v54 : string = "_LINUX"
            v54
    let v56 : string = $" --define {v55}"
    let v174 : string =
        match v0 with
        | US39_1 -> (* None *)
            let v172 : string = ""
            v172
        | US39_0(v57) -> (* Some *)
            let v59 : string = Unchecked.defaultof<_>
            let v63 : string = Unchecked.defaultof<_>
            let v68 : bool =
                match v57 with
                | US40_0(v66) -> (* Wasm *)
                    let v67 : bool = v59 = v66
                    v67
                | _ ->
                    false
            let v110 : US5 =
                if v68 then
                    let v69 : string = "Wasm"
                    US5_0(v69)
                else
                    (* run_target_args'
                    let v73 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v74 : string = method222()
                    let _run_target_args'_v73 = v74 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : string = method222()
                    let _run_target_args'_v73 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : string = method222()
                    let _run_target_args'_v73 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v77 : string = method223()
                    let _run_target_args'_v73 = v77 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v78 : string = method223()
                    let _run_target_args'_v73 = v78 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v79 : string = method223()
                    let _run_target_args'_v73 = v79 
                    #endif
#else
                    let v80 : string = method223()
                    let _run_target_args'_v73 = v80 
                    #endif
                    let v81 : string = _run_target_args'_v73 
                    let v86 : US40 = US40_0(v59)
                    let v87 : string = method224(v86)
                    let v94 : (string []) = v87.Split v81 
                    let v98 : string = v94.[int 0]
                    let v101 : string = method224(v57)
                    let v103 : bool = v101.StartsWith (v98, false, null)
                    if v103 then
                        let v106 : string = "Wasm"
                        US5_0(v106)
                    else
                        US5_1
            let v164 : US5 =
                match v110 with
                | US5_1 -> (* None *)
                    let v115 : bool =
                        match v57 with
                        | US40_1(v113) -> (* Contract *)
                            let v114 : bool = v63 = v113
                            v114
                        | _ ->
                            false
                    let v157 : US5 =
                        if v115 then
                            let v116 : string = "Contract"
                            US5_0(v116)
                        else
                            (* run_target_args'
                            let v120 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v121 : string = method222()
                            let _run_target_args'_v120 = v121 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v122 : string = method222()
                            let _run_target_args'_v120 = v122 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v123 : string = method222()
                            let _run_target_args'_v120 = v123 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v124 : string = method223()
                            let _run_target_args'_v120 = v124 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v125 : string = method223()
                            let _run_target_args'_v120 = v125 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v126 : string = method223()
                            let _run_target_args'_v120 = v126 
                            #endif
#else
                            let v127 : string = method223()
                            let _run_target_args'_v120 = v127 
                            #endif
                            let v128 : string = _run_target_args'_v120 
                            let v133 : US40 = US40_1(v63)
                            let v134 : string = method224(v133)
                            let v141 : (string []) = v134.Split v128 
                            let v145 : string = v141.[int 0]
                            let v148 : string = method224(v57)
                            let v150 : bool = v148.StartsWith (v145, false, null)
                            if v150 then
                                let v153 : string = "Contract"
                                US5_0(v153)
                            else
                                US5_1
                    match v157 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v158) -> (* Some *)
                        US5_0(v158)
                | US5_0(v111) -> (* Some *)
                    US5_0(v111)
            let v168 : string =
                match v164 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v165) -> (* Some *)
                    v165
            let v169 : (unit -> string) = v168.ToUpper
            let v170 : string = v169 ()
            let v171 : string = $" --define {v170}"
            v171
    let v175 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v56}{v174}"
    let v187 : Result<string, string> =
        match v4 with
        | US13_1(v181) -> (* Error *)
            let v183 : Result<string, string> = Error v181 
            v183
        | US13_0(v176) -> (* Ok *)
            let v178 : Result<string, string> = Ok v176 
            v178
    (* run_target_args'
    let v189 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v190 : string = "$0.ok()"
    let v191 : string option = Fable.Core.RustInterop.emitRustExpr v187 v190 
    let _run_target_args'_v189 = v191 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v192 : string = "$0.ok()"
    let v193 : string option = Fable.Core.RustInterop.emitRustExpr v187 v192 
    let _run_target_args'_v189 = v193 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v194 : string = "$0.ok()"
    let v195 : string option = Fable.Core.RustInterop.emitRustExpr v187 v194 
    let _run_target_args'_v189 = v195 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v196 : string option = match v187 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v189 = v196 
    #endif
#if FABLE_COMPILER_PYTHON
    let v197 : string option = match v187 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v189 = v197 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v198 : string option = match v187 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v189 = v198 
    #endif
#else
    let v199 : string option = match v187 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v189 = v199 
    #endif
    let v200 : string option = _run_target_args'_v189 
    let v203 : uint8 = 3uy
    let v204 : bool = true
    method225(v203, v175, v6, v9, v11, v15, v204, v200)
and method230 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "dotnet_fable_result"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method229 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method230(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / dotnet fable error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure89 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method229(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure90 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : string = "near-sdk"
    let v6 : bool = v2.Contains v5 
    v6
and method231 () : (std_string_String -> bool) =
    closure90()
and method232 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method233 () : string =
    let v0 : string = "("
    v0
and method234 () : string =
    let v0 : string = "("
    v0
and method236 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    (* run_target_args'
    let v6 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _run_target_args'_v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let _run_target_args'_v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v18 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v22 
    #endif
#else
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v6 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v6 
    (* run_target_args'
    let v39 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v40 
    let _run_target_args'_v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v42 
    let _run_target_args'_v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v44 
    let _run_target_args'_v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v55 
    #endif
#else
    let v59 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v39 = v59 
    #endif
    let v62 : std_string_String = _run_target_args'_v39 
    let v68 : string = "true; let _capture_move = (move || { //"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "Box::new($0)"
    let v71 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v62 v70 
    let v72 : string = "Box::leak($0)"
    let v73 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "$0"
    let v75 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = $"$0.captures_iter(v73)"
    let v77 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "true; let _regex_captures : Vec<_> = v77.map(|x| { //"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = $"x"
    let v81 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "Box::new($0)"
    let v83 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "Box::leak($0)"
    let v85 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = $"$0.capture_names()"
    let v87 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v86 
    let v88 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v87.map(|x| { //"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "x.unwrap_or(\"\").to_string().into()"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "$0.clone()"
    let v93 : string = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = $"v85.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v95 : string = Fable.Core.RustInterop.emitRustExpr v91 v94 
    let v97 : (string * string) = v93, v95 
    let v100 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let v102 : string = "_regex_captures"
    let v103 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : string = "true; $0 }).collect::<Vec<_>>()"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v103 v104 
    let v106 : string = "_regex_captures"
    let v107 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : string = "true; $0 })()"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "_capture_move"
    let v111 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v110 
    v111
and closure91 () (v0 : std_collections_HashMap<string, string>) : US45 =
    US45_0(v0)
and method237 () : (std_collections_HashMap<string, string> -> US45) =
    closure91()
and method238 () : string =
    let v0 : string = "a"
    v0
and closure92 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method12()
        let v49 : string = $"{v0}/{3uy}"
        let v50 : string = method227(v29, v30, v31, v32, v33, v34, v47, v48, v3, v49, v1, v2)
        method19(v50)
and method235 (v0 : US13, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v7 : (struct (string * string) []) = [||]
    let v9 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v13 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v17 : string option = None
    let v20 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v32 : Result<string, string> =
        match v0 with
        | US13_1(v26) -> (* Error *)
            let v28 : Result<string, string> = Error v26 
            v28
        | US13_0(v21) -> (* Ok *)
            let v23 : Result<string, string> = Ok v21 
            v23
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.ok()"
    let v36 : string option = Fable.Core.RustInterop.emitRustExpr v32 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.ok()"
    let v38 : string option = Fable.Core.RustInterop.emitRustExpr v32 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.ok()"
    let v40 : string option = Fable.Core.RustInterop.emitRustExpr v32 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : string option = match v32 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : string option = _run_target_args'_v34 
    let v48 : bool = true
    let struct (v49 : int32, v50 : string) = method101(v20, v4, v7, v9, v13, v48, v45)
    let v53 : string = "failed to load manifest for workspace member"
    let v54 : bool = v50.Contains v53 
    let v57 : bool = v54 = false
    let v227 : US44 =
        if v57 then
            let v58 : bool = v49 = 0
            if v58 then
                US44_0(v49, v50)
            else
                US44_1(v49, v50)
        else
            let v62 : string = $"regex::Regex::new(&$0)"
            let v63 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v64 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v63 v62 
            (* run_target_args'
            let v66 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v67 : string = "$0.unwrap()"
            let v68 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v67 
            let _run_target_args'_v66 = v68 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v69 : string = "$0.unwrap()"
            let v70 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v69 
            let _run_target_args'_v66 = v70 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v71 : string = "$0.unwrap()"
            let v72 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v64 v71 
            let _run_target_args'_v66 = v72 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v73 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v73 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v75 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v75 
            #endif
#else
            let v76 : regex_Regex = match v64 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v66 = v76 
            #endif
            let v77 : regex_Regex = _run_target_args'_v66 
            let v80 : Vec<std_collections_HashMap<string, string>> = method236(v50, v77)
            let v81 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v82 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v80 v81 
            let v83 : std_collections_HashMap<string, string> option = v82 |> Array.tryItem 0 
            let v86 : (std_collections_HashMap<string, string> -> US45) = method237()
            let v87 : US45 option = v83 |> Option.map v86 
            let v107 : US45 = US45_1
            let v108 : US45 = v87 |> Option.defaultValue v107 
            let v147 : US46 =
                match v108 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v112) -> (* Some *)
                    let v113 : string = method238()
                    let v114 : string = "std::collections::HashMap::get(&$0, &v113).map(|x| x).cloned()"
                    let v115 : string option = Fable.Core.RustInterop.emitRustExpr v112 v114 
                    let v118 : (string -> US5) = method6()
                    let v119 : US5 option = v115 |> Option.map v118 
                    let v139 : US5 = US5_1
                    let v140 : US5 = v119 |> Option.defaultValue v139 
                    US46_0(v140)
            let v154 : US5 =
                match v147 with
                | US46_0(v148) -> (* Some *)
                    match v148 with
                    | US5_0(v149) -> (* Some *)
                        US5_0(v149)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v154 with
            | US5_1 -> (* None *)
                US44_1(v49, v50)
            | US5_0(v156) -> (* Some *)
                let v157 : bool = method38(v156)
                let v158 : bool = v157 = false
                if v158 then
                    let v159 : string option = method41(v156)
                    let v162 : string = ""
                    let v163 : string = v159 |> Option.defaultValue v162 
                    let v166 : System.IDisposable = method78(v163)
                    (* run_target_args'
                    let v169 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v170 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v169 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v169 = v171 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : System.DateTime = null |> unbox<System.DateTime>
                    let _run_target_args'_v169 = v173 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v176 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v169 = v176 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v177 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v169 = v177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v178 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v169 = v178 
                    #endif
#else
                    let v179 : System.DateTime = System.DateTime.Now
                    let _run_target_args'_v169 = v179 
                    #endif
                    let v180 : System.DateTime = _run_target_args'_v169 
                    let v186 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v187 : System.Guid = v186 ()
                    let v190 : System.Guid = method215(v187, v180)
                    let v192 : (System.Guid -> string) = _.ToString()
                    let v193 : string = v192 v190
                    let v196 : string = $"[package]"
                    let v197 : string = $"name = \"spiral_{v193}\""
                    let v198 : string = "\n"
                    let v199 : string = v196 + v198 
                    let v200 : string = v199 + v197 
                    let v201 : string = $"version = \"0.0.1\""
                    let v202 : string = v200 + v198 
                    let v203 : string = v202 + v201 
                    let v204 : string = $"edition = \"2021\""
                    let v205 : string = v203 + v198 
                    let v206 : string = v205 + v204 
                    let v207 : string = $""
                    let v208 : string = v206 + v198 
                    let v209 : string = v208 + v207 
                    let v210 : string = $"[[bin]]"
                    let v211 : string = v209 + v198 
                    let v212 : string = v211 + v210 
                    let v213 : string = $"name = \"spiral_{v193}\""
                    let v214 : string = v212 + v198 
                    let v215 : string = v214 + v213 
                    let v216 : string = $"path = \"spiral.rs\""
                    let v217 : string = v215 + v198 
                    let v218 : string = v217 + v216 
                    (* run_target_args'
                    let v219 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v220 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v156, v218) v220 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    #endif
#if FABLE_COMPILER_PYTHON
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    #endif
#else
                    System.IO.File.WriteAllText (v156, v218)
                    #endif
                    // run_target_args' is_unit
                    ()
                let v221 : bool = v49 = 0
                if v221 then
                    US44_0(v49, v50)
                else
                    US44_1(v49, v50)
    let struct (v235 : bool, v236 : int32, v237 : string) =
        match v227 with
        | US44_1(v230, v231) -> (* Error *)
            struct (true, v230, v231)
        | US44_0(v228, v229) -> (* Ok *)
            struct (false, v228, v229)
    let v238 : bool = v235 = false
    let v240 : bool =
        if v238 then
            true
        else
            let v239 : bool = v2 >= 3uy
            v239
    if v240 then
        struct (v236, v237)
    else
        let v241 : unit = ()
        let v242 : (unit -> unit) = closure92(v2, v236, v237, v235)
        let v243 : unit = (fun () -> v242 (); v241) ()
        let v291 : uint8 = v2 + 1uy
        method235(v0, v1, v291)
and method240 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "cargo_fmt_result"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"{v1}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v3, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v88 : string = " }"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v3, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = v3.l0
    v97
and method239 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method240(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_rust / cargo fmt error"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure93 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method239(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method241 () : string =
    let v0 : string = "{"
    v0
and closure94 () (v0 : string) : string =
    v0
and closure95 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure96 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method243 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v13 : unit = ()
    let v14 : (unit -> unit) = closure7(v6, v10)
    let v15 : unit = (fun () -> v14 (); v13) ()
    let v20 : string = "exit_code"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v6, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v31 : string = " = "
    let v32 : string = $"{v31}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v6, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v41 : string = $"{v0}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v6, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v62 : string = "new_code_path"
    let v63 : string = $"{v62}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v6, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v72 : string = $"{v31}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v6, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v81 : string = $"{v1}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v6, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v90 : string = $"{v51}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v6, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "external_command"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v31}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v6, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v2}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v6, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v51}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "cleanup"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v6, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v31}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v6, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v158 : string =
        if v3 then
            let v156 : string = "true"
            v156
        else
            let v157 : string = "false"
            v157
    let v160 : string = $"{v158}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v6, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = $"{v51}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v6, v169)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v179 : string = "cargo_result"
    let v180 : string = $"{v179}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v6, v180)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v189 : string = $"{v31}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v6, v189)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v198 : string = $"{v4}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v208 : string = " }"
    let v209 : string = $"{v208}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v6, v209)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v217 : string = v6.l0
    v217
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method243(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method82()
        let v50 : string = method242(v30, v31, v32, v33, v34, v35, v48, v49, v3, v1, v4, v0, v2)
        method19(v50)
and closure99 () (v0 : string) : bool =
    let v3 : string = "profile [optimized] target"
    let v4 : bool = v0.Contains v3 
    let v7 : bool = v4 = false
    if v7 then
        let v10 : string = "profile [unoptimized] target"
        let v11 : bool = v0.Contains v10 
        let v14 : bool = v11 = false
        if v14 then
            let v17 : string = "profile [unoptimized + debuginfo] target"
            let v18 : bool = v0.Contains v17 
            let v21 : bool = v18 = false
            v21
        else
            false
    else
        false
and closure98 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v12 : (string -> bool) = closure99()
    let v13 : (string []) = v9 |> Array.skipWhile v12 
    let v14 : (string []) = v13 |> Array.skip 2 
    let v16 : string seq = v14 |> Seq.ofArray
    let v20 : string = method75()
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : (string seq -> string) = v21 v20
    v22 v16
and method245 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "new_code_path"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v1}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v5, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v89}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "external_command"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v5, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v30}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v157 : string = $"{v2}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v5, v157)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v166 : string = $"{v89}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v166)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v176 : string = "cargo_result"
    let v177 : string = $"{v176}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v5, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v186 : string = $"{v30}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v186)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v195 : string = $"{v3}"
    let v198 : unit = ()
    let v199 : (unit -> unit) = closure7(v5, v195)
    let v200 : unit = (fun () -> v199 (); v198) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v5, v206)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v214 : string = v5.l0
    v214
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method245(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_rust / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure101 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method244(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure100 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure101(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method247 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v9 : string = "{ "
    let v10 : string = $"{v9}"
    let v13 : unit = ()
    let v14 : (unit -> unit) = closure7(v6, v10)
    let v15 : unit = (fun () -> v14 (); v13) ()
    let v20 : string = "exit_code"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v6, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v31 : string = " = "
    let v32 : string = $"{v31}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v6, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v41 : string = $"{v0}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v6, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = "; "
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v62 : string = "new_code_path"
    let v63 : string = $"{v62}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v6, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v72 : string = $"{v31}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v6, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v81 : string = $"{v1}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v6, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v90 : string = $"{v51}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v6, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "cargo_result"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v31}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v6, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v2}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v6, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v51}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v6, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "cleanup"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v6, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v31}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v6, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v158 : string =
        if v3 then
            let v156 : string = "true"
            v156
        else
            let v157 : string = "false"
            v157
    let v160 : string = $"{v158}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v6, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v169 : string = $"{v51}"
    let v172 : unit = ()
    let v173 : (unit -> unit) = closure7(v6, v169)
    let v174 : unit = (fun () -> v173 (); v172) ()
    let v179 : string = "spiral_wasm_result"
    let v180 : string = $"{v179}"
    let v183 : unit = ()
    let v184 : (unit -> unit) = closure7(v6, v180)
    let v185 : unit = (fun () -> v184 (); v183) ()
    let v189 : string = $"{v31}"
    let v192 : unit = ()
    let v193 : (unit -> unit) = closure7(v6, v189)
    let v194 : unit = (fun () -> v193 (); v192) ()
    let v198 : string = $"{v4}"
    let v201 : unit = ()
    let v202 : (unit -> unit) = closure7(v6, v198)
    let v203 : unit = (fun () -> v202 (); v201) ()
    let v208 : string = " }"
    let v209 : string = $"{v208}"
    let v212 : unit = ()
    let v213 : (unit -> unit) = closure7(v6, v209)
    let v214 : unit = (fun () -> v213 (); v212) ()
    let v217 : string = v6.l0
    v217
and method246 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method247(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v16 : string = "spiral.process_rust / wasm error"
    let v17 : string = $"{v6} {v7} #{v14} %s{v16} / {v13}"
    method18(v17)
and closure102 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v30 : Mut0, v31 : Mut1, v32 : Mut2, v33 : Mut3, v34 : Mut4, v35 : int64 option) = TraceState.trace_state.Value
        let v48 : string = method8(v30, v31, v32, v33, v34, v35)
        let v49 : string = method82()
        let v50 : string = $"\n{v3}"
        let v51 : string = method246(v30, v31, v32, v33, v34, v35, v48, v49, v4, v1, v2, v0, v50)
        method19(v51)
and method249 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v10 : string = "{ "
    let v11 : string = $"{v10}"
    let v14 : unit = ()
    let v15 : (unit -> unit) = closure7(v7, v11)
    let v16 : unit = (fun () -> v15 (); v14) ()
    let v21 : string = "exit_code"
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v7, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v32 : string = " = "
    let v33 : string = $"{v32}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v7, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v42 : string = $"{v0}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v7, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v52 : string = "; "
    let v53 : string = $"{v52}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v7, v53)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v63 : string = "new_code_path"
    let v64 : string = $"{v63}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v7, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v73 : string = $"{v32}"
    let v76 : unit = ()
    let v77 : (unit -> unit) = closure7(v7, v73)
    let v78 : unit = (fun () -> v77 (); v76) ()
    let v82 : string = $"{v1}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v7, v82)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v91 : string = $"{v52}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v7, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v101 : string = "wasm_path"
    let v102 : string = $"{v101}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v7, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v111 : string = $"{v32}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v7, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v120 : string = $"{v2}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v7, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v129 : string = $"{v52}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v7, v129)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v139 : string = "command"
    let v140 : string = $"{v139}"
    let v143 : unit = ()
    let v144 : (unit -> unit) = closure7(v7, v140)
    let v145 : unit = (fun () -> v144 (); v143) ()
    let v149 : string = $"{v32}"
    let v152 : unit = ()
    let v153 : (unit -> unit) = closure7(v7, v149)
    let v154 : unit = (fun () -> v153 (); v152) ()
    let v158 : string = $"{v3}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v7, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v167 : string = $"{v52}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v7, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v177 : string = "cleanup"
    let v178 : string = $"{v177}"
    let v181 : unit = ()
    let v182 : (unit -> unit) = closure7(v7, v178)
    let v183 : unit = (fun () -> v182 (); v181) ()
    let v187 : string = $"{v32}"
    let v190 : unit = ()
    let v191 : (unit -> unit) = closure7(v7, v187)
    let v192 : unit = (fun () -> v191 (); v190) ()
    let v197 : string =
        if v4 then
            let v195 : string = "true"
            v195
        else
            let v196 : string = "false"
            v196
    let v199 : string = $"{v197}"
    let v202 : unit = ()
    let v203 : (unit -> unit) = closure7(v7, v199)
    let v204 : unit = (fun () -> v203 (); v202) ()
    let v208 : string = $"{v52}"
    let v211 : unit = ()
    let v212 : (unit -> unit) = closure7(v7, v208)
    let v213 : unit = (fun () -> v212 (); v211) ()
    let v218 : string = "cargo_result"
    let v219 : string = $"{v218}"
    let v222 : unit = ()
    let v223 : (unit -> unit) = closure7(v7, v219)
    let v224 : unit = (fun () -> v223 (); v222) ()
    let v228 : string = $"{v32}"
    let v231 : unit = ()
    let v232 : (unit -> unit) = closure7(v7, v228)
    let v233 : unit = (fun () -> v232 (); v231) ()
    let v237 : string = $"{v5}"
    let v240 : unit = ()
    let v241 : (unit -> unit) = closure7(v7, v237)
    let v242 : unit = (fun () -> v241 (); v240) ()
    let v247 : string = " }"
    let v248 : string = $"{v247}"
    let v251 : unit = ()
    let v252 : (unit -> unit) = closure7(v7, v248)
    let v253 : unit = (fun () -> v252 (); v251) ()
    let v256 : string = v7.l0
    v256
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method249(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v17 : string = "spiral.process_rust / cargo error"
    let v18 : string = $"{v6} {v7} #{v15} %s{v17} / {v14}"
    method18(v18)
and closure103 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v31 : Mut0, v32 : Mut1, v33 : Mut2, v34 : Mut3, v35 : Mut4, v36 : int64 option) = TraceState.trace_state.Value
        let v49 : string = method8(v31, v32, v33, v34, v35, v36)
        let v50 : string = method82()
        let v51 : string = $"\n{v2}"
        let v52 : string = method248(v31, v32, v33, v34, v35, v36, v49, v50, v3, v1, v4, v5, v0, v51)
        method19(v52)
and method251 (v0 : string, v1 : UH5) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "new_code_path"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v3, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v48 : string = "; "
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v59 : string = "cleanup"
    let v60 : string = $"{v59}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v69 : string = $"{v28}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v3, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v78 : string = $"%A{v1}"
    let v82 : string = $"{v78}"
    let v85 : unit = ()
    let v86 : (unit -> unit) = closure7(v3, v82)
    let v87 : unit = (fun () -> v86 (); v85) ()
    let v92 : string = " }"
    let v93 : string = $"{v92}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v3, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = v3.l0
    v101
and method250 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH5 = UH5_0
    let v20 : UH5 = UH5_1(v17, v18, v19)
    let v21 : UH5 = UH5_1(v15, v16, v20)
    let v22 : UH5 = UH5_1(v13, v14, v21)
    let v23 : UH5 = UH5_1(v11, v12, v22)
    let v24 : UH5 = UH5_1(v9, v10, v23)
    let v25 : string = method251(v8, v24)
    let v26 : int64 = v0.l0
    let v28 : string = "spiral.process_rust / cleanup"
    let v29 : string = $"{v6} {v7} #{v26} %s{v28} / {v25}"
    method18(v29)
and closure104 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v36 : Mut0, v37 : Mut1, v38 : Mut2, v39 : Mut3, v40 : Mut4, v41 : int64 option) = TraceState.trace_state.Value
        let v54 : string = method8(v36, v37, v38, v39, v40, v41)
        let v55 : string = method85()
        let v56 : string = method250(v36, v37, v38, v39, v40, v41, v54, v55, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v56)
and closure105 () () : US47 =
    US47_0
and method253 () : (unit -> US47) =
    closure105()
and closure106 () (v0 : string) : US47 =
    US47_1(v0)
and method254 () : (string -> US47) =
    closure106()
and method256 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "error'"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v2, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method255 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method256(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "file_system.file_delete"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure107 (v0 : string) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method255(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method252 (v0 : UH5) : unit =
    match v0 with
    | UH5_1(v1, v2, v3) -> (* Cons *)
        (* run_target_args'
        let v4 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0)"
        let v6 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1 v5 
        let v7 : (std_io_Error -> string) = method49()
        (* run_target_args'
        let v9 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v10 : string = "$0.map_err(|x| $1(x))"
        let v11 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v10 
        let _run_target_args'_v9 = v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : string = "$0.map_err(|x| $1(x))"
        let v13 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v12 
        let _run_target_args'_v9 = v13 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v14 : string = "$0.map_err(|x| $1(x))"
        let v15 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr struct (v6, v7) v14 
        let _run_target_args'_v9 = v15 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v16 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v16 
        #endif
#if FABLE_COMPILER_PYTHON
        let v17 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v17 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v18 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v18 
        #endif
#else
        let v19 : Result<unit, string> = match v6 with Ok x -> Ok x | Error x -> Error (v7 x)
        let _run_target_args'_v9 = v19 
        #endif
        let v20 : Result<unit, string> = _run_target_args'_v9 
        let v23 : (unit -> US47) = method253()
        let v24 : (string -> US47) = method254()
        let v26 : US47 = match v20 with Ok () -> v23 () | Error x -> v24 x
        match v26 with
        | US47_1(v29) -> (* Error *)
            let v30 : unit = ()
            let v31 : (unit -> unit) = closure107(v29)
            let v32 : unit = (fun () -> v31 (); v30) ()
            ()
        | US47_0 -> (* Ok *)
            ()
        #endif
#if FABLE_COMPILER_RUST && WASM
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        #endif
#if FABLE_COMPILER_PYTHON
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        #endif
#else
        let v79 : (string -> unit) = System.IO.File.Delete
        v79 v1
        #endif
        // run_target_args' is_unit
        method252(v3)
    | UH5_0 -> (* Nil *)
        ()
and method257 (v0 : string) : string =
    v0
and closure109 () (v0 : std_fs_FileType) : US48 =
    US48_0(v0)
and method258 () : (std_fs_FileType -> US48) =
    closure109()
and closure110 () (v0 : std_string_String) : US48 =
    US48_1(v0)
and method259 () : (std_string_String -> US48) =
    closure110()
and method260 (v0 : string) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
#else
    let v30 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "String::from($0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v44 
    let _run_target_args'_v43 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "String::from($0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v48 : string = "String::from($0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v48 
    let _run_target_args'_v43 = v49 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v59 
    #endif
#else
    let v63 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v43 = v63 
    #endif
    let v66 : std_string_String = _run_target_args'_v43 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "std::path::PathBuf::from($0)"
    let v78 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "std::path::PathBuf::from($0)"
    let v80 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "std::path::PathBuf::from($0)"
    let v82 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v66 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v88 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v88 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v92 
    #endif
#else
    let v96 : std_path_PathBuf = v66 |> unbox<std_path_PathBuf>
    let _run_target_args'_v76 = v96 
    #endif
    let v99 : std_path_PathBuf = _run_target_args'_v76 
    let v105 : string = "$0.file_name()"
    let v106 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let v107 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "x"
    let v110 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = "$0.to_os_string()"
    let v112 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v110 v111 
    let v113 : string = "$0.to_str()"
    let v114 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "$0.unwrap()"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    (* run_target_args'
    let v121 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v122 : string = "String::from($0)"
    let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v121 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v124 
    let _run_target_args'_v121 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v116 v126 
    let _run_target_args'_v121 = v127 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v137 
    #endif
#else
    let v141 : std_string_String = v116 |> unbox<std_string_String>
    let _run_target_args'_v121 = v141 
    #endif
    let v144 : std_string_String = _run_target_args'_v121 
    let v150 : string = "fable_library_rust::String_::fromString($0)"
    let v151 : string = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let v152 : string = "true; $0 })"
    let v153 : bool = Fable.Core.RustInterop.emitRustExpr v151 v152 
    let v154 : string = "_optionm_map_"
    let v155 : string option = Fable.Core.RustInterop.emitRustExpr () v154 
    let v158 : (string -> US5) = method6()
    let v159 : US5 option = v155 |> Option.map v158 
    let v179 : US5 = US5_1
    let v180 : US5 = v159 |> Option.defaultValue v179 
    let v187 : string =
        match v180 with
        | US5_1 -> (* None *)
            let v185 : string = ""
            v185
        | US5_0(v184) -> (* Some *)
            v184
    let _run_target_args'_v5 = v187 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v189 : string = null |> unbox<string>
    let _run_target_args'_v5 = v189 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v193 : string = null |> unbox<string>
    let _run_target_args'_v5 = v193 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v197 : string = null |> unbox<string>
    let _run_target_args'_v5 = v197 
    #endif
#if FABLE_COMPILER_PYTHON
    let v201 : string = null |> unbox<string>
    let _run_target_args'_v5 = v201 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v204 : (string -> string) = System.IO.Path.GetDirectoryName
    let v205 : string = v204 v0
    let _run_target_args'_v5 = v205 
    #endif
#else
    let v206 : (string -> string) = System.IO.Path.GetDirectoryName
    let v207 : string = v206 v0
    let _run_target_args'_v5 = v207 
    #endif
    let v208 : string = _run_target_args'_v5 
    v208
and closure108 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "true; let __future_init = Box::pin(/*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "*/ async move { /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "*/ ()"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "$0"
    let v15 : async_walkdir_DirEntry = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v15))"
    let v17 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "v17.await"
    let v19 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : (std_io_Error -> std_string_String) = method79()
    (* run_target_args'
    let v22 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "$0.map_err(|x| $1(x))"
    let v24 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v23 
    let _run_target_args'_v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "$0.map_err(|x| $1(x))"
    let v26 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v25 
    let _run_target_args'_v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "$0.map_err(|x| $1(x))"
    let v28 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v19, v20) v27 
    let _run_target_args'_v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v31 
    #endif
#else
    let v32 : Result<std_fs_FileType, std_string_String> = match v19 with Ok x -> Ok x | Error x -> Error (v20 x)
    let _run_target_args'_v22 = v32 
    #endif
    let v33 : Result<std_fs_FileType, std_string_String> = _run_target_args'_v22 
    let v36 : (std_fs_FileType -> US48) = method258()
    let v37 : (std_string_String -> US48) = method259()
    let v39 : US48 = match v33 with Ok x -> v36 x | Error x -> v37 x
    let v284 : US49 =
        match v39 with
        | US48_0(v42) -> (* Ok *)
            let v43 : string = "std::fs::FileType::is_dir(&$0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : bool = v44 = false
            if v45 then
                US49_0
            else
                let v47 : string = "async_walkdir::DirEntry::path(&$0)"
                let v48 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v47 
                (* run_target_args'
                let v53 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v54 : string = "$0.display()"
                let v55 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v54 
                let _run_target_args'_v53 = v55 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v56 : string = "$0.display()"
                let v57 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v56 
                let _run_target_args'_v53 = v57 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v58 : string = "$0.display()"
                let v59 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v48 v58 
                let _run_target_args'_v53 = v59 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v61 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v61 
                #endif
#if FABLE_COMPILER_PYTHON
                let v65 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v65 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v69 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v69 
                #endif
#else
                let v73 : std_path_Display = v48 |> unbox<std_path_Display>
                let _run_target_args'_v53 = v73 
                #endif
                let v76 : std_path_Display = _run_target_args'_v53 
                (* run_target_args'
                let v86 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v87 : string = "format!(\"{}\", $0)"
                let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v87 
                let _run_target_args'_v86 = v88 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v89 : string = "format!(\"{}\", $0)"
                let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v89 
                let _run_target_args'_v86 = v90 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v91 : string = "format!(\"{}\", $0)"
                let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v76 v91 
                let _run_target_args'_v86 = v92 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v94 
                #endif
#if FABLE_COMPILER_PYTHON
                let v98 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v98 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v102 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v102 
                #endif
#else
                let v106 : std_string_String = null |> unbox<std_string_String>
                let _run_target_args'_v86 = v106 
                #endif
                let v109 : std_string_String = _run_target_args'_v86 
                let v115 : string = "fable_library_rust::String_::fromString($0)"
                let v116 : string = Fable.Core.RustInterop.emitRustExpr v109 v115 
                let v117 : string = method260(v116)
                let v119 : bool = v117.StartsWith (v0, false, null)
                let v122 : bool = v119 = false
                if v122 then
                    US49_1
                else
                    let v124 : string option = method41(v116)
                    let v127 : (string -> US5) = method6()
                    let v128 : US5 option = v124 |> Option.map v127 
                    let v148 : US5 = US5_1
                    let v149 : US5 = v128 |> Option.defaultValue v148 
                    match v149 with
                    | US5_0(v153) -> (* Some *)
                        let v155 : bool = v153.Contains v0 
                        let v158 : bool = v155 = false
                        if v158 then
                            US49_2
                        else
                            US49_1
                    | _ ->
                        US49_1
        | _ ->
            let v166 : string = "async_walkdir::DirEntry::path(&$0)"
            let v167 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v166 
            (* run_target_args'
            let v172 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v173 : string = "$0.display()"
            let v174 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v167 v173 
            let _run_target_args'_v172 = v174 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v175 : string = "$0.display()"
            let v176 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v167 v175 
            let _run_target_args'_v172 = v176 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v177 : string = "$0.display()"
            let v178 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v167 v177 
            let _run_target_args'_v172 = v178 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v180 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v180 
            #endif
#if FABLE_COMPILER_PYTHON
            let v184 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v184 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v188 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v188 
            #endif
#else
            let v192 : std_path_Display = v167 |> unbox<std_path_Display>
            let _run_target_args'_v172 = v192 
            #endif
            let v195 : std_path_Display = _run_target_args'_v172 
            (* run_target_args'
            let v205 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v206 : string = "format!(\"{}\", $0)"
            let v207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v195 v206 
            let _run_target_args'_v205 = v207 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v208 : string = "format!(\"{}\", $0)"
            let v209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v195 v208 
            let _run_target_args'_v205 = v209 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v210 : string = "format!(\"{}\", $0)"
            let v211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v195 v210 
            let _run_target_args'_v205 = v211 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v213 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v213 
            #endif
#if FABLE_COMPILER_PYTHON
            let v217 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v217 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v221 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v221 
            #endif
#else
            let v225 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v205 = v225 
            #endif
            let v228 : std_string_String = _run_target_args'_v205 
            let v234 : string = "fable_library_rust::String_::fromString($0)"
            let v235 : string = Fable.Core.RustInterop.emitRustExpr v228 v234 
            let v236 : string = method260(v235)
            let v238 : bool = v236.StartsWith (v0, false, null)
            let v241 : bool = v238 = false
            if v241 then
                US49_1
            else
                let v243 : string option = method41(v235)
                let v246 : (string -> US5) = method6()
                let v247 : US5 option = v243 |> Option.map v246 
                let v267 : US5 = US5_1
                let v268 : US5 = v247 |> Option.defaultValue v267 
                match v268 with
                | US5_0(v272) -> (* Some *)
                    let v274 : bool = v272.Contains v0 
                    let v277 : bool = v274 = false
                    if v277 then
                        US49_2
                    else
                        US49_1
                | _ ->
                    US49_1
    let v285 : string = ""
    let v286 : string = "}"
    let v287 : string = v285 + v286 
    let x = v284 //
    let v288 : _ = x
    let v289 : unit = ()
    (* run_target_args'
    let v290 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v291 : string = $"true; let _fix_closure_v289 = $0"
    let v292 : bool = Fable.Core.RustInterop.emitRustExpr v288 v291 
    let _run_target_args'_v290 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v293 : string = $"true; let _fix_closure_v289 = $0"
    let v294 : bool = Fable.Core.RustInterop.emitRustExpr v288 v293 
    let _run_target_args'_v290 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v295 : string = $"true; let _fix_closure_v289 = $0"
    let v296 : bool = Fable.Core.RustInterop.emitRustExpr v288 v295 
    let _run_target_args'_v290 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v290 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v290 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v290 = false 
    #endif
#else
    let _run_target_args'_v290 = false 
    #endif
    let v297 : bool = _run_target_args'_v290 
    let v299 : string = $"true; _fix_closure_v289 " + v287 + "); " + v285 + " // rust.fix_closure'"
    let v300 : bool = Fable.Core.RustInterop.emitRustExpr () v299 
    let v301 : string = "__future_init"
    let v302 : _ = Fable.Core.RustInterop.emitRustExpr () v301 
    let v303 : string = "v302"
    let v304 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US49>>, Send<Dyn<std_future_Future<US49>>>>>> = Fable.Core.RustInterop.emitRustExpr () v303 
    let v305 : string = "v304.await"
    let v306 : US49 = Fable.Core.RustInterop.emitRustExpr () v305 
    let v315 : async_walkdir_Filtering =
        match v306 with
        | US49_2 -> (* Continue *)
            let v311 : string = "async_walkdir::Filtering::Continue"
            let v312 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v311 
            v312
        | US49_0 -> (* Ignore *)
            let v307 : string = "async_walkdir::Filtering::Ignore"
            let v308 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v307 
            v308
        | US49_1 -> (* IgnoreDir *)
            let v309 : string = "async_walkdir::Filtering::IgnoreDir"
            let v310 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v309 
            v310
    let v316 : string = v285 + v286 
    let x = v315 //
    let v317 : _ = x
    let v318 : unit = ()
    (* run_target_args'
    let v319 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v320 : string = $"true; let _fix_closure_v318 = $0"
    let v321 : bool = Fable.Core.RustInterop.emitRustExpr v317 v320 
    let _run_target_args'_v319 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v322 : string = $"true; let _fix_closure_v318 = $0"
    let v323 : bool = Fable.Core.RustInterop.emitRustExpr v317 v322 
    let _run_target_args'_v319 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : string = $"true; let _fix_closure_v318 = $0"
    let v325 : bool = Fable.Core.RustInterop.emitRustExpr v317 v324 
    let _run_target_args'_v319 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v319 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v319 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v319 = false 
    #endif
#else
    let _run_target_args'_v319 = false 
    #endif
    let v326 : bool = _run_target_args'_v319 
    let v328 : string = $"true; _fix_closure_v318 " + v316 + "); " + v285 + " // rust.fix_closure'"
    let v329 : bool = Fable.Core.RustInterop.emitRustExpr () v328 
    let v330 : string = "__future_init"
    let v331 : _ = Fable.Core.RustInterop.emitRustExpr () v330 
    let v332 : string = "v331"
    let v333 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v332 
    v333
and closure112 () (v0 : async_walkdir_Error) : std_string_String =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    v28
and method262 () : (async_walkdir_Error -> std_string_String) =
    closure112()
and closure113 () (v0 : async_walkdir_DirEntry) : US50 =
    US50_0(v0)
and method263 () : (async_walkdir_DirEntry -> US50) =
    closure113()
and closure114 () (v0 : std_string_String) : US50 =
    US50_1(v0)
and method264 () : (std_string_String -> US50) =
    closure114()
and method266 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "error"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "format!(\"{:#?}\", $0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "format!(\"{:#?}\", $0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v45 
    let v47 : string = "fable_library_rust::String_::fromString($0)"
    let v48 : string = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let _run_target_args'_v40 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "format!(\"{:#?}\", $0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v49 
    let v51 : string = "fable_library_rust::String_::fromString($0)"
    let v52 : string = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let _run_target_args'_v40 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : string = $"%A{v0}"
    let _run_target_args'_v40 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v58 : string = $"%A{v0}"
    let _run_target_args'_v40 = v58 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v62 : string = $"%A{v0}"
    let _run_target_args'_v40 = v62 
    #endif
#else
    let v66 : string = $"%A{v0}"
    let _run_target_args'_v40 = v66 
    #endif
    let v69 : string = _run_target_args'_v40 
    let v76 : string = $"{v69}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v2, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v86 : string = " }"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v2, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = v2.l0
    v95
and method265 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method266(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript / stream_filter_map"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure115 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method82()
        let v46 : string = method265(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure111 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method262()
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "$0.map_err(|x| $1(x))"
    let v6 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v13 
    #endif
#else
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _run_target_args'_v4 = v14 
    #endif
    let v15 : Result<async_walkdir_DirEntry, std_string_String> = _run_target_args'_v4 
    let v18 : (async_walkdir_DirEntry -> US50) = method263()
    let v19 : (std_string_String -> US50) = method264()
    let v21 : US50 = match v15 with Ok x -> v18 x | Error x -> v19 x
    let v245 : US51 =
        match v21 with
        | US50_1(v193) -> (* Error *)
            let v194 : unit = ()
            let v195 : (unit -> unit) = closure115(v193)
            let v196 : unit = (fun () -> v195 (); v194) ()
            US51_1
        | US50_0(v24) -> (* Ok *)
            let v25 : string = "async_walkdir::DirEntry::path(&$0)"
            let v26 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v24 v25 
            (* run_target_args'
            let v31 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v32 : string = "$0.display()"
            let v33 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v32 
            let _run_target_args'_v31 = v33 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v34 : string = "$0.display()"
            let v35 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v34 
            let _run_target_args'_v31 = v35 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v36 : string = "$0.display()"
            let v37 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v26 v36 
            let _run_target_args'_v31 = v37 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v39 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v39 
            #endif
#if FABLE_COMPILER_PYTHON
            let v43 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v43 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v47 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v47 
            #endif
#else
            let v51 : std_path_Display = v26 |> unbox<std_path_Display>
            let _run_target_args'_v31 = v51 
            #endif
            let v54 : std_path_Display = _run_target_args'_v31 
            (* run_target_args'
            let v64 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "format!(\"{}\", $0)"
            let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v65 
            let _run_target_args'_v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "format!(\"{}\", $0)"
            let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v67 
            let _run_target_args'_v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "format!(\"{}\", $0)"
            let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v54 v69 
            let _run_target_args'_v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v76 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v76 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v80 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v80 
            #endif
#else
            let v84 : std_string_String = null |> unbox<std_string_String>
            let _run_target_args'_v64 = v84 
            #endif
            let v87 : std_string_String = _run_target_args'_v64 
            let v93 : string = "fable_library_rust::String_::fromString($0)"
            let v94 : string = Fable.Core.RustInterop.emitRustExpr v87 v93 
            let v95 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v96 : string = $"regex::Regex::new(&$0)"
            let v97 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v95 v96 
            (* run_target_args'
            let v99 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v100 : string = "$0.unwrap()"
            let v101 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v100 
            let _run_target_args'_v99 = v101 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v102 : string = "$0.unwrap()"
            let v103 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v102 
            let _run_target_args'_v99 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : string = "$0.unwrap()"
            let v105 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v97 v104 
            let _run_target_args'_v99 = v105 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v106 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v106 
            #endif
#if FABLE_COMPILER_PYTHON
            let v107 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v107 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v108 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v108 
            #endif
#else
            let v109 : regex_Regex = match v97 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _run_target_args'_v99 = v109 
            #endif
            let v110 : regex_Regex = _run_target_args'_v99 
            let v113 : Vec<std_collections_HashMap<string, string>> = method236(v94, v110)
            let v114 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v115 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : std_collections_HashMap<string, string> option = v115 |> Array.tryItem 0 
            let v119 : (std_collections_HashMap<string, string> -> US45) = method237()
            let v120 : US45 option = v116 |> Option.map v119 
            let v140 : US45 = US45_1
            let v141 : US45 = v120 |> Option.defaultValue v140 
            let v180 : US46 =
                match v141 with
                | US45_1 -> (* None *)
                    US46_1
                | US45_0(v145) -> (* Some *)
                    let v146 : string = method238()
                    let v147 : string = "std::collections::HashMap::get(&$0, &v146).map(|x| x).cloned()"
                    let v148 : string option = Fable.Core.RustInterop.emitRustExpr v145 v147 
                    let v151 : (string -> US5) = method6()
                    let v152 : US5 option = v148 |> Option.map v151 
                    let v172 : US5 = US5_1
                    let v173 : US5 = v152 |> Option.defaultValue v172 
                    US46_0(v173)
            let v187 : US5 =
                match v180 with
                | US46_0(v181) -> (* Some *)
                    match v181 with
                    | US5_0(v182) -> (* Some *)
                        US5_0(v182)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v187 with
            | US5_1 -> (* None *)
                US51_1
            | US5_0(v188) -> (* Some *)
                US51_0(v94, v188)
    match v245 with
    | US51_1 -> (* None *)
        let v253 : struct (string * string) option = None
        v253
    | US51_0(v246, v247) -> (* Some *)
        let v249 : struct (string * string) option = Some struct (v246, v247) 
        v249
and method261 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure111(v0)
and closure116 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure117 () struct (v0 : string, v1 : string) : US51 =
    US51_0(v0, v1)
and method267 () : (struct (string * string) -> US51) =
    closure117()
and method269 (v0 : US51) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "version"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"%A{v0}"
    let v41 : string = $"{v37}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v2, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v51 : string = " }"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v2, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = v2.l0
    v60
and method268 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US51) : string =
    let v9 : string = method269(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure118 (v0 : US51) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method268(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method270 (v0 : string, v1 : string, v2 : US51) : unit =
    match v2 with
    | US51_1 -> (* None *)
        let v10 : string = $"spiral.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US51_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method36(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method36(v0, v8)
        method220(v7, v9)
and method271 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method230(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_typescript"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure119 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method271(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method273 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v16 : string = "new_code_path"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v2, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v27 : string = " = "
    let v28 : string = $"{v27}"
    let v31 : unit = ()
    let v32 : (unit -> unit) = closure7(v2, v28)
    let v33 : unit = (fun () -> v32 (); v31) ()
    let v37 : string = $"{v0}"
    let v40 : unit = ()
    let v41 : (unit -> unit) = closure7(v2, v37)
    let v42 : unit = (fun () -> v41 (); v40) ()
    let v47 : string = " }"
    let v48 : string = $"{v47}"
    let v51 : unit = ()
    let v52 : (unit -> unit) = closure7(v2, v48)
    let v53 : unit = (fun () -> v52 (); v51) ()
    let v56 : string = v2.l0
    v56
and method272 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method273(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_typescript"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure120 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method272(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and method274 (v0 : UH4, v1 : UH4) : UH4 =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH4 = method274(v4, v1)
        UH4_1(v2, v3, v5)
    | UH4_0 -> (* Nil *)
        v1
and method275 (v0 : UH4, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH4_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method275(v4, v1)
        let v7 : struct (string * string) list = struct (v2, v3) :: v5 
        v7
    | UH4_0 -> (* Nil *)
        v1
and closure121 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method277 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v5, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v19 : string = "ex"
    let v20 : string = $"{v19}"
    let v23 : unit = ()
    let v24 : (unit -> unit) = closure7(v5, v20)
    let v25 : unit = (fun () -> v24 (); v23) ()
    let v30 : string = " = "
    let v31 : string = $"{v30}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v5, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    (* run_target_args'
    let v43 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v44 : string = "format!(\"{:#?}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v44 
    let v46 : string = "fable_library_rust::String_::fromString($0)"
    let v47 : string = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let _run_target_args'_v43 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "format!(\"{:#?}\", $0)"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v48 
    let v50 : string = "fable_library_rust::String_::fromString($0)"
    let v51 : string = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let _run_target_args'_v43 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "format!(\"{:#?}\", $0)"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v54 : string = "fable_library_rust::String_::fromString($0)"
    let v55 : string = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let _run_target_args'_v43 = v55 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : string = $"%A{v0}"
    let _run_target_args'_v43 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : string = $"%A{v0}"
    let _run_target_args'_v43 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : string = $"%A{v0}"
    let _run_target_args'_v43 = v65 
    #endif
#else
    let v69 : string = $"%A{v0}"
    let _run_target_args'_v43 = v69 
    #endif
    let v72 : string = _run_target_args'_v43 
    let v79 : string = $"{v72}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v5, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v89 : string = "; "
    let v90 : string = $"{v89}"
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure7(v5, v90)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v100 : string = "new_code_path"
    let v101 : string = $"{v100}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v5, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v110 : string = $"{v30}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v5, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v119 : string = $"{v1}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v5, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v128 : string = $"{v89}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v138 : string = "external_command"
    let v139 : string = $"{v138}"
    let v142 : unit = ()
    let v143 : (unit -> unit) = closure7(v5, v139)
    let v144 : unit = (fun () -> v143 (); v142) ()
    let v148 : string = $"{v30}"
    let v151 : unit = ()
    let v152 : (unit -> unit) = closure7(v5, v148)
    let v153 : unit = (fun () -> v152 (); v151) ()
    let v157 : string = $"{v2}"
    let v160 : unit = ()
    let v161 : (unit -> unit) = closure7(v5, v157)
    let v162 : unit = (fun () -> v161 (); v160) ()
    let v166 : string = $"{v89}"
    let v169 : unit = ()
    let v170 : (unit -> unit) = closure7(v5, v166)
    let v171 : unit = (fun () -> v170 (); v169) ()
    let v176 : string = "run_result"
    let v177 : string = $"{v176}"
    let v180 : unit = ()
    let v181 : (unit -> unit) = closure7(v5, v177)
    let v182 : unit = (fun () -> v181 (); v180) ()
    let v186 : string = $"{v30}"
    let v189 : unit = ()
    let v190 : (unit -> unit) = closure7(v5, v186)
    let v191 : unit = (fun () -> v190 (); v189) ()
    let v195 : string = $"{v3}"
    let v198 : unit = ()
    let v199 : (unit -> unit) = closure7(v5, v195)
    let v200 : unit = (fun () -> v199 (); v198) ()
    let v205 : string = " }"
    let v206 : string = $"{v205}"
    let v209 : unit = ()
    let v210 : (unit -> unit) = closure7(v5, v206)
    let v211 : unit = (fun () -> v210 (); v209) ()
    let v214 : string = v5.l0
    v214
and method276 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method277(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure123 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method276(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure122 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure123(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method278 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method178(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_typescript / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure124 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method278(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method279 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method230(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.process_python"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure125 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method82()
        let v47 : string = method279(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and method280 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method273(v8)
    let v10 : int64 = v0.l0
    let v12 : string = "spiral.process_python"
    let v13 : string = $"{v6} {v7} #{v10} %s{v12} / {v9}"
    method18(v13)
and closure126 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v26 : Mut0, v27 : Mut1, v28 : Mut2, v29 : Mut3, v30 : Mut4, v31 : int64 option) = TraceState.trace_state.Value
        let v44 : string = method8(v26, v27, v28, v29, v30, v31)
        let v45 : string = method12()
        let v46 : string = method280(v26, v27, v28, v29, v30, v31, v44, v45, v0)
        method19(v46)
and closure127 (v0 : string) () : string =
    let v8 : string = "\n"
    let v9 : (string []) = v0.Split v8 
    let v13 : string seq = v9 |> Seq.ofArray
    let v17 : string = method75()
    let v18 : (string -> (string seq -> string)) = String.concat
    let v19 : (string seq -> string) = v18 v17
    v19 v13
and method281 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method277(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / Exception"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure129 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method281(v29, v30, v31, v32, v33, v34, v47, v48, v3, v0, v2, v1)
        method19(v49)
and closure128 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure129(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method282 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method178(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v15 : string = "spiral.process_python / error"
    let v16 : string = $"{v6} {v7} #{v13} %s{v15} / {v12}"
    method18(v16)
and closure130 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method82()
        let v49 : string = method282(v29, v30, v31, v32, v33, v34, v47, v48, v2, v1, v0, v3)
        method19(v49)
and method284 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v3, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v17 : string = "subcommand"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v3, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v28 : string = " = "
    let v29 : string = $"{v28}"
    let v32 : unit = ()
    let v33 : (unit -> unit) = closure7(v3, v29)
    let v34 : unit = (fun () -> v33 (); v32) ()
    (* run_target_args'
    let v41 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _run_target_args'_v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v46 : string = "format!(\"{:#?}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v46 
    let v48 : string = "fable_library_rust::String_::fromString($0)"
    let v49 : string = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let _run_target_args'_v41 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "format!(\"{:#?}\", $0)"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v50 
    let v52 : string = "fable_library_rust::String_::fromString($0)"
    let v53 : string = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let _run_target_args'_v41 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v55 : string = $"%A{v0}"
    let _run_target_args'_v41 = v55 
    #endif
#if FABLE_COMPILER_PYTHON
    let v59 : string = $"%A{v0}"
    let _run_target_args'_v41 = v59 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : string = $"%A{v0}"
    let _run_target_args'_v41 = v63 
    #endif
#else
    let v67 : string = $"%A{v0}"
    let _run_target_args'_v41 = v67 
    #endif
    let v70 : string = _run_target_args'_v41 
    let v77 : string = $"{v70}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v87 : string = "; "
    let v88 : string = $"{v87}"
    let v91 : unit = ()
    let v92 : (unit -> unit) = closure7(v3, v88)
    let v93 : unit = (fun () -> v92 (); v91) ()
    let v98 : string = "arg_matches"
    let v99 : string = $"{v98}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v3, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v108 : string = $"{v28}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v3, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    (* run_target_args'
    let v120 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v121 : string = "format!(\"{:#?}\", $0)"
    let v122 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v121 
    let v123 : string = "fable_library_rust::String_::fromString($0)"
    let v124 : string = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let _run_target_args'_v120 = v124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : string = "format!(\"{:#?}\", $0)"
    let v126 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v125 
    let v127 : string = "fable_library_rust::String_::fromString($0)"
    let v128 : string = Fable.Core.RustInterop.emitRustExpr v126 v127 
    let _run_target_args'_v120 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "format!(\"{:#?}\", $0)"
    let v130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v129 
    let v131 : string = "fable_library_rust::String_::fromString($0)"
    let v132 : string = Fable.Core.RustInterop.emitRustExpr v130 v131 
    let _run_target_args'_v120 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v134 : string = $"%A{v1}"
    let _run_target_args'_v120 = v134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v138 : string = $"%A{v1}"
    let _run_target_args'_v120 = v138 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v142 : string = $"%A{v1}"
    let _run_target_args'_v120 = v142 
    #endif
#else
    let v146 : string = $"%A{v1}"
    let _run_target_args'_v120 = v146 
    #endif
    let v149 : string = _run_target_args'_v120 
    let v156 : string = $"{v149}"
    let v159 : unit = ()
    let v160 : (unit -> unit) = closure7(v3, v156)
    let v161 : unit = (fun () -> v160 (); v159) ()
    let v166 : string = " }"
    let v167 : string = $"{v166}"
    let v170 : unit = ()
    let v171 : (unit -> unit) = closure7(v3, v167)
    let v172 : unit = (fun () -> v171 (); v170) ()
    let v175 : string = v3.l0
    v175
and method283 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method284(v8, v9)
    let v11 : int64 = v0.l0
    let v13 : string = "spiral.run / invalid subcommand"
    let v14 : string = $"{v6} {v7} #{v11} %s{v13} / {v10}"
    method18(v14)
and closure131 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method283(v27, v28, v29, v30, v31, v32, v45, v46, v1, v0)
        method19(v47)
and closure132 () (v0 : serde_json_Error) : string =
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "format!(\"{}\", $0)"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v21 
    #endif
#else
    let v25 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v5 = v25 
    #endif
    let v28 : std_string_String = _run_target_args'_v5 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v28 v34 
    v35
and method285 () : (serde_json_Error -> string) =
    closure132()
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(/*"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "*/ async move { /*"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "*/ ()"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v9 : (Ref<Str> -> std_string_String) = closure11()
    let v10 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v8 
    let v13 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v14 : US6 option = v10 |> Option.map v13 
    let v35 : US6 = US6_1
    let v36 : US6 = v14 |> Option.defaultValue v35 
    let v7369 : (struct (string * string) []) =
        match v36 with
        | US6_0(v40, v41) -> (* Some *)
            let v42 : string = "fable_library_rust::String_::fromString($0)"
            let v43 : string = Fable.Core.RustInterop.emitRustExpr v40 v42 
            let v44 : bool = v43 = "gleam"
            if v44 then
                let v45 : string = method22()
                (* run_target_args'
                let v50 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v51 : string = "&*$0"
                let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v51 
                let _run_target_args'_v50 = v52 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v53 : string = "&*$0"
                let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
                let _run_target_args'_v50 = v54 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v55 : string = "&*$0"
                let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
                let _run_target_args'_v50 = v56 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v58 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v58 
                #endif
#if FABLE_COMPILER_PYTHON
                let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v62 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v66 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v66 
                #endif
#else
                let v70 : Ref<Str> = v45 |> unbox<Ref<Str>>
                let _run_target_args'_v50 = v70 
                #endif
                let v73 : Ref<Str> = _run_target_args'_v50 
                let v79 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v80 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v73) v79 
                let v83 : (std_string_String -> US7) = method23()
                let v84 : US7 option = v80 |> Option.map v83 
                let v104 : US7 = US7_1
                let v105 : US7 = v84 |> Option.defaultValue v104 
                let v112 : std_string_String =
                    match v105 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v109) -> (* Some *)
                        v109
                let v113 : string = "fable_library_rust::String_::fromString($0)"
                let v114 : string = Fable.Core.RustInterop.emitRustExpr v112 v113 
                let v115 : string = method24()
                (* run_target_args'
                let v120 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v121 : string = "&*$0"
                let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v115 v121 
                let _run_target_args'_v120 = v122 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v123 : string = "&*$0"
                let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v115 v123 
                let _run_target_args'_v120 = v124 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v125 : string = "&*$0"
                let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v115 v125 
                let _run_target_args'_v120 = v126 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v128 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v128 
                #endif
#if FABLE_COMPILER_PYTHON
                let v132 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v132 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v136 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v136 
                #endif
#else
                let v140 : Ref<Str> = v115 |> unbox<Ref<Str>>
                let _run_target_args'_v120 = v140 
                #endif
                let v143 : Ref<Str> = _run_target_args'_v120 
                let v149 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v150 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v143) v149 
                let v153 : (std_string_String -> US7) = method23()
                let v154 : US7 option = v150 |> Option.map v153 
                let v174 : US7 = US7_1
                let v175 : US7 = v154 |> Option.defaultValue v174 
                let v236 : US8 =
                    match v175 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v179) -> (* Some *)
                        let v180 : string = "fable_library_rust::String_::fromString($0)"
                        let v181 : string = Fable.Core.RustInterop.emitRustExpr v179 v180 
                        
                        
                        
                        
                        let v184 : string = "JavaScript"
                        let v185 : (unit -> string) = v184.ToLower
                        let v186 : string = v185 ()
                        let v191 : string = "Erlang"
                        let v192 : (unit -> string) = v191.ToLower
                        let v193 : string = v192 ()
                        let v196 : bool = "Erlang" = v181
                        let v200 : US9 =
                            if v196 then
                                let v197 : US10 = US10_0
                                US9_0(v197)
                            else
                                US9_1
                        let v232 : US9 =
                            match v200 with
                            | US9_1 -> (* None *)
                                let v203 : bool = "JavaScript" = v181
                                let v207 : US9 =
                                    if v203 then
                                        let v204 : US10 = US10_1
                                        US9_0(v204)
                                    else
                                        US9_1
                                match v207 with
                                | US9_1 -> (* None *)
                                    let v210 : bool = v193 = v181
                                    let v214 : US9 =
                                        if v210 then
                                            let v211 : US10 = US10_0
                                            US9_0(v211)
                                        else
                                            US9_1
                                    match v214 with
                                    | US9_1 -> (* None *)
                                        let v217 : bool = v186 = v181
                                        let v221 : US9 =
                                            if v217 then
                                                let v218 : US10 = US10_1
                                                US9_0(v218)
                                            else
                                                US9_1
                                        match v221 with
                                        | US9_1 -> (* None *)
                                            US9_1
                                        | US9_0(v222) -> (* Some *)
                                            US9_0(v222)
                                    | US9_0(v215) -> (* Some *)
                                        US9_0(v215)
                                | US9_0(v208) -> (* Some *)
                                    US9_0(v208)
                            | US9_0(v201) -> (* Some *)
                                US9_0(v201)
                        US8_0(v232)
                let v243 : US9 =
                    match v236 with
                    | US8_0(v237) -> (* Some *)
                        match v237 with
                        | US9_0(v238) -> (* Some *)
                            US9_0(v238)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v247 : US10 =
                    match v243 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v244) -> (* Some *)
                        v244
                let v248 : string = method25()
                (* run_target_args'
                let v253 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v254 : string = "&*$0"
                let v255 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v248 v254 
                let _run_target_args'_v253 = v255 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v256 : string = "&*$0"
                let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v248 v256 
                let _run_target_args'_v253 = v257 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v258 : string = "&*$0"
                let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v248 v258 
                let _run_target_args'_v253 = v259 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v261 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v261 
                #endif
#if FABLE_COMPILER_PYTHON
                let v265 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v265 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v269 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v269 
                #endif
#else
                let v273 : Ref<Str> = v248 |> unbox<Ref<Str>>
                let _run_target_args'_v253 = v273 
                #endif
                let v276 : Ref<Str> = _run_target_args'_v253 
                let v282 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v283 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v276) v282 
                let v286 : (Vec<std_string_String> -> US11) = method26()
                let v287 : US11 option = v283 |> Option.map v286 
                let v307 : US11 = US11_1
                let v308 : US11 = v287 |> Option.defaultValue v307 
                let v312 : (std_string_String []) = [||]
                let v313 : string = "$0.to_vec()"
                let v314 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v312 v313 
                let v317 : Vec<std_string_String> =
                    match v308 with
                    | US11_1 -> (* None *)
                        v314
                    | US11_0(v315) -> (* Some *)
                        v315
                (* run_target_args'
                let v322 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                (* run_target_args'
                let v327 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v328 : string = "std::fs::read(&*$0)"
                let v329 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v114 v328 
                (* run_target_args'
                let v331 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v332 : string = "$0.unwrap()"
                let v333 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v329 v332 
                let _run_target_args'_v331 = v333 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v334 : string = "$0.unwrap()"
                let v335 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v329 v334 
                let _run_target_args'_v331 = v335 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v336 : string = "$0.unwrap()"
                let v337 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v329 v336 
                let _run_target_args'_v331 = v337 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v338 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v338 
                #endif
#if FABLE_COMPILER_PYTHON
                let v339 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v339 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v340 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v340 
                #endif
#else
                let v341 : Vec<uint8> = match v329 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v331 = v341 
                #endif
                let v342 : Vec<uint8> = _run_target_args'_v331 
                let _run_target_args'_v327 = v342 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v346 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v346 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v350 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v350 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v354 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v354 
                #endif
#if FABLE_COMPILER_PYTHON
                let v358 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v358 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v362 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _run_target_args'_v327 = v362 
                #endif
#else
                let v365 : (uint8 []) = v114 |> System.IO.File.ReadAllBytes
                let v366 : string = "$0.to_vec()"
                let v367 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v365 v366 
                let _run_target_args'_v327 = v367 
                #endif
                let v368 : Vec<uint8> = _run_target_args'_v327 
                let v374 : Vec<uint8> = method27(v368)
                let v375 : string = "std::string::String::from_utf8($0)"
                let v376 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v374 v375 
                (* run_target_args'
                let v378 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v379 : string = "$0.unwrap()"
                let v380 : std_string_String = Fable.Core.RustInterop.emitRustExpr v376 v379 
                let _run_target_args'_v378 = v380 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v381 : string = "$0.unwrap()"
                let v382 : std_string_String = Fable.Core.RustInterop.emitRustExpr v376 v381 
                let _run_target_args'_v378 = v382 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v383 : string = "$0.unwrap()"
                let v384 : std_string_String = Fable.Core.RustInterop.emitRustExpr v376 v383 
                let _run_target_args'_v378 = v384 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v385 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v385 
                #endif
#if FABLE_COMPILER_PYTHON
                let v386 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v386 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v387 
                #endif
#else
                let v388 : std_string_String = match v376 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v378 = v388 
                #endif
                let v389 : std_string_String = _run_target_args'_v378 
                let v392 : string = "fable_library_rust::String_::fromString($0)"
                let v393 : string = Fable.Core.RustInterop.emitRustExpr v389 v392 
                let _run_target_args'_v322 = v393 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v395 : string = null |> unbox<string>
                let _run_target_args'_v322 = v395 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v399 : string = null |> unbox<string>
                let _run_target_args'_v322 = v399 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v403 : string = null |> unbox<string>
                let _run_target_args'_v322 = v403 
                #endif
#if FABLE_COMPILER_PYTHON
                let v407 : string = null |> unbox<string>
                let _run_target_args'_v322 = v407 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v411 : string = null |> unbox<string>
                let _run_target_args'_v322 = v411 
                #endif
#else
                let v414 : string = v114 |> System.IO.File.ReadAllText
                let _run_target_args'_v322 = v414 
                #endif
                let v415 : string = _run_target_args'_v322 
                let v421 : string = "gleam"
                let v422 : string = method28(v421, v415)
                let v423 : string = method29(v422)
                let v424 : string = method34()
                let v425 : US5 = method35(v424)
                let v431 : US5 =
                    match v425 with
                    | US5_1 -> (* None *)
                        let v428 : string = __SOURCE_DIRECTORY__
                        method35(v428)
                    | US5_0(v426) -> (* Some *)
                        US5_0(v426)
                let v437 : US5 =
                    match v431 with
                    | US5_1 -> (* None *)
                        let v434 : string = "/workspaces"
                        method35(v434)
                    | US5_0(v432) -> (* Some *)
                        US5_0(v432)
                let v441 : string =
                    match v437 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v438) -> (* Some *)
                        v438
                let v442 : string = method55(v441)
                let v443 : bool = "deps" = v442
                let v454 : string =
                    if v443 then
                        let v444 : string option = method41(v441)
                        let v446 : string = v444 |> Option.get
                        let v449 : US5 = method35(v446)
                        match v449 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v450) -> (* Some *)
                            v450
                    else
                        v441
                let v455 : string = "polyglot"
                let v456 : string = method36(v454, v455)
                let v457 : string = method34()
                let v459 : (unit -> string) = v457.ToLower
                let v460 : string = v459 ()
                let v464 : (unit -> string) = v456.ToLower
                let v465 : string = v464 ()
                let v469 : bool = v460.StartsWith (v465, false, null)
                let v474 : US13 =
                    if v469 then
                        US13_1(v465)
                    else
                        US13_0(v465)
                let v486 : Result<string, string> =
                    match v474 with
                    | US13_1(v480) -> (* Error *)
                        let v482 : Result<string, string> = Error v480 
                        v482
                    | US13_0(v475) -> (* Ok *)
                        let v477 : Result<string, string> = Ok v475 
                        v477
                let v487 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v488 : bool = Fable.Core.RustInterop.emitRustExpr v486 v487 
                let v489 : string = "x"
                let v490 : string = Fable.Core.RustInterop.emitRustExpr () v489 
                let v491 : string = "true; $0 })"
                let v492 : bool = Fable.Core.RustInterop.emitRustExpr v490 v491 
                let v493 : string = "_result_unwrap_or_else"
                let v494 : string = Fable.Core.RustInterop.emitRustExpr () v493 
                let v495 : string = method69(v494)
                let v496 : string option = method41(v114)
                let v499 : string = ""
                let v500 : string = v496 |> Option.defaultValue v499 
                let v503 : string = method69(v500)
                let v504 : string = ".."
                let v505 : string = method36(v503, v504)
                let v506 : string = method69(v505)
                let v507 : string = "gleam.toml"
                let v508 : string = method36(v506, v507)
                let v509 : string = "gleam_stdlib=\">=0.55.0 and <1.0.0\""
                let v510 : string = "gleam_erlang=\">=0.34.0 and <1.0.0\""
                let v511 : string = "envoy=\">=1.0.0 and <2.0.0\""
                let v512 : string = "gary=\">=1.1.0 and <2.0.0\""
                let v513 : (string []) = [|v509; v510; v511; v512|]
                let v514 : string = "$0.to_vec()"
                let v515 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v513 v514 
                let v516 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v517 : bool = Fable.Core.RustInterop.emitRustExpr v515 v516 
                let v518 : string = "x"
                let v519 : string = Fable.Core.RustInterop.emitRustExpr () v518 
                (* run_target_args'
                let v524 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v525 : string = "&*$0"
                let v526 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v519 v525 
                let _run_target_args'_v524 = v526 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v527 : string = "&*$0"
                let v528 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v519 v527 
                let _run_target_args'_v524 = v528 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v529 : string = "&*$0"
                let v530 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v519 v529 
                let _run_target_args'_v524 = v530 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v532 : Ref<Str> = v519 |> unbox<Ref<Str>>
                let _run_target_args'_v524 = v532 
                #endif
#if FABLE_COMPILER_PYTHON
                let v536 : Ref<Str> = v519 |> unbox<Ref<Str>>
                let _run_target_args'_v524 = v536 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v540 : Ref<Str> = v519 |> unbox<Ref<Str>>
                let _run_target_args'_v524 = v540 
                #endif
#else
                let v544 : Ref<Str> = v519 |> unbox<Ref<Str>>
                let _run_target_args'_v524 = v544 
                #endif
                let v547 : Ref<Str> = _run_target_args'_v524 
                (* run_target_args'
                let v557 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v558 : string = "String::from($0)"
                let v559 : std_string_String = Fable.Core.RustInterop.emitRustExpr v547 v558 
                let _run_target_args'_v557 = v559 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v560 : string = "String::from($0)"
                let v561 : std_string_String = Fable.Core.RustInterop.emitRustExpr v547 v560 
                let _run_target_args'_v557 = v561 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v562 : string = "String::from($0)"
                let v563 : std_string_String = Fable.Core.RustInterop.emitRustExpr v547 v562 
                let _run_target_args'_v557 = v563 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v565 : std_string_String = v547 |> unbox<std_string_String>
                let _run_target_args'_v557 = v565 
                #endif
#if FABLE_COMPILER_PYTHON
                let v569 : std_string_String = v547 |> unbox<std_string_String>
                let _run_target_args'_v557 = v569 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v573 : std_string_String = v547 |> unbox<std_string_String>
                let _run_target_args'_v557 = v573 
                #endif
#else
                let v577 : std_string_String = v547 |> unbox<std_string_String>
                let _run_target_args'_v557 = v577 
                #endif
                let v580 : std_string_String = _run_target_args'_v557 
                let v586 : string = "true; $0 }).collect::<Vec<_>>()"
                let v587 : bool = Fable.Core.RustInterop.emitRustExpr v580 v586 
                let v588 : string = "_vec_map"
                let v589 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v588 
                let v590 : Vec<std_string_String> = method73(v317)
                let v591 : Vec<std_string_String> = method74(v589)
                let v592 : string = "true; let mut v591 = v591"
                let v593 : bool = Fable.Core.RustInterop.emitRustExpr () v592 
                let v594 : string = "true; v591.extend(v590)"
                let v595 : bool = Fable.Core.RustInterop.emitRustExpr () v594 
                let v596 : string = "v591"
                let v597 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v596 
                let v598 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v599 : bool = Fable.Core.RustInterop.emitRustExpr v597 v598 
                let v600 : string = "x"
                let v601 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v600 
                let v602 : string = "fable_library_rust::String_::fromString($0)"
                let v603 : string = Fable.Core.RustInterop.emitRustExpr v601 v602 
                let v606 : string = "="
                let v607 : bool = v603.Contains v606 
                let v622 : string =
                    if v607 then
                        v603
                    else
                        let v612 : string = "]"
                        let v613 : bool = v603.EndsWith (v612, false, null)
                        if v613 then
                            let v616 : string = $"={{version='*',features=["
                            let v617 : string = "["
                            let v618 : string = v603.Replace (v617, v616)
                            let v619 : string = $"{v618}}}"
                            v619
                        else
                            let v620 : string = $"{v603}='*'"
                            v620
                let v623 : string = "true; $0 }).collect::<Vec<_>>()"
                let v624 : bool = Fable.Core.RustInterop.emitRustExpr v622 v623 
                let v625 : string = "_vec_map"
                let v626 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v625 
                let v627 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v628 : (string []) = Fable.Core.RustInterop.emitRustExpr v626 v627 
                let v633 : unit = ()
                let _let'_v633 =
                    seq {
                        for i = 0 to v628.Length - 1 do yield v628.[i]
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v636 : string seq = _let'_v633 
                let v644 : string = method75()
                let v645 : (string -> (string seq -> string)) = String.concat
                let v646 : (string seq -> string) = v645 v644
                let v647 : string = v646 v636
                
                
                let v651 : bool =
                    match v247 with
                    | US10_0 -> (* Erlang *)
                        true
                    | _ ->
                        false
                let v655 : US5 =
                    if v651 then
                        let v652 : string = "Erlang"
                        US5_0(v652)
                    else
                        US5_1
                let v669 : US5 =
                    match v655 with
                    | US5_1 -> (* None *)
                        let v658 : bool =
                            match v247 with
                            | US10_1 -> (* JavaScript *)
                                true
                            | _ ->
                                false
                        let v662 : US5 =
                            if v658 then
                                let v659 : string = "JavaScript"
                                US5_0(v659)
                            else
                                US5_1
                        match v662 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v663) -> (* Some *)
                            US5_0(v663)
                    | US5_0(v656) -> (* Some *)
                        US5_0(v656)
                let v673 : string =
                    match v669 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v670) -> (* Some *)
                        v670
                let v675 : (unit -> string) = v673.ToLower
                let v676 : string = v675 ()
                let v681 : string = "_real"
                let v682 : bool = v114.Contains v681 
                let v687 : string =
                    if v682 then
                        let v685 : string = "main_real"
                        v685
                    else
                        let v686 : string = "main"
                        v686
                let v688 : string = $"name = \"{v687}\""
                let v689 : string = $"target = \"{v676}\""
                let v690 : string = "\n"
                let v691 : string = v688 + v690 
                let v692 : string = v691 + v689 
                let v693 : string = $""
                let v694 : string = v692 + v690 
                let v695 : string = v694 + v693 
                let v696 : string = $"[dependencies]"
                let v697 : string = v695 + v690 
                let v698 : string = v697 + v696 
                let v699 : string = $"{v647}"
                let v700 : string = v698 + v690 
                let v701 : string = v700 + v699 
                method76(v508, v701)
                let v703 : System.Threading.CancellationToken option = None
                let v706 : (struct (string * string) []) = [||]
                let v708 : (struct (int32 * string * bool) -> Async<unit>) option = None
                let v712 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                let v716 : string option = None
                let v719 : string = $"gleam check"
                let v721 : string option = Some v506 
                let v724 : bool = true
                let struct (v725 : int32, v726 : string) = method101(v719, v703, v706, v708, v712, v724, v721)
                let v728 : bool = v725 <> 0 
                let struct (v1510 : US5, v1511 : US5, v1512 : US5, v1513 : US5) =
                    if v728 then
                        let v731 : unit = ()
                        let v732 : (unit -> unit) = closure68(v114, v726, v725)
                        let v733 : unit = (fun () -> v732 (); v731) ()
                        let v780 : US5 = US5_0(v421)
                        let v781 : US5 = US5_1
                        let v782 : US5 = US5_1
                        let v783 : US5 = US5_1
                        struct (v780, v781, v782, v783)
                    else
                        let v784 : bool =
                            match v247 with
                            | US10_0 -> (* Erlang *)
                                true
                            | _ ->
                                false
                        let v787 : string =
                            if v784 then
                                let v785 : string = $"gleam run --no-print-progress \"{v114}\""
                                v785
                            else
                                let v786 : string = $"gleam build --no-print-progress"
                                v786
                        let v788 : string = "TRACE_LEVEL"
                        let v789 : string = "GLEAM_LOG"
                        let v790 : string = "GLEAM_LOG_NOCOLOUR"
                        let v791 : (struct (string * string) []) = [|struct (v788, v499); struct (v789, v499); struct (v790, v499)|]
                        let v793 : System.Threading.CancellationToken option = None
                        let v796 : (struct (string * string) []) = [||]
                        let v798 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v802 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v806 : string option = None
                        let v810 : string option = Some v506 
                        let v813 : bool = true
                        let struct (v814 : int32, v815 : string) = method101(v787, v793, v791, v798, v802, v813, v810)
                        let v816 : int32 = v791.Length
                        let v817 : (string []) = Array.zeroCreate<string> (v816)
                        let v818 : Mut5 = {l0 = 0} : Mut5
                        while method32(v816, v818) do
                            let v820 : int32 = v818.l0
                            let struct (v821 : string, v822 : string) = v791.[int v820]
                            let v823 : string = $"$env:{v821}=''{v822}''"
                            v817.[int v820] <- v823
                            let v824 : int32 = v820 + 1
                            v818.l0 <- v824
                            ()
                        let v826 : string seq = v817 |> Seq.ofArray
                        let v831 : (string -> (string seq -> string)) = String.concat
                        let v832 : string = ";"
                        let v833 : (string seq -> string) = v831 v832
                        let v834 : string = v833 v826
                        let v837 : string = $"pwsh -c '{v834}; {v787}'"
                        let v839 : bool = v814 <> 0 
                        let struct (v1506 : US5, v1507 : US5, v1508 : US5, v1509 : US5) =
                            if v839 then
                                let v842 : unit = ()
                                let v843 : (unit -> unit) = closure69(v114, v815, v814, v837)
                                let v844 : unit = (fun () -> v843 (); v842) ()
                                let v891 : US5 = US5_0(v421)
                                let v892 : US5 = US5_1
                                let v893 : US5 = US5_1
                                let v894 : US5 = US5_1
                                struct (v891, v892, v893, v894)
                            else
                                let v895 : bool =
                                    match v247 with
                                    | US10_0 -> (* Erlang *)
                                        true
                                    | _ ->
                                        false
                                let v1413 : string =
                                    if v895 then
                                        v815
                                    else
                                        let v896 : string = $"{v506}/build/dev/javascript/main/main.mjs"
                                        (* run_target_args'
                                        let v901 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v906 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v907 : string = "std::fs::read(&*$0)"
                                        let v908 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v896 v907 
                                        (* run_target_args'
                                        let v910 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v911 : string = "$0.unwrap()"
                                        let v912 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v908 v911 
                                        let _run_target_args'_v910 = v912 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v913 : string = "$0.unwrap()"
                                        let v914 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v908 v913 
                                        let _run_target_args'_v910 = v914 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v915 : string = "$0.unwrap()"
                                        let v916 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v908 v915 
                                        let _run_target_args'_v910 = v916 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v917 : Vec<uint8> = match v908 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v910 = v917 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v918 : Vec<uint8> = match v908 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v910 = v918 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v919 : Vec<uint8> = match v908 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v910 = v919 
                                        #endif
#else
                                        let v920 : Vec<uint8> = match v908 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v910 = v920 
                                        #endif
                                        let v921 : Vec<uint8> = _run_target_args'_v910 
                                        let _run_target_args'_v906 = v921 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v925 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v906 = v925 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v929 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v906 = v929 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v933 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v906 = v933 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v937 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v906 = v937 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v941 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v906 = v941 
                                        #endif
#else
                                        let v944 : (uint8 []) = v896 |> System.IO.File.ReadAllBytes
                                        let v945 : string = "$0.to_vec()"
                                        let v946 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v944 v945 
                                        let _run_target_args'_v906 = v946 
                                        #endif
                                        let v947 : Vec<uint8> = _run_target_args'_v906 
                                        let v953 : Vec<uint8> = method27(v947)
                                        let v954 : string = "std::string::String::from_utf8($0)"
                                        let v955 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v953 v954 
                                        (* run_target_args'
                                        let v957 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v958 : string = "$0.unwrap()"
                                        let v959 : std_string_String = Fable.Core.RustInterop.emitRustExpr v955 v958 
                                        let _run_target_args'_v957 = v959 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v960 : string = "$0.unwrap()"
                                        let v961 : std_string_String = Fable.Core.RustInterop.emitRustExpr v955 v960 
                                        let _run_target_args'_v957 = v961 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v962 : string = "$0.unwrap()"
                                        let v963 : std_string_String = Fable.Core.RustInterop.emitRustExpr v955 v962 
                                        let _run_target_args'_v957 = v963 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v964 : std_string_String = match v955 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v957 = v964 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v965 : std_string_String = match v955 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v957 = v965 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v966 : std_string_String = match v955 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v957 = v966 
                                        #endif
#else
                                        let v967 : std_string_String = match v955 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v957 = v967 
                                        #endif
                                        let v968 : std_string_String = _run_target_args'_v957 
                                        let v971 : string = "fable_library_rust::String_::fromString($0)"
                                        let v972 : string = Fable.Core.RustInterop.emitRustExpr v968 v971 
                                        let _run_target_args'_v901 = v972 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v974 : string = null |> unbox<string>
                                        let _run_target_args'_v901 = v974 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v978 : string = null |> unbox<string>
                                        let _run_target_args'_v901 = v978 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v982 : string = null |> unbox<string>
                                        let _run_target_args'_v901 = v982 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v986 : string = null |> unbox<string>
                                        let _run_target_args'_v901 = v986 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v990 : string = null |> unbox<string>
                                        let _run_target_args'_v901 = v990 
                                        #endif
#else
                                        let v993 : string = v896 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v901 = v993 
                                        #endif
                                        let v994 : string = _run_target_args'_v901 
                                        let v1000 : string = $"#app_"
                                        let v1001 : string = $"#app_{v423}"
                                        let v1002 : string = v994.Replace (v1000, v1001)
                                        let v1005 : string = "main()"
                                        let v1006 : bool = v1002.EndsWith (v1005, false, null)
                                        let v1009 : bool = v1006 = false
                                        if v1009 then
                                            let v1010 : string = $"{v1002}
main()"
                                            method76(v896, v1010)
                                        let v1012 : System.Threading.CancellationToken option = None
                                        let v1015 : (struct (string * string) []) = [||]
                                        let v1017 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v1021 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v1025 : string option = None
                                        let v1028 : string = $"bunx --bun esbuild --bundle --minify --loader:.wasm=file --outdir={v503} {v896}"
                                        let v1029 : string = "PATH"
                                        let v1030 : string = method3(v1029)
                                        let v1031 : bool = v1030 = ""
                                        let v1069 : US5 =
                                            if v1031 then
                                                US5_1
                                            else
                                                (* run_target_args'
                                                let v1037 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1038 : string = "cfg!(windows)"
                                                let v1039 : bool = Fable.Core.RustInterop.emitRustExpr () v1038 
                                                let _run_target_args'_v1037 = v1039 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1040 : string = "cfg!(windows)"
                                                let v1041 : bool = Fable.Core.RustInterop.emitRustExpr () v1040 
                                                let _run_target_args'_v1037 = v1041 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1042 : string = "cfg!(windows)"
                                                let v1043 : bool = Fable.Core.RustInterop.emitRustExpr () v1042 
                                                let _run_target_args'_v1037 = v1043 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1044 : US3 = US3_0
                                                let v1045 : US4 = US4_4(v1044)
                                                let v1046 : string = $"platform.is_windows / target: {v1045}"
                                                let v1047 : bool = failwith<bool> v1046
                                                let _run_target_args'_v1037 = v1047 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1048 : US3 = US3_0
                                                let v1049 : US4 = US4_5(v1048)
                                                let v1050 : string = $"platform.is_windows / target: {v1049}"
                                                let v1051 : bool = failwith<bool> v1050
                                                let _run_target_args'_v1037 = v1051 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1052 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v1053 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v1054 : bool = v1053 v1052
                                                let _run_target_args'_v1037 = v1054 
                                                #endif
#else
                                                let v1055 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                let v1056 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                let v1057 : bool = v1056 v1055
                                                let _run_target_args'_v1037 = v1057 
                                                #endif
                                                let v1058 : bool = _run_target_args'_v1037 
                                                let v1065 : string =
                                                    if v1058 then
                                                        v832
                                                    else
                                                        let v1064 : string = ":"
                                                        v1064
                                                let v1066 : string = "~/.bun/bin"
                                                let v1067 : string = $"{v1066}{v1065}{v1030}"
                                                US5_0(v1067)
                                        let v1074 : (struct (string * string) []) =
                                            match v1069 with
                                            | US5_1 -> (* None *)
                                                [||]
                                            | US5_0(v1070) -> (* Some *)
                                                [|struct (v1029, v1070)|]
                                        let v1076 : string option = Some v506 
                                        let v1079 : bool = true
                                        let struct (v1080 : int32, v1081 : string) = method101(v1028, v1012, v1074, v1017, v1021, v1079, v1076)
                                        let v1083 : bool = v1080 <> 0 
                                        if v1083 then
                                            let v1086 : unit = ()
                                            let v1087 : (unit -> unit) = closure70(v114, v1081, v1080)
                                            let v1088 : unit = (fun () -> v1087 (); v1086) ()
                                            v499
                                        else
                                            let v1135 : string = $"<!DOCTYPE html>"
                                            let v1136 : string = $"<html lang=\"en\">"
                                            let v1137 : string = v1135 + v690 
                                            let v1138 : string = v1137 + v1136 
                                            let v1139 : string = $"  <head>"
                                            let v1140 : string = v1138 + v690 
                                            let v1141 : string = v1140 + v1139 
                                            let v1142 : string = $"    <meta charset=\"UTF-8\" />"
                                            let v1143 : string = v1141 + v690 
                                            let v1144 : string = v1143 + v1142 
                                            let v1145 : string = $"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />"
                                            let v1146 : string = v1144 + v690 
                                            let v1147 : string = v1146 + v1145 
                                            let v1148 : string = $"    <link"
                                            let v1149 : string = v1147 + v690 
                                            let v1150 : string = v1149 + v1148 
                                            let v1151 : string = $"      data-trunk"
                                            let v1152 : string = v1150 + v690 
                                            let v1153 : string = v1152 + v1151 
                                            let v1154 : string = $"      rel=\"inline\""
                                            let v1155 : string = v1153 + v690 
                                            let v1156 : string = v1155 + v1154 
                                            let v1157 : string = $"      href=\"../build/packages/lustre_ui/priv/static/lustre_ui.css\""
                                            let v1158 : string = v1156 + v690 
                                            let v1159 : string = v1158 + v1157 
                                            let v1160 : string = $"    />"
                                            let v1161 : string = v1159 + v690 
                                            let v1162 : string = v1161 + v1160 
                                            let v1163 : string = $"    <link"
                                            let v1164 : string = v1162 + v690 
                                            let v1165 : string = v1164 + v1163 
                                            let v1166 : string = $"      data-trunk"
                                            let v1167 : string = v1165 + v690 
                                            let v1168 : string = v1167 + v1166 
                                            let v1169 : string = $"      rel=\"inline\""
                                            let v1170 : string = v1168 + v690 
                                            let v1171 : string = v1170 + v1169 
                                            let v1172 : string = $"      type=\"module\""
                                            let v1173 : string = v1171 + v690 
                                            let v1174 : string = v1173 + v1172 
                                            let v1175 : string = $"      href=\"main.js\""
                                            let v1176 : string = v1174 + v690 
                                            let v1177 : string = v1176 + v1175 
                                            let v1178 : string = $"    />"
                                            let v1179 : string = v1177 + v690 
                                            let v1180 : string = v1179 + v1178 
                                            let v1181 : string = $"  </head>"
                                            let v1182 : string = v1180 + v690 
                                            let v1183 : string = v1182 + v1181 
                                            let v1184 : string = $"  <body>"
                                            let v1185 : string = v1183 + v690 
                                            let v1186 : string = v1185 + v1184 
                                            let v1187 : string = $"    <div id=\"app_{v423}\"></div>"
                                            let v1188 : string = v1186 + v690 
                                            let v1189 : string = v1188 + v1187 
                                            let v1190 : string = $"  </body>"
                                            let v1191 : string = v1189 + v690 
                                            let v1192 : string = v1191 + v1190 
                                            let v1193 : string = $"</html>"
                                            let v1194 : string = v1192 + v690 
                                            let v1195 : string = v1194 + v1193 
                                            let v1196 : string = $"{v503}/index.html"
                                            method76(v1196, v1195)
                                            let v1197 : string = $"{v503}/spiral_{v423}.rs"
                                            method76(v1197, v499)
                                            let v1198 : string = $"[package]"
                                            let v1199 : string = $"name = \"spiral_{v423}\""
                                            let v1200 : string = v1198 + v690 
                                            let v1201 : string = v1200 + v1199 
                                            let v1202 : string = $""
                                            let v1203 : string = v1201 + v690 
                                            let v1204 : string = v1203 + v1202 
                                            let v1205 : string = $"[workspace]"
                                            let v1206 : string = v1204 + v690 
                                            let v1207 : string = v1206 + v1205 
                                            let v1208 : string = $""
                                            let v1209 : string = v1207 + v690 
                                            let v1210 : string = v1209 + v1208 
                                            let v1211 : string = $"[lib]"
                                            let v1212 : string = v1210 + v690 
                                            let v1213 : string = v1212 + v1211 
                                            let v1214 : string = $"crate-type = [\"cdylib\", \"rlib\"]"
                                            let v1215 : string = v1213 + v690 
                                            let v1216 : string = v1215 + v1214 
                                            let v1217 : string = $"path = \"spiral_{v423}.rs\""
                                            let v1218 : string = v1216 + v690 
                                            let v1219 : string = v1218 + v1217 
                                            let v1220 : string = $""
                                            let v1221 : string = v1219 + v690 
                                            let v1222 : string = v1221 + v1220 
                                            let v1223 : string = $"[dependencies]"
                                            let v1224 : string = v1222 + v690 
                                            let v1225 : string = v1224 + v1223 
                                            let v1226 : string = $"{v503}/Cargo.toml"
                                            method76(v1226, v1225)
                                            let v1228 : System.Threading.CancellationToken option = None
                                            let v1231 : (struct (string * string) []) = [||]
                                            let v1233 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v1237 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v1241 : string option = None
                                            let v1244 : string = $"trunk build --release --minify --dist={v503} --public-url=./ --no-sri"
                                            let v1245 : string = "TRUNK_TOOLS_WASM_BINDGEN"
                                            let v1246 : string = "0.2.93"
                                            let v1247 : (struct (string * string) []) = [|struct (v1245, v1246)|]
                                            let v1249 : string option = Some v503 
                                            let v1252 : bool = true
                                            let struct (v1253 : int32, v1254 : string) = method101(v1244, v1228, v1247, v1233, v1237, v1252, v1249)
                                            let v1256 : bool = v1253 <> 0 
                                            if v1256 then
                                                let v1259 : unit = ()
                                                let v1260 : (unit -> unit) = closure71(v114, v1254, v1253)
                                                let v1261 : unit = (fun () -> v1260 (); v1259) ()
                                                v499
                                            else
                                                (* run_target_args'
                                                let v1312 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v1317 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1318 : string = "std::fs::read(&*$0)"
                                                let v1319 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1196 v1318 
                                                (* run_target_args'
                                                let v1321 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1322 : string = "$0.unwrap()"
                                                let v1323 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1319 v1322 
                                                let _run_target_args'_v1321 = v1323 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1324 : string = "$0.unwrap()"
                                                let v1325 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1319 v1324 
                                                let _run_target_args'_v1321 = v1325 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1326 : string = "$0.unwrap()"
                                                let v1327 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1319 v1326 
                                                let _run_target_args'_v1321 = v1327 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1328 : Vec<uint8> = match v1319 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1321 = v1328 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1329 : Vec<uint8> = match v1319 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1321 = v1329 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1330 : Vec<uint8> = match v1319 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1321 = v1330 
                                                #endif
#else
                                                let v1331 : Vec<uint8> = match v1319 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1321 = v1331 
                                                #endif
                                                let v1332 : Vec<uint8> = _run_target_args'_v1321 
                                                let _run_target_args'_v1317 = v1332 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1336 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1317 = v1336 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1340 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1317 = v1340 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1344 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1317 = v1344 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1348 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1317 = v1348 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1352 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v1317 = v1352 
                                                #endif
#else
                                                let v1355 : (uint8 []) = v1196 |> System.IO.File.ReadAllBytes
                                                let v1356 : string = "$0.to_vec()"
                                                let v1357 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1355 v1356 
                                                let _run_target_args'_v1317 = v1357 
                                                #endif
                                                let v1358 : Vec<uint8> = _run_target_args'_v1317 
                                                let v1364 : Vec<uint8> = method27(v1358)
                                                let v1365 : string = "std::string::String::from_utf8($0)"
                                                let v1366 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1364 v1365 
                                                (* run_target_args'
                                                let v1368 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v1369 : string = "$0.unwrap()"
                                                let v1370 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1366 v1369 
                                                let _run_target_args'_v1368 = v1370 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1371 : string = "$0.unwrap()"
                                                let v1372 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1366 v1371 
                                                let _run_target_args'_v1368 = v1372 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1373 : string = "$0.unwrap()"
                                                let v1374 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1366 v1373 
                                                let _run_target_args'_v1368 = v1374 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1375 : std_string_String = match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1368 = v1375 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1376 : std_string_String = match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1368 = v1376 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1377 : std_string_String = match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1368 = v1377 
                                                #endif
#else
                                                let v1378 : std_string_String = match v1366 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v1368 = v1378 
                                                #endif
                                                let v1379 : std_string_String = _run_target_args'_v1368 
                                                let v1382 : string = "fable_library_rust::String_::fromString($0)"
                                                let v1383 : string = Fable.Core.RustInterop.emitRustExpr v1379 v1382 
                                                let _run_target_args'_v1312 = v1383 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v1385 : string = null |> unbox<string>
                                                let _run_target_args'_v1312 = v1385 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v1389 : string = null |> unbox<string>
                                                let _run_target_args'_v1312 = v1389 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v1393 : string = null |> unbox<string>
                                                let _run_target_args'_v1312 = v1393 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v1397 : string = null |> unbox<string>
                                                let _run_target_args'_v1312 = v1397 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v1401 : string = null |> unbox<string>
                                                let _run_target_args'_v1312 = v1401 
                                                #endif
#else
                                                let v1404 : string = v1196 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v1312 = v1404 
                                                #endif
                                                let v1405 : string = _run_target_args'_v1312 
                                                v1405
                                (* run_target_args'
                                let v1418 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1419 : string = "&*$0"
                                let v1420 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1413 v1419 
                                let _run_target_args'_v1418 = v1420 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1421 : string = "&*$0"
                                let v1422 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1413 v1421 
                                let _run_target_args'_v1418 = v1422 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1423 : string = "&*$0"
                                let v1424 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1413 v1423 
                                let _run_target_args'_v1418 = v1424 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1426 : Ref<Str> = v1413 |> unbox<Ref<Str>>
                                let _run_target_args'_v1418 = v1426 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1430 : Ref<Str> = v1413 |> unbox<Ref<Str>>
                                let _run_target_args'_v1418 = v1430 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1434 : Ref<Str> = v1413 |> unbox<Ref<Str>>
                                let _run_target_args'_v1418 = v1434 
                                #endif
#else
                                let v1438 : Ref<Str> = v1413 |> unbox<Ref<Str>>
                                let _run_target_args'_v1418 = v1438 
                                #endif
                                let v1441 : Ref<Str> = _run_target_args'_v1418 
                                (* run_target_args'
                                let v1451 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1452 : string = "String::from($0)"
                                let v1453 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1441 v1452 
                                let _run_target_args'_v1451 = v1453 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1454 : string = "String::from($0)"
                                let v1455 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1441 v1454 
                                let _run_target_args'_v1451 = v1455 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1456 : string = "String::from($0)"
                                let v1457 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1441 v1456 
                                let _run_target_args'_v1451 = v1457 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1459 : std_string_String = v1441 |> unbox<std_string_String>
                                let _run_target_args'_v1451 = v1459 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1463 : std_string_String = v1441 |> unbox<std_string_String>
                                let _run_target_args'_v1451 = v1463 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1467 : std_string_String = v1441 |> unbox<std_string_String>
                                let _run_target_args'_v1451 = v1467 
                                #endif
#else
                                let v1471 : std_string_String = v1441 |> unbox<std_string_String>
                                let _run_target_args'_v1451 = v1471 
                                #endif
                                let v1474 : std_string_String = _run_target_args'_v1451 
                                let v1480 : (string -> US5) = closure72()
                                let v1481 : (unit -> string) = closure73(v1413)
                                let v1482 : (exn -> US5) = closure74(v114, v837, v1474)
                                let v1484 : US5 = US5_1
                                let result = ref v1484
                                try
                                    result.Value <- v1481 () |> v1480 
                                with ex ->
                                    result.Value <- v1482 ex 
                                let v1485 : US5 = result.Value
                                let v1499 : string option =
                                    match v1485 with
                                    | US5_1 -> (* None *)
                                        let v1495 : string option = None
                                        v1495
                                    | US5_0(v1489) -> (* Some *)
                                        let v1491 : string option = Some v1489 
                                        v1491
                                let v1500 : string = "$0.unwrap()"
                                let v1501 : string = Fable.Core.RustInterop.emitRustExpr v1499 v1500 
                                let v1502 : US5 = US5_0(v421)
                                let v1503 : US5 = US5_0(v415)
                                let v1504 : US5 = US5_0(v114)
                                let v1505 : US5 = US5_0(v1501)
                                struct (v1502, v1503, v1504, v1505)
                        struct (v1506, v1507, v1508, v1509)
                let v1516 : string =
                    match v1510 with
                    | US5_1 -> (* None *)
                        v499
                    | US5_0(v1514) -> (* Some *)
                        v1514
                let v1517 : string = "extension"
                let v1520 : string =
                    match v1511 with
                    | US5_1 -> (* None *)
                        v499
                    | US5_0(v1518) -> (* Some *)
                        v1518
                let v1521 : string = "code"
                let v1524 : string =
                    match v1513 with
                    | US5_1 -> (* None *)
                        v499
                    | US5_0(v1522) -> (* Some *)
                        v1522
                let v1525 : string = "output"
                let v1526 : (struct (string * string) []) = [|struct (v1517, v1516); struct (v1521, v1520); struct (v1525, v1524)|]
                let v1527 : string = "$0.to_vec()"
                let v1528 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v1526 v1527 
                let v1529 : unit = ()
                let v1530 : string = $"true; let _func1_from_v1529 = Func1::from(move |value| {{ //"
                let v1531 : bool = Fable.Core.RustInterop.emitRustExpr () v1530 
                let v1532 : string = $"value"
                let struct (v1533 : string, v1534 : string) = Fable.Core.RustInterop.emitRustExpr () v1532 
                (* run_target_args'
                let v1539 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1540 : string = "&*$0"
                let v1541 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1533 v1540 
                let _run_target_args'_v1539 = v1541 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1542 : string = "&*$0"
                let v1543 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1533 v1542 
                let _run_target_args'_v1539 = v1543 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1544 : string = "&*$0"
                let v1545 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1533 v1544 
                let _run_target_args'_v1539 = v1545 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1547 : Ref<Str> = v1533 |> unbox<Ref<Str>>
                let _run_target_args'_v1539 = v1547 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1551 : Ref<Str> = v1533 |> unbox<Ref<Str>>
                let _run_target_args'_v1539 = v1551 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1555 : Ref<Str> = v1533 |> unbox<Ref<Str>>
                let _run_target_args'_v1539 = v1555 
                #endif
#else
                let v1559 : Ref<Str> = v1533 |> unbox<Ref<Str>>
                let _run_target_args'_v1539 = v1559 
                #endif
                let v1562 : Ref<Str> = _run_target_args'_v1539 
                (* run_target_args'
                let v1572 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1573 : string = "String::from($0)"
                let v1574 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1562 v1573 
                let _run_target_args'_v1572 = v1574 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1575 : string = "String::from($0)"
                let v1576 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1562 v1575 
                let _run_target_args'_v1572 = v1576 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1577 : string = "String::from($0)"
                let v1578 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1562 v1577 
                let _run_target_args'_v1572 = v1578 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1580 : std_string_String = v1562 |> unbox<std_string_String>
                let _run_target_args'_v1572 = v1580 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1584 : std_string_String = v1562 |> unbox<std_string_String>
                let _run_target_args'_v1572 = v1584 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1588 : std_string_String = v1562 |> unbox<std_string_String>
                let _run_target_args'_v1572 = v1588 
                #endif
#else
                let v1592 : std_string_String = v1562 |> unbox<std_string_String>
                let _run_target_args'_v1572 = v1592 
                #endif
                let v1595 : std_string_String = _run_target_args'_v1572 
                (* run_target_args'
                let v1605 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1606 : string = "&*$0"
                let v1607 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1534 v1606 
                let _run_target_args'_v1605 = v1607 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1608 : string = "&*$0"
                let v1609 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1534 v1608 
                let _run_target_args'_v1605 = v1609 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1610 : string = "&*$0"
                let v1611 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1534 v1610 
                let _run_target_args'_v1605 = v1611 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1613 : Ref<Str> = v1534 |> unbox<Ref<Str>>
                let _run_target_args'_v1605 = v1613 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1617 : Ref<Str> = v1534 |> unbox<Ref<Str>>
                let _run_target_args'_v1605 = v1617 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1621 : Ref<Str> = v1534 |> unbox<Ref<Str>>
                let _run_target_args'_v1605 = v1621 
                #endif
#else
                let v1625 : Ref<Str> = v1534 |> unbox<Ref<Str>>
                let _run_target_args'_v1605 = v1625 
                #endif
                let v1628 : Ref<Str> = _run_target_args'_v1605 
                (* run_target_args'
                let v1638 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1639 : string = "String::from($0)"
                let v1640 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1628 v1639 
                let _run_target_args'_v1638 = v1640 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1641 : string = "String::from($0)"
                let v1642 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1628 v1641 
                let _run_target_args'_v1638 = v1642 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1643 : string = "String::from($0)"
                let v1644 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1628 v1643 
                let _run_target_args'_v1638 = v1644 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1646 : std_string_String = v1628 |> unbox<std_string_String>
                let _run_target_args'_v1638 = v1646 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1650 : std_string_String = v1628 |> unbox<std_string_String>
                let _run_target_args'_v1638 = v1650 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1654 : std_string_String = v1628 |> unbox<std_string_String>
                let _run_target_args'_v1638 = v1654 
                #endif
#else
                let v1658 : std_string_String = v1628 |> unbox<std_string_String>
                let _run_target_args'_v1638 = v1658 
                #endif
                let v1661 : std_string_String = _run_target_args'_v1638 
                let v1668 : (std_string_String * std_string_String) = v1595, v1661 
                let func1_from_result = v1668 //
                let v1671 : _ = func1_from_result
                let v1672 : string = $"true; $0 /*"
                let v1673 : bool = Fable.Core.RustInterop.emitRustExpr v1671 v1672 
                let v1674 : string = $"*/ }}); //"
                let v1675 : bool = Fable.Core.RustInterop.emitRustExpr () v1674 
                let v1676 : string = $"_func1_from_v1529"
                let v1677 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v1676 
                let v1678 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v1679 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v1677)
                let v1680 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v1528, v1679) v1678 
                let v1681 : string = "std::collections::BTreeMap::from_iter(v1680.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v1682 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v1681 
                let v1683 : string = "serde_json::to_string(&v1682)"
                let v1684 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v1683 
                (* run_target_args'
                let v1686 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1687 : string = "$0.unwrap()"
                let v1688 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1684 v1687 
                let _run_target_args'_v1686 = v1688 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1689 : string = "$0.unwrap()"
                let v1690 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1684 v1689 
                let _run_target_args'_v1686 = v1690 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1691 : string = "$0.unwrap()"
                let v1692 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1684 v1691 
                let _run_target_args'_v1686 = v1692 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1693 : std_string_String = match v1684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1686 = v1693 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1694 : std_string_String = match v1684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1686 = v1694 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1695 : std_string_String = match v1684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1686 = v1695 
                #endif
#else
                let v1696 : std_string_String = match v1684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _run_target_args'_v1686 = v1696 
                #endif
                let v1697 : std_string_String = _run_target_args'_v1686 
                let v1700 : string = "fable_library_rust::String_::fromString($0)"
                let v1701 : string = Fable.Core.RustInterop.emitRustExpr v1697 v1700 
                let v1702 : string = "command_result"
                [|struct (v1702, v1701)|]
            else
                let v1704 : string = "fable_library_rust::String_::fromString($0)"
                let v1705 : string = Fable.Core.RustInterop.emitRustExpr v40 v1704 
                let v1706 : bool = v1705 = "cuda"
                if v1706 then
                    let v1707 : string = method184()
                    (* run_target_args'
                    let v1712 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1713 : string = "&*$0"
                    let v1714 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1707 v1713 
                    let _run_target_args'_v1712 = v1714 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1715 : string = "&*$0"
                    let v1716 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1707 v1715 
                    let _run_target_args'_v1712 = v1716 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1717 : string = "&*$0"
                    let v1718 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1707 v1717 
                    let _run_target_args'_v1712 = v1718 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1720 : Ref<Str> = v1707 |> unbox<Ref<Str>>
                    let _run_target_args'_v1712 = v1720 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1724 : Ref<Str> = v1707 |> unbox<Ref<Str>>
                    let _run_target_args'_v1712 = v1724 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1728 : Ref<Str> = v1707 |> unbox<Ref<Str>>
                    let _run_target_args'_v1712 = v1728 
                    #endif
#else
                    let v1732 : Ref<Str> = v1707 |> unbox<Ref<Str>>
                    let _run_target_args'_v1712 = v1732 
                    #endif
                    let v1735 : Ref<Str> = _run_target_args'_v1712 
                    let v1741 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v1742 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v1735) v1741 
                    let v1745 : (std_string_String -> US7) = method23()
                    let v1746 : US7 option = v1742 |> Option.map v1745 
                    let v1766 : US7 = US7_1
                    let v1767 : US7 = v1746 |> Option.defaultValue v1766 
                    let v1774 : std_string_String =
                        match v1767 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v1771) -> (* Some *)
                            v1771
                    let v1775 : string = "fable_library_rust::String_::fromString($0)"
                    let v1776 : string = Fable.Core.RustInterop.emitRustExpr v1774 v1775 
                    let v1777 : string = method185()
                    (* run_target_args'
                    let v1782 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1783 : string = "&*$0"
                    let v1784 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1777 v1783 
                    let _run_target_args'_v1782 = v1784 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1785 : string = "&*$0"
                    let v1786 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1777 v1785 
                    let _run_target_args'_v1782 = v1786 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1787 : string = "&*$0"
                    let v1788 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1777 v1787 
                    let _run_target_args'_v1782 = v1788 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1790 : Ref<Str> = v1777 |> unbox<Ref<Str>>
                    let _run_target_args'_v1782 = v1790 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1794 : Ref<Str> = v1777 |> unbox<Ref<Str>>
                    let _run_target_args'_v1782 = v1794 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1798 : Ref<Str> = v1777 |> unbox<Ref<Str>>
                    let _run_target_args'_v1782 = v1798 
                    #endif
#else
                    let v1802 : Ref<Str> = v1777 |> unbox<Ref<Str>>
                    let _run_target_args'_v1782 = v1802 
                    #endif
                    let v1805 : Ref<Str> = _run_target_args'_v1782 
                    let v1811 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v1812 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v1805) v1811 
                    let v1815 : (std_string_String -> US7) = method23()
                    let v1816 : US7 option = v1812 |> Option.map v1815 
                    let v1836 : US7 = US7_1
                    let v1837 : US7 = v1816 |> Option.defaultValue v1836 
                    let v1898 : US36 =
                        match v1837 with
                        | US7_1 -> (* None *)
                            US36_1
                        | US7_0(v1841) -> (* Some *)
                            let v1842 : string = "fable_library_rust::String_::fromString($0)"
                            let v1843 : string = Fable.Core.RustInterop.emitRustExpr v1841 v1842 
                            
                            
                            
                            
                            let v1846 : string = "Poetry"
                            let v1847 : (unit -> string) = v1846.ToLower
                            let v1848 : string = v1847 ()
                            let v1853 : string = "Pip"
                            let v1854 : (unit -> string) = v1853.ToLower
                            let v1855 : string = v1854 ()
                            let v1858 : bool = "Pip" = v1843
                            let v1862 : US37 =
                                if v1858 then
                                    let v1859 : US38 = US38_0
                                    US37_0(v1859)
                                else
                                    US37_1
                            let v1894 : US37 =
                                match v1862 with
                                | US37_1 -> (* None *)
                                    let v1865 : bool = "Poetry" = v1843
                                    let v1869 : US37 =
                                        if v1865 then
                                            let v1866 : US38 = US38_1
                                            US37_0(v1866)
                                        else
                                            US37_1
                                    match v1869 with
                                    | US37_1 -> (* None *)
                                        let v1872 : bool = v1855 = v1843
                                        let v1876 : US37 =
                                            if v1872 then
                                                let v1873 : US38 = US38_0
                                                US37_0(v1873)
                                            else
                                                US37_1
                                        match v1876 with
                                        | US37_1 -> (* None *)
                                            let v1879 : bool = v1848 = v1843
                                            let v1883 : US37 =
                                                if v1879 then
                                                    let v1880 : US38 = US38_1
                                                    US37_0(v1880)
                                                else
                                                    US37_1
                                            match v1883 with
                                            | US37_1 -> (* None *)
                                                US37_1
                                            | US37_0(v1884) -> (* Some *)
                                                US37_0(v1884)
                                        | US37_0(v1877) -> (* Some *)
                                            US37_0(v1877)
                                    | US37_0(v1870) -> (* Some *)
                                        US37_0(v1870)
                                | US37_0(v1863) -> (* Some *)
                                    US37_0(v1863)
                            US36_0(v1894)
                    let v1905 : US37 =
                        match v1898 with
                        | US36_0(v1899) -> (* Some *)
                            match v1899 with
                            | US37_0(v1900) -> (* Some *)
                                US37_0(v1900)
                            | _ ->
                                US37_1
                        | _ ->
                            US37_1
                    let v1909 : US38 =
                        match v1905 with
                        | US37_1 -> (* None *)
                            US38_0
                        | US37_0(v1906) -> (* Some *)
                            v1906
                    let v1910 : string = method25()
                    (* run_target_args'
                    let v1915 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1916 : string = "&*$0"
                    let v1917 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1910 v1916 
                    let _run_target_args'_v1915 = v1917 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1918 : string = "&*$0"
                    let v1919 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1910 v1918 
                    let _run_target_args'_v1915 = v1919 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1920 : string = "&*$0"
                    let v1921 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1910 v1920 
                    let _run_target_args'_v1915 = v1921 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1923 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                    let _run_target_args'_v1915 = v1923 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1927 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                    let _run_target_args'_v1915 = v1927 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1931 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                    let _run_target_args'_v1915 = v1931 
                    #endif
#else
                    let v1935 : Ref<Str> = v1910 |> unbox<Ref<Str>>
                    let _run_target_args'_v1915 = v1935 
                    #endif
                    let v1938 : Ref<Str> = _run_target_args'_v1915 
                    let v1944 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                    let v1945 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v1938) v1944 
                    let v1948 : (Vec<std_string_String> -> US11) = method26()
                    let v1949 : US11 option = v1945 |> Option.map v1948 
                    let v1969 : US11 = US11_1
                    let v1970 : US11 = v1949 |> Option.defaultValue v1969 
                    let v1974 : (std_string_String []) = [||]
                    let v1975 : string = "$0.to_vec()"
                    let v1976 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1974 v1975 
                    let v1979 : Vec<std_string_String> =
                        match v1970 with
                        | US11_1 -> (* None *)
                            v1976
                        | US11_0(v1977) -> (* Some *)
                            v1977
                    (* run_target_args'
                    let v1984 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    (* run_target_args'
                    let v1989 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1990 : string = "std::fs::read(&*$0)"
                    let v1991 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1776 v1990 
                    (* run_target_args'
                    let v1993 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1994 : string = "$0.unwrap()"
                    let v1995 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1991 v1994 
                    let _run_target_args'_v1993 = v1995 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1996 : string = "$0.unwrap()"
                    let v1997 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1991 v1996 
                    let _run_target_args'_v1993 = v1997 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1998 : string = "$0.unwrap()"
                    let v1999 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1991 v1998 
                    let _run_target_args'_v1993 = v1999 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2000 : Vec<uint8> = match v1991 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1993 = v2000 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2001 : Vec<uint8> = match v1991 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1993 = v2001 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2002 : Vec<uint8> = match v1991 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1993 = v2002 
                    #endif
#else
                    let v2003 : Vec<uint8> = match v1991 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v1993 = v2003 
                    #endif
                    let v2004 : Vec<uint8> = _run_target_args'_v1993 
                    let _run_target_args'_v1989 = v2004 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2008 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1989 = v2008 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2012 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1989 = v2012 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2016 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1989 = v2016 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2020 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1989 = v2020 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2024 : Vec<uint8> = null |> unbox<Vec<uint8>>
                    let _run_target_args'_v1989 = v2024 
                    #endif
#else
                    let v2027 : (uint8 []) = v1776 |> System.IO.File.ReadAllBytes
                    let v2028 : string = "$0.to_vec()"
                    let v2029 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2027 v2028 
                    let _run_target_args'_v1989 = v2029 
                    #endif
                    let v2030 : Vec<uint8> = _run_target_args'_v1989 
                    let v2036 : Vec<uint8> = method27(v2030)
                    let v2037 : string = "std::string::String::from_utf8($0)"
                    let v2038 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2036 v2037 
                    (* run_target_args'
                    let v2040 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2041 : string = "$0.unwrap()"
                    let v2042 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2038 v2041 
                    let _run_target_args'_v2040 = v2042 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2043 : string = "$0.unwrap()"
                    let v2044 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2038 v2043 
                    let _run_target_args'_v2040 = v2044 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2045 : string = "$0.unwrap()"
                    let v2046 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2038 v2045 
                    let _run_target_args'_v2040 = v2046 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2047 : std_string_String = match v2038 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2040 = v2047 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2048 : std_string_String = match v2038 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2040 = v2048 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2049 : std_string_String = match v2038 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2040 = v2049 
                    #endif
#else
                    let v2050 : std_string_String = match v2038 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2040 = v2050 
                    #endif
                    let v2051 : std_string_String = _run_target_args'_v2040 
                    let v2054 : string = "fable_library_rust::String_::fromString($0)"
                    let v2055 : string = Fable.Core.RustInterop.emitRustExpr v2051 v2054 
                    let _run_target_args'_v1984 = v2055 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2057 : string = null |> unbox<string>
                    let _run_target_args'_v1984 = v2057 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2061 : string = null |> unbox<string>
                    let _run_target_args'_v1984 = v2061 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2065 : string = null |> unbox<string>
                    let _run_target_args'_v1984 = v2065 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2069 : string = null |> unbox<string>
                    let _run_target_args'_v1984 = v2069 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2073 : string = null |> unbox<string>
                    let _run_target_args'_v1984 = v2073 
                    #endif
#else
                    let v2076 : string = v1776 |> System.IO.File.ReadAllText
                    let _run_target_args'_v1984 = v2076 
                    #endif
                    let v2077 : string = _run_target_args'_v1984 
                    let v2083 : string = method34()
                    let v2084 : US5 = method35(v2083)
                    let v2090 : US5 =
                        match v2084 with
                        | US5_1 -> (* None *)
                            let v2087 : string = __SOURCE_DIRECTORY__
                            method35(v2087)
                        | US5_0(v2085) -> (* Some *)
                            US5_0(v2085)
                    let v2096 : US5 =
                        match v2090 with
                        | US5_1 -> (* None *)
                            let v2093 : string = "/workspaces"
                            method35(v2093)
                        | US5_0(v2091) -> (* Some *)
                            US5_0(v2091)
                    let v2100 : string =
                        match v2096 with
                        | US5_1 -> (* None *)
                            failwith<string> "Option does not have a value."
                        | US5_0(v2097) -> (* Some *)
                            v2097
                    let v2101 : string = method55(v2100)
                    let v2102 : bool = "deps" = v2101
                    let v2113 : string =
                        if v2102 then
                            let v2103 : string option = method41(v2100)
                            let v2105 : string = v2103 |> Option.get
                            let v2108 : US5 = method35(v2105)
                            match v2108 with
                            | US5_1 -> (* None *)
                                failwith<string> "Option does not have a value."
                            | US5_0(v2109) -> (* Some *)
                                v2109
                        else
                            v2100
                    let v2114 : string = "polyglot"
                    let v2115 : string = method36(v2113, v2114)
                    let v2116 : string = method34()
                    let v2118 : (unit -> string) = v2116.ToLower
                    let v2119 : string = v2118 ()
                    let v2123 : (unit -> string) = v2115.ToLower
                    let v2124 : string = v2123 ()
                    let v2128 : bool = v2119.StartsWith (v2124, false, null)
                    let v2133 : US13 =
                        if v2128 then
                            US13_1(v2124)
                        else
                            US13_0(v2124)
                    let v2145 : Result<string, string> =
                        match v2133 with
                        | US13_1(v2139) -> (* Error *)
                            let v2141 : Result<string, string> = Error v2139 
                            v2141
                        | US13_0(v2134) -> (* Ok *)
                            let v2136 : Result<string, string> = Ok v2134 
                            v2136
                    let v2146 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                    let v2147 : bool = Fable.Core.RustInterop.emitRustExpr v2145 v2146 
                    let v2148 : string = "x"
                    let v2149 : string = Fable.Core.RustInterop.emitRustExpr () v2148 
                    let v2150 : string = "true; $0 })"
                    let v2151 : bool = Fable.Core.RustInterop.emitRustExpr v2149 v2150 
                    let v2152 : string = "_result_unwrap_or_else"
                    let v2153 : string = Fable.Core.RustInterop.emitRustExpr () v2152 
                    let v2154 : string option = method41(v1776)
                    let v2157 : string = ""
                    let v2158 : string = v2154 |> Option.defaultValue v2157 
                    let v2166 : string =
                        match v1909 with
                        | US38_0 -> (* Pip *)
                            let v2161 : string = "requirements.txt"
                            method36(v2158, v2161)
                        | US38_1 -> (* Poetry *)
                            let v2163 : string = "pyproject.toml"
                            method36(v2158, v2163)
                    let v2167 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v2168 : bool = Fable.Core.RustInterop.emitRustExpr v1979 v2167 
                    let v2169 : string = "x"
                    let v2170 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2169 
                    let v2171 : string = "fable_library_rust::String_::fromString($0)"
                    let v2172 : string = Fable.Core.RustInterop.emitRustExpr v2170 v2171 
                    let v2175 : string = "="
                    let v2176 : bool = v2172.Contains v2175 
                    let v2191 : string =
                        if v2176 then
                            v2172
                        else
                            let v2181 : string = "]"
                            let v2182 : bool = v2172.EndsWith (v2181, false, null)
                            if v2182 then
                                let v2185 : string = $"={{version='*',features=["
                                let v2186 : string = "["
                                let v2187 : string = v2172.Replace (v2186, v2185)
                                let v2188 : string = $"{v2187}}}"
                                v2188
                            else
                                let v2189 : string = $"{v2172}='*'"
                                v2189
                    let v2192 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v2193 : bool = Fable.Core.RustInterop.emitRustExpr v2191 v2192 
                    let v2194 : string = "_vec_map"
                    let v2195 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2194 
                    let v2196 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v2197 : (string []) = Fable.Core.RustInterop.emitRustExpr v2195 v2196 
                    let v2202 : unit = ()
                    let _let'_v2202 =
                        seq {
                            for i = 0 to v2197.Length - 1 do yield v2197.[i]
                            (* indent
                            ()
                        indent *)
                        }
                        (* indent
                        ()
                    indent *)
                    let v2205 : string seq = _let'_v2202 
                    let v2213 : string = method75()
                    let v2214 : (string -> (string seq -> string)) = String.concat
                    let v2215 : (string seq -> string) = v2214 v2213
                    let v2216 : string = v2215 v2205
                    let v2220 : bool = v2216 = ""
                    let struct (v2289 : int32, v2290 : string) =
                        if v2220 then
                            struct (0, v2157)
                        else
                            let v2260 : string =
                                match v1909 with
                                | US38_0 -> (* Pip *)
                                    v2216
                                | US38_1 -> (* Poetry *)
                                    let v2221 : string = $"[tool.poetry]"
                                    let v2222 : string = $"name = \"test\""
                                    let v2223 : string = "\n"
                                    let v2224 : string = v2221 + v2223 
                                    let v2225 : string = v2224 + v2222 
                                    let v2226 : string = $"version = \"0.0.1\""
                                    let v2227 : string = v2225 + v2223 
                                    let v2228 : string = v2227 + v2226 
                                    let v2229 : string = $"description = \"\""
                                    let v2230 : string = v2228 + v2223 
                                    let v2231 : string = v2230 + v2229 
                                    let v2232 : string = $"authors = []"
                                    let v2233 : string = v2231 + v2223 
                                    let v2234 : string = v2233 + v2232 
                                    let v2235 : string = $""
                                    let v2236 : string = v2234 + v2223 
                                    let v2237 : string = v2236 + v2235 
                                    let v2238 : string = $"[tool.poetry.dependencies]"
                                    let v2239 : string = v2237 + v2223 
                                    let v2240 : string = v2239 + v2238 
                                    let v2241 : string = $"python=\"~3.12\""
                                    let v2242 : string = v2240 + v2223 
                                    let v2243 : string = v2242 + v2241 
                                    let v2244 : string = $"{v2216}"
                                    let v2245 : string = v2243 + v2223 
                                    let v2246 : string = v2245 + v2244 
                                    let v2247 : string = $""
                                    let v2248 : string = v2246 + v2223 
                                    let v2249 : string = v2248 + v2247 
                                    let v2250 : string = $"[build-system]"
                                    let v2251 : string = v2249 + v2223 
                                    let v2252 : string = v2251 + v2250 
                                    let v2253 : string = $"requires = [\"poetry-core\"]"
                                    let v2254 : string = v2252 + v2223 
                                    let v2255 : string = v2254 + v2253 
                                    let v2256 : string = $"build-backend = \"poetry.core.masonry.api\""
                                    let v2257 : string = v2255 + v2223 
                                    let v2258 : string = v2257 + v2256 
                                    v2258
                            method76(v2166, v2260)
                            let v2262 : System.Threading.CancellationToken option = None
                            let v2265 : (struct (string * string) []) = [||]
                            let v2267 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v2271 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v2275 : string option = None
                            let v2281 : string =
                                match v1909 with
                                | US38_0 -> (* Pip *)
                                    let v2278 : string = $"pip install -r requirements.txt"
                                    v2278
                                | US38_1 -> (* Poetry *)
                                    let v2279 : string = $"poetry install"
                                    v2279
                            let v2283 : string option = Some v2158 
                            let v2286 : bool = true
                            method101(v2281, v2262, v2265, v2267, v2271, v2286, v2283)
                    let v2292 : bool = v2289 <> 0 
                    let struct (v2495 : US5, v2496 : US5, v2497 : US5, v2498 : US5) =
                        if v2292 then
                            let v2295 : unit = ()
                            let v2296 : (unit -> unit) = closure77(v1909, v1776, v2290, v2289)
                            let v2297 : unit = (fun () -> v2296 (); v2295) ()
                            let v2344 : string = "py"
                            let v2345 : US5 = US5_0(v2344)
                            let v2346 : US5 = US5_1
                            let v2347 : US5 = US5_1
                            let v2348 : US5 = US5_1
                            struct (v2345, v2346, v2347, v2348)
                        else
                            let v2352 : string =
                                match v1909 with
                                | US38_0 -> (* Pip *)
                                    let v2349 : string = $"python \"{v1776}\""
                                    v2349
                                | US38_1 -> (* Poetry *)
                                    let v2350 : string = $"poetry run python \"{v1776}\""
                                    v2350
                            let v2353 : string = "TRACE_LEVEL"
                            let v2354 : string = "Verbose"
                            let v2355 : (struct (string * string) []) = [|struct (v2353, v2354)|]
                            let v2357 : System.Threading.CancellationToken option = None
                            let v2360 : (struct (string * string) []) = [||]
                            let v2362 : (struct (int32 * string * bool) -> Async<unit>) option = None
                            let v2366 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                            let v2370 : string option = None
                            let v2374 : string option = Some v2158 
                            let v2377 : bool = true
                            let struct (v2378 : int32, v2379 : string) = method101(v2352, v2357, v2355, v2362, v2366, v2377, v2374)
                            let v2380 : int32 = v2355.Length
                            let v2381 : (string []) = Array.zeroCreate<string> (v2380)
                            let v2382 : Mut5 = {l0 = 0} : Mut5
                            while method32(v2380, v2382) do
                                let v2384 : int32 = v2382.l0
                                let struct (v2385 : string, v2386 : string) = v2355.[int v2384]
                                let v2387 : string = $"$env:{v2385}=''{v2386}''"
                                v2381.[int v2384] <- v2387
                                let v2388 : int32 = v2384 + 1
                                v2382.l0 <- v2388
                                ()
                            let v2390 : string seq = v2381 |> Seq.ofArray
                            let v2395 : (string -> (string seq -> string)) = String.concat
                            let v2396 : string = ";"
                            let v2397 : (string seq -> string) = v2395 v2396
                            let v2398 : string = v2397 v2390
                            let v2401 : string = $"pwsh -c '{v2398}; {v2352}'"
                            let v2402 : bool = v2378 = 0
                            let v2409 : bool =
                                if v2402 then
                                    true
                                else
                                    let v2405 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                    let v2406 : bool = v2379.Contains v2405 
                                    v2406
                            let struct (v2491 : US5, v2492 : US5, v2493 : US5, v2494 : US5) =
                                if v2409 then
                                    let v2410 : (string -> US5) = closure72()
                                    let v2411 : (unit -> string) = closure78(v2379)
                                    let v2412 : (exn -> US5) = closure79(v1776, v2379, v2401)
                                    let v2414 : US5 = US5_1
                                    let result = ref v2414
                                    try
                                        result.Value <- v2411 () |> v2410 
                                    with ex ->
                                        result.Value <- v2412 ex 
                                    let v2415 : US5 = result.Value
                                    let v2429 : string option =
                                        match v2415 with
                                        | US5_1 -> (* None *)
                                            let v2425 : string option = None
                                            v2425
                                        | US5_0(v2419) -> (* Some *)
                                            let v2421 : string option = Some v2419 
                                            v2421
                                    let v2430 : string = "$0.unwrap()"
                                    let v2431 : string = Fable.Core.RustInterop.emitRustExpr v2429 v2430 
                                    let v2432 : string = "py"
                                    let v2433 : US5 = US5_0(v2432)
                                    let v2434 : US5 = US5_0(v2077)
                                    let v2435 : US5 = US5_0(v1776)
                                    let v2436 : US5 = US5_0(v2431)
                                    struct (v2433, v2434, v2435, v2436)
                                else
                                    let v2437 : unit = ()
                                    let v2438 : (unit -> unit) = closure81(v1776, v2379, v2378, v2401)
                                    let v2439 : unit = (fun () -> v2438 (); v2437) ()
                                    let v2486 : string = "py"
                                    let v2487 : US5 = US5_0(v2486)
                                    let v2488 : US5 = US5_1
                                    let v2489 : US5 = US5_1
                                    let v2490 : US5 = US5_1
                                    struct (v2487, v2488, v2489, v2490)
                            struct (v2491, v2492, v2493, v2494)
                    let v2501 : string =
                        match v2495 with
                        | US5_1 -> (* None *)
                            v2157
                        | US5_0(v2499) -> (* Some *)
                            v2499
                    let v2502 : string = "extension"
                    let v2505 : string =
                        match v2496 with
                        | US5_1 -> (* None *)
                            v2157
                        | US5_0(v2503) -> (* Some *)
                            v2503
                    let v2506 : string = "code"
                    let v2509 : string =
                        match v2498 with
                        | US5_1 -> (* None *)
                            v2157
                        | US5_0(v2507) -> (* Some *)
                            v2507
                    let v2510 : string = "output"
                    let v2511 : (struct (string * string) []) = [|struct (v2502, v2501); struct (v2506, v2505); struct (v2510, v2509)|]
                    let v2512 : string = "$0.to_vec()"
                    let v2513 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2511 v2512 
                    let v2514 : unit = ()
                    let v2515 : string = $"true; let _func1_from_v2514 = Func1::from(move |value| {{ //"
                    let v2516 : bool = Fable.Core.RustInterop.emitRustExpr () v2515 
                    let v2517 : string = $"value"
                    let struct (v2518 : string, v2519 : string) = Fable.Core.RustInterop.emitRustExpr () v2517 
                    (* run_target_args'
                    let v2524 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2525 : string = "&*$0"
                    let v2526 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2518 v2525 
                    let _run_target_args'_v2524 = v2526 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2527 : string = "&*$0"
                    let v2528 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2518 v2527 
                    let _run_target_args'_v2524 = v2528 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2529 : string = "&*$0"
                    let v2530 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2518 v2529 
                    let _run_target_args'_v2524 = v2530 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2532 : Ref<Str> = v2518 |> unbox<Ref<Str>>
                    let _run_target_args'_v2524 = v2532 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2536 : Ref<Str> = v2518 |> unbox<Ref<Str>>
                    let _run_target_args'_v2524 = v2536 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2540 : Ref<Str> = v2518 |> unbox<Ref<Str>>
                    let _run_target_args'_v2524 = v2540 
                    #endif
#else
                    let v2544 : Ref<Str> = v2518 |> unbox<Ref<Str>>
                    let _run_target_args'_v2524 = v2544 
                    #endif
                    let v2547 : Ref<Str> = _run_target_args'_v2524 
                    (* run_target_args'
                    let v2557 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2558 : string = "String::from($0)"
                    let v2559 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2547 v2558 
                    let _run_target_args'_v2557 = v2559 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2560 : string = "String::from($0)"
                    let v2561 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2547 v2560 
                    let _run_target_args'_v2557 = v2561 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2562 : string = "String::from($0)"
                    let v2563 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2547 v2562 
                    let _run_target_args'_v2557 = v2563 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2565 : std_string_String = v2547 |> unbox<std_string_String>
                    let _run_target_args'_v2557 = v2565 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2569 : std_string_String = v2547 |> unbox<std_string_String>
                    let _run_target_args'_v2557 = v2569 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2573 : std_string_String = v2547 |> unbox<std_string_String>
                    let _run_target_args'_v2557 = v2573 
                    #endif
#else
                    let v2577 : std_string_String = v2547 |> unbox<std_string_String>
                    let _run_target_args'_v2557 = v2577 
                    #endif
                    let v2580 : std_string_String = _run_target_args'_v2557 
                    (* run_target_args'
                    let v2590 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2591 : string = "&*$0"
                    let v2592 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2519 v2591 
                    let _run_target_args'_v2590 = v2592 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2593 : string = "&*$0"
                    let v2594 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2519 v2593 
                    let _run_target_args'_v2590 = v2594 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2595 : string = "&*$0"
                    let v2596 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2519 v2595 
                    let _run_target_args'_v2590 = v2596 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2598 : Ref<Str> = v2519 |> unbox<Ref<Str>>
                    let _run_target_args'_v2590 = v2598 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2602 : Ref<Str> = v2519 |> unbox<Ref<Str>>
                    let _run_target_args'_v2590 = v2602 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2606 : Ref<Str> = v2519 |> unbox<Ref<Str>>
                    let _run_target_args'_v2590 = v2606 
                    #endif
#else
                    let v2610 : Ref<Str> = v2519 |> unbox<Ref<Str>>
                    let _run_target_args'_v2590 = v2610 
                    #endif
                    let v2613 : Ref<Str> = _run_target_args'_v2590 
                    (* run_target_args'
                    let v2623 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2624 : string = "String::from($0)"
                    let v2625 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2613 v2624 
                    let _run_target_args'_v2623 = v2625 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2626 : string = "String::from($0)"
                    let v2627 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2613 v2626 
                    let _run_target_args'_v2623 = v2627 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2628 : string = "String::from($0)"
                    let v2629 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2613 v2628 
                    let _run_target_args'_v2623 = v2629 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2631 : std_string_String = v2613 |> unbox<std_string_String>
                    let _run_target_args'_v2623 = v2631 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2635 : std_string_String = v2613 |> unbox<std_string_String>
                    let _run_target_args'_v2623 = v2635 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2639 : std_string_String = v2613 |> unbox<std_string_String>
                    let _run_target_args'_v2623 = v2639 
                    #endif
#else
                    let v2643 : std_string_String = v2613 |> unbox<std_string_String>
                    let _run_target_args'_v2623 = v2643 
                    #endif
                    let v2646 : std_string_String = _run_target_args'_v2623 
                    let v2653 : (std_string_String * std_string_String) = v2580, v2646 
                    let func1_from_result = v2653 //
                    let v2656 : _ = func1_from_result
                    let v2657 : string = $"true; $0 /*"
                    let v2658 : bool = Fable.Core.RustInterop.emitRustExpr v2656 v2657 
                    let v2659 : string = $"*/ }}); //"
                    let v2660 : bool = Fable.Core.RustInterop.emitRustExpr () v2659 
                    let v2661 : string = $"_func1_from_v2514"
                    let v2662 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v2661 
                    let v2663 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v2664 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v2662)
                    let v2665 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2513, v2664) v2663 
                    let v2666 : string = "std::collections::BTreeMap::from_iter(v2665.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                    let v2667 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2666 
                    let v2668 : string = "serde_json::to_string(&v2667)"
                    let v2669 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v2668 
                    (* run_target_args'
                    let v2671 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2672 : string = "$0.unwrap()"
                    let v2673 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2669 v2672 
                    let _run_target_args'_v2671 = v2673 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2674 : string = "$0.unwrap()"
                    let v2675 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2669 v2674 
                    let _run_target_args'_v2671 = v2675 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2676 : string = "$0.unwrap()"
                    let v2677 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2669 v2676 
                    let _run_target_args'_v2671 = v2677 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2678 : std_string_String = match v2669 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2671 = v2678 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2679 : std_string_String = match v2669 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2671 = v2679 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2680 : std_string_String = match v2669 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2671 = v2680 
                    #endif
#else
                    let v2681 : std_string_String = match v2669 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _run_target_args'_v2671 = v2681 
                    #endif
                    let v2682 : std_string_String = _run_target_args'_v2671 
                    let v2685 : string = "fable_library_rust::String_::fromString($0)"
                    let v2686 : string = Fable.Core.RustInterop.emitRustExpr v2682 v2685 
                    let v2687 : string = "command_result"
                    [|struct (v2687, v2686)|]
                else
                    let v2689 : string = "fable_library_rust::String_::fromString($0)"
                    let v2690 : string = Fable.Core.RustInterop.emitRustExpr v40 v2689 
                    let v2691 : bool = v2690 = "fable"
                    if v2691 then
                        let v2692 : string = method191()
                        (* run_target_args'
                        let v2697 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2698 : string = "&*$0"
                        let v2699 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2692 v2698 
                        let _run_target_args'_v2697 = v2699 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2700 : string = "&*$0"
                        let v2701 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2692 v2700 
                        let _run_target_args'_v2697 = v2701 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2702 : string = "&*$0"
                        let v2703 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2692 v2702 
                        let _run_target_args'_v2697 = v2703 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2705 : Ref<Str> = v2692 |> unbox<Ref<Str>>
                        let _run_target_args'_v2697 = v2705 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2709 : Ref<Str> = v2692 |> unbox<Ref<Str>>
                        let _run_target_args'_v2697 = v2709 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2713 : Ref<Str> = v2692 |> unbox<Ref<Str>>
                        let _run_target_args'_v2697 = v2713 
                        #endif
#else
                        let v2717 : Ref<Str> = v2692 |> unbox<Ref<Str>>
                        let _run_target_args'_v2697 = v2717 
                        #endif
                        let v2720 : Ref<Str> = _run_target_args'_v2697 
                        let v2726 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v2727 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2720) v2726 
                        let v2730 : (std_string_String -> US7) = method23()
                        let v2731 : US7 option = v2727 |> Option.map v2730 
                        let v2751 : US7 = US7_1
                        let v2752 : US7 = v2731 |> Option.defaultValue v2751 
                        let v2759 : std_string_String =
                            match v2752 with
                            | US7_1 -> (* None *)
                                failwith<std_string_String> "Option does not have a value."
                            | US7_0(v2756) -> (* Some *)
                                v2756
                        let v2760 : string = "fable_library_rust::String_::fromString($0)"
                        let v2761 : string = Fable.Core.RustInterop.emitRustExpr v2759 v2760 
                        let v2762 : string = method192()
                        (* run_target_args'
                        let v2767 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2768 : string = "&*$0"
                        let v2769 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2762 v2768 
                        let _run_target_args'_v2767 = v2769 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2770 : string = "&*$0"
                        let v2771 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2762 v2770 
                        let _run_target_args'_v2767 = v2771 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2772 : string = "&*$0"
                        let v2773 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2762 v2772 
                        let _run_target_args'_v2767 = v2773 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2775 : Ref<Str> = v2762 |> unbox<Ref<Str>>
                        let _run_target_args'_v2767 = v2775 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2779 : Ref<Str> = v2762 |> unbox<Ref<Str>>
                        let _run_target_args'_v2767 = v2779 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2783 : Ref<Str> = v2762 |> unbox<Ref<Str>>
                        let _run_target_args'_v2767 = v2783 
                        #endif
#else
                        let v2787 : Ref<Str> = v2762 |> unbox<Ref<Str>>
                        let _run_target_args'_v2767 = v2787 
                        #endif
                        let v2790 : Ref<Str> = _run_target_args'_v2767 
                        let v2796 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v2797 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2790) v2796 
                        let v2800 : (std_string_String -> US7) = method23()
                        let v2801 : US7 option = v2797 |> Option.map v2800 
                        let v2821 : US7 = US7_1
                        let v2822 : US7 = v2801 |> Option.defaultValue v2821 
                        let v2832 : US5 =
                            match v2822 with
                            | US7_1 -> (* None *)
                                US5_1
                            | US7_0(v2826) -> (* Some *)
                                let v2827 : string = "fable_library_rust::String_::fromString($0)"
                                let v2828 : string = Fable.Core.RustInterop.emitRustExpr v2826 v2827 
                                US5_0(v2828)
                        let v2944 : string =
                            match v2832 with
                            | US5_1 -> (* None *)
                                let v2942 : string = "{}"
                                v2942
                            | US5_0(v2833) -> (* Some *)
                                let v2834 : clap_Command = method0()
                                let v2835 : string = $"_ {v2833} --fs-path \"{v2761}\""
                                let v2836 : US25 = method116(v2835)
                                let v2845 : (string []) =
                                    match v2836 with
                                    | US25_1(v2838) -> (* Error *)
                                        let v2840 : string = $"resultm.get / Result value was Error: {v2838}"
                                        failwith<(string [])> v2840
                                    | US25_0(v2837) -> (* Ok *)
                                        v2837
                                let v2846 : string = "$0.to_vec()"
                                let v2847 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v2845 v2846 
                                let v2848 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                let v2849 : bool = Fable.Core.RustInterop.emitRustExpr v2847 v2848 
                                let v2850 : string = "x"
                                let v2851 : string = Fable.Core.RustInterop.emitRustExpr () v2850 
                                (* run_target_args'
                                let v2856 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2857 : string = "&*$0"
                                let v2858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2851 v2857 
                                let _run_target_args'_v2856 = v2858 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2859 : string = "&*$0"
                                let v2860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2851 v2859 
                                let _run_target_args'_v2856 = v2860 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2861 : string = "&*$0"
                                let v2862 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2851 v2861 
                                let _run_target_args'_v2856 = v2862 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2864 : Ref<Str> = v2851 |> unbox<Ref<Str>>
                                let _run_target_args'_v2856 = v2864 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2868 : Ref<Str> = v2851 |> unbox<Ref<Str>>
                                let _run_target_args'_v2856 = v2868 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2872 : Ref<Str> = v2851 |> unbox<Ref<Str>>
                                let _run_target_args'_v2856 = v2872 
                                #endif
#else
                                let v2876 : Ref<Str> = v2851 |> unbox<Ref<Str>>
                                let _run_target_args'_v2856 = v2876 
                                #endif
                                let v2879 : Ref<Str> = _run_target_args'_v2856 
                                (* run_target_args'
                                let v2889 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2890 : string = "String::from($0)"
                                let v2891 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2879 v2890 
                                let _run_target_args'_v2889 = v2891 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2892 : string = "String::from($0)"
                                let v2893 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2879 v2892 
                                let _run_target_args'_v2889 = v2893 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2894 : string = "String::from($0)"
                                let v2895 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2879 v2894 
                                let _run_target_args'_v2889 = v2895 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2897 : std_string_String = v2879 |> unbox<std_string_String>
                                let _run_target_args'_v2889 = v2897 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2901 : std_string_String = v2879 |> unbox<std_string_String>
                                let _run_target_args'_v2889 = v2901 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2905 : std_string_String = v2879 |> unbox<std_string_String>
                                let _run_target_args'_v2889 = v2905 
                                #endif
#else
                                let v2909 : std_string_String = v2879 |> unbox<std_string_String>
                                let _run_target_args'_v2889 = v2909 
                                #endif
                                let v2912 : std_string_String = _run_target_args'_v2889 
                                let v2918 : string = "true; $0 }).collect::<Vec<_>>()"
                                let v2919 : bool = Fable.Core.RustInterop.emitRustExpr v2912 v2918 
                                let v2920 : string = "_vec_map"
                                let v2921 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2920 
                                let v2922 : string = "clap::Command::get_matches_from($0, v2921)"
                                let v2923 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v2834 v2922 
                                let v2924 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v2923)
                                let v2925 : string = "v2924.await"
                                let v2926 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v2925 
                                (* run_target_args'
                                let v2928 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2929 : string = "$0.unwrap()"
                                let v2930 : string = Fable.Core.RustInterop.emitRustExpr v2926 v2929 
                                let _run_target_args'_v2928 = v2930 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2931 : string = "$0.unwrap()"
                                let v2932 : string = Fable.Core.RustInterop.emitRustExpr v2926 v2931 
                                let _run_target_args'_v2928 = v2932 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2933 : string = "$0.unwrap()"
                                let v2934 : string = Fable.Core.RustInterop.emitRustExpr v2926 v2933 
                                let _run_target_args'_v2928 = v2934 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2935 : string = match v2926 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2928 = v2935 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2936 : string = match v2926 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2928 = v2936 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2937 : string = match v2926 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2928 = v2937 
                                #endif
#else
                                let v2938 : string = match v2926 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _run_target_args'_v2928 = v2938 
                                #endif
                                let v2939 : string = _run_target_args'_v2928 
                                v2939
                        let v2945 : string = "command_result"
                        [|struct (v2945, v2944)|]
                    else
                        let v2947 : string = "fable_library_rust::String_::fromString($0)"
                        let v2948 : string = Fable.Core.RustInterop.emitRustExpr v40 v2947 
                        let v2949 : bool = v2948 = "dib"
                        if v2949 then
                            let v2950 : string = method193()
                            (* run_target_args'
                            let v2955 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v2956 : string = "&*$0"
                            let v2957 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2950 v2956 
                            let _run_target_args'_v2955 = v2957 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v2958 : string = "&*$0"
                            let v2959 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2950 v2958 
                            let _run_target_args'_v2955 = v2959 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v2960 : string = "&*$0"
                            let v2961 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2950 v2960 
                            let _run_target_args'_v2955 = v2961 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v2963 : Ref<Str> = v2950 |> unbox<Ref<Str>>
                            let _run_target_args'_v2955 = v2963 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v2967 : Ref<Str> = v2950 |> unbox<Ref<Str>>
                            let _run_target_args'_v2955 = v2967 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v2971 : Ref<Str> = v2950 |> unbox<Ref<Str>>
                            let _run_target_args'_v2955 = v2971 
                            #endif
#else
                            let v2975 : Ref<Str> = v2950 |> unbox<Ref<Str>>
                            let _run_target_args'_v2955 = v2975 
                            #endif
                            let v2978 : Ref<Str> = _run_target_args'_v2955 
                            let v2984 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v2985 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v2978) v2984 
                            let v2988 : (std_string_String -> string) = method194()
                            let v2989 : string option = v2985 |> Option.map v2988 
                            let v3009 : string = "$0.unwrap()"
                            let v3010 : string = Fable.Core.RustInterop.emitRustExpr v2989 v3009 
                            let v3011 : string = method196()
                            (* run_target_args'
                            let v3016 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3017 : string = "&*$0"
                            let v3018 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3011 v3017 
                            let _run_target_args'_v3016 = v3018 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3019 : string = "&*$0"
                            let v3020 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3011 v3019 
                            let _run_target_args'_v3016 = v3020 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3021 : string = "&*$0"
                            let v3022 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3011 v3021 
                            let _run_target_args'_v3016 = v3022 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3024 : Ref<Str> = v3011 |> unbox<Ref<Str>>
                            let _run_target_args'_v3016 = v3024 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3028 : Ref<Str> = v3011 |> unbox<Ref<Str>>
                            let _run_target_args'_v3016 = v3028 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3032 : Ref<Str> = v3011 |> unbox<Ref<Str>>
                            let _run_target_args'_v3016 = v3032 
                            #endif
#else
                            let v3036 : Ref<Str> = v3011 |> unbox<Ref<Str>>
                            let _run_target_args'_v3016 = v3036 
                            #endif
                            let v3039 : Ref<Str> = _run_target_args'_v3016 
                            let v3045 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v3046 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3039) v3045 
                            let v3048 : uint8 = v3046 |> Option.defaultValue 1uy 
                            let v3051 : string = method197()
                            (* run_target_args'
                            let v3056 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v3057 : string = "&*$0"
                            let v3058 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3051 v3057 
                            let _run_target_args'_v3056 = v3058 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v3059 : string = "&*$0"
                            let v3060 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3051 v3059 
                            let _run_target_args'_v3056 = v3060 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v3061 : string = "&*$0"
                            let v3062 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3051 v3061 
                            let _run_target_args'_v3056 = v3062 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v3064 : Ref<Str> = v3051 |> unbox<Ref<Str>>
                            let _run_target_args'_v3056 = v3064 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v3068 : Ref<Str> = v3051 |> unbox<Ref<Str>>
                            let _run_target_args'_v3056 = v3068 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v3072 : Ref<Str> = v3051 |> unbox<Ref<Str>>
                            let _run_target_args'_v3056 = v3072 
                            #endif
#else
                            let v3076 : Ref<Str> = v3051 |> unbox<Ref<Str>>
                            let _run_target_args'_v3056 = v3076 
                            #endif
                            let v3079 : Ref<Str> = _run_target_args'_v3056 
                            let v3085 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                            let v3086 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3079) v3085 
                            let v3089 : (std_string_String -> US7) = method23()
                            let v3090 : US7 option = v3086 |> Option.map v3089 
                            let v3110 : US7 = US7_1
                            let v3111 : US7 = v3090 |> Option.defaultValue v3110 
                            let v3121 : US5 =
                                match v3111 with
                                | US7_1 -> (* None *)
                                    US5_1
                                | US7_0(v3115) -> (* Some *)
                                    let v3116 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3117 : string = Fable.Core.RustInterop.emitRustExpr v3115 v3116 
                                    US5_0(v3117)
                            let v3122 : uint8 = 1uy
                            let struct (v3123 : int32, v3124 : string) = method198(v3121, v3048, v3010, v3122)
                            let v3126 : bool = v3123 <> 0 
                            let struct (v3503 : int32, v3504 : string) =
                                if v3126 then
                                    struct (v3123, v3124)
                                else
                                    let v3130 : System.Threading.CancellationToken option = None
                                    let v3133 : (struct (string * string) []) = [||]
                                    let v3135 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v3139 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v3143 : string option = None
                                    let v3146 : string = $"jupyter nbconvert \"{v3010}.ipynb\" --to html --HTMLExporter.theme=dark"
                                    let v3147 : bool = true
                                    let struct (v3148 : int32, v3149 : string) = method101(v3146, v3130, v3133, v3135, v3139, v3147, v3143)
                                    let v3150 : unit = ()
                                    let v3151 : (unit -> unit) = closure84(v3149, v3148)
                                    let v3152 : unit = (fun () -> v3151 (); v3150) ()
                                    let v3201 : bool = v3148 <> 0 
                                    if v3201 then
                                        let v3204 : string = $"repl_result: {v3124}

jupyter_result: {v3149}"
                                        struct (v3148, v3204)
                                    else
                                        let v3205 : string = "'"
                                        let v3206 : string = "''"
                                        let v3207 : string = v3010.Replace (v3205, v3206)
                                        let v3209 : System.Threading.CancellationToken option = None
                                        let v3212 : (struct (string * string) []) = [||]
                                        let v3214 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v3218 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v3222 : string option = None
                                        let v3225 : string = $"pwsh -c \"$counter = 1; $path = '{v3207}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                        let v3226 : bool = true
                                        let struct (v3227 : int32, v3228 : string) = method101(v3225, v3209, v3212, v3214, v3218, v3226, v3222)
                                        let v3229 : unit = ()
                                        let v3230 : (unit -> unit) = closure85(v3228, v3227)
                                        let v3231 : unit = (fun () -> v3230 (); v3229) ()
                                        let v3279 : string = $"{v3010}.html"
                                        (* run_target_args'
                                        let v3284 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v3289 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3290 : string = "std::fs::read(&*$0)"
                                        let v3291 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3279 v3290 
                                        (* run_target_args'
                                        let v3293 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3294 : string = "$0.unwrap()"
                                        let v3295 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3291 v3294 
                                        let _run_target_args'_v3293 = v3295 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3296 : string = "$0.unwrap()"
                                        let v3297 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3291 v3296 
                                        let _run_target_args'_v3293 = v3297 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3298 : string = "$0.unwrap()"
                                        let v3299 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3291 v3298 
                                        let _run_target_args'_v3293 = v3299 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3300 : Vec<uint8> = match v3291 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3293 = v3300 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3301 : Vec<uint8> = match v3291 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3293 = v3301 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3302 : Vec<uint8> = match v3291 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3293 = v3302 
                                        #endif
#else
                                        let v3303 : Vec<uint8> = match v3291 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3293 = v3303 
                                        #endif
                                        let v3304 : Vec<uint8> = _run_target_args'_v3293 
                                        let _run_target_args'_v3289 = v3304 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3308 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3289 = v3308 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3312 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3289 = v3312 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3316 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3289 = v3316 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3320 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3289 = v3320 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3324 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3289 = v3324 
                                        #endif
#else
                                        let v3327 : (uint8 []) = v3279 |> System.IO.File.ReadAllBytes
                                        let v3328 : string = "$0.to_vec()"
                                        let v3329 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3327 v3328 
                                        let _run_target_args'_v3289 = v3329 
                                        #endif
                                        let v3330 : Vec<uint8> = _run_target_args'_v3289 
                                        let v3336 : Vec<uint8> = method27(v3330)
                                        let v3337 : string = "std::string::String::from_utf8($0)"
                                        let v3338 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3336 v3337 
                                        (* run_target_args'
                                        let v3340 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3341 : string = "$0.unwrap()"
                                        let v3342 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3338 v3341 
                                        let _run_target_args'_v3340 = v3342 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3343 : string = "$0.unwrap()"
                                        let v3344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3338 v3343 
                                        let _run_target_args'_v3340 = v3344 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3345 : string = "$0.unwrap()"
                                        let v3346 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3338 v3345 
                                        let _run_target_args'_v3340 = v3346 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3347 : std_string_String = match v3338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3340 = v3347 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3348 : std_string_String = match v3338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3340 = v3348 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3349 : std_string_String = match v3338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3340 = v3349 
                                        #endif
#else
                                        let v3350 : std_string_String = match v3338 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3340 = v3350 
                                        #endif
                                        let v3351 : std_string_String = _run_target_args'_v3340 
                                        let v3354 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3355 : string = Fable.Core.RustInterop.emitRustExpr v3351 v3354 
                                        let _run_target_args'_v3284 = v3355 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3357 : string = null |> unbox<string>
                                        let _run_target_args'_v3284 = v3357 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3361 : string = null |> unbox<string>
                                        let _run_target_args'_v3284 = v3361 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3365 : string = null |> unbox<string>
                                        let _run_target_args'_v3284 = v3365 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3369 : string = null |> unbox<string>
                                        let _run_target_args'_v3284 = v3369 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3373 : string = null |> unbox<string>
                                        let _run_target_args'_v3284 = v3373 
                                        #endif
#else
                                        let v3376 : string = v3279 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v3284 = v3376 
                                        #endif
                                        let v3377 : string = _run_target_args'_v3284 
                                        let v3383 : string = "\r\n"
                                        let v3384 : string = "\n"
                                        let v3385 : string = v3377.Replace (v3383, v3384)
                                        let v3386 : string = $"{v3010}.html"
                                        (* run_target_args'
                                        let v3387 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3388 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3386, v3385) v3388 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3386, v3385)
                                        #endif
                                        // run_target_args' is_unit
                                        let v3389 : string = $"{v3010}.ipynb"
                                        (* run_target_args'
                                        let v3394 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        (* run_target_args'
                                        let v3399 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3400 : string = "std::fs::read(&*$0)"
                                        let v3401 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3389 v3400 
                                        (* run_target_args'
                                        let v3403 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3404 : string = "$0.unwrap()"
                                        let v3405 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3401 v3404 
                                        let _run_target_args'_v3403 = v3405 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3406 : string = "$0.unwrap()"
                                        let v3407 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3401 v3406 
                                        let _run_target_args'_v3403 = v3407 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3408 : string = "$0.unwrap()"
                                        let v3409 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3401 v3408 
                                        let _run_target_args'_v3403 = v3409 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3410 : Vec<uint8> = match v3401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3403 = v3410 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3411 : Vec<uint8> = match v3401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3403 = v3411 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3412 : Vec<uint8> = match v3401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3403 = v3412 
                                        #endif
#else
                                        let v3413 : Vec<uint8> = match v3401 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3403 = v3413 
                                        #endif
                                        let v3414 : Vec<uint8> = _run_target_args'_v3403 
                                        let _run_target_args'_v3399 = v3414 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3418 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3399 = v3418 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3422 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3399 = v3422 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3426 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3399 = v3426 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3430 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3399 = v3430 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3434 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _run_target_args'_v3399 = v3434 
                                        #endif
#else
                                        let v3437 : (uint8 []) = v3389 |> System.IO.File.ReadAllBytes
                                        let v3438 : string = "$0.to_vec()"
                                        let v3439 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3437 v3438 
                                        let _run_target_args'_v3399 = v3439 
                                        #endif
                                        let v3440 : Vec<uint8> = _run_target_args'_v3399 
                                        let v3446 : Vec<uint8> = method27(v3440)
                                        let v3447 : string = "std::string::String::from_utf8($0)"
                                        let v3448 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3446 v3447 
                                        (* run_target_args'
                                        let v3450 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3451 : string = "$0.unwrap()"
                                        let v3452 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3448 v3451 
                                        let _run_target_args'_v3450 = v3452 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3453 : string = "$0.unwrap()"
                                        let v3454 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3448 v3453 
                                        let _run_target_args'_v3450 = v3454 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3455 : string = "$0.unwrap()"
                                        let v3456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3448 v3455 
                                        let _run_target_args'_v3450 = v3456 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3457 : std_string_String = match v3448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3450 = v3457 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3458 : std_string_String = match v3448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3450 = v3458 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3459 : std_string_String = match v3448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3450 = v3459 
                                        #endif
#else
                                        let v3460 : std_string_String = match v3448 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _run_target_args'_v3450 = v3460 
                                        #endif
                                        let v3461 : std_string_String = _run_target_args'_v3450 
                                        let v3464 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3465 : string = Fable.Core.RustInterop.emitRustExpr v3461 v3464 
                                        let _run_target_args'_v3394 = v3465 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3467 : string = null |> unbox<string>
                                        let _run_target_args'_v3394 = v3467 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3471 : string = null |> unbox<string>
                                        let _run_target_args'_v3394 = v3471 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3475 : string = null |> unbox<string>
                                        let _run_target_args'_v3394 = v3475 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3479 : string = null |> unbox<string>
                                        let _run_target_args'_v3394 = v3479 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3483 : string = null |> unbox<string>
                                        let _run_target_args'_v3394 = v3483 
                                        #endif
#else
                                        let v3486 : string = v3389 |> System.IO.File.ReadAllText
                                        let _run_target_args'_v3394 = v3486 
                                        #endif
                                        let v3487 : string = _run_target_args'_v3394 
                                        let v3493 : string = v3487.Replace (v3383, v3384)
                                        let v3494 : string = "\\r\\n"
                                        let v3495 : string = "\\n"
                                        let v3496 : string = v3493.Replace (v3494, v3495)
                                        let v3497 : string = $"{v3010}.ipynb"
                                        (* run_target_args'
                                        let v3498 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3499 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v3497, v3496) v3499 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v3497, v3496)
                                        #endif
                                        // run_target_args' is_unit
                                        let v3500 : string = $"repl_result: {v3124}

jupyter_result: {v3149}

pwsh_replace_html_result: {v3228}"
                                        struct (v3227, v3500)
                            let v3505 : unit = ()
                            let v3506 : (unit -> unit) = closure86(v3504, v3503)
                            let v3507 : unit = (fun () -> v3506 (); v3505) ()
                            let v3556 : bool = v3503 <> 0 
                            if v3556 then
                                let v3559 : string = $"spiral.run / dib / exit_code: {v3503} / result: {v3504}"
                                failwith<unit> v3559
                            let v3560 : string = "stdio"
                            [|struct (v3560, v3504)|]
                        else
                            let v3562 : string = "fable_library_rust::String_::fromString($0)"
                            let v3563 : string = Fable.Core.RustInterop.emitRustExpr v40 v3562 
                            let v3564 : bool = v3563 = "rust"
                            let struct (v7334 : US5, v7335 : US5, v7336 : US5, v7337 : US5) =
                                if v3564 then
                                    let v3565 : string = method191()
                                    (* run_target_args'
                                    let v3570 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3571 : string = "&*$0"
                                    let v3572 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3565 v3571 
                                    let _run_target_args'_v3570 = v3572 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3573 : string = "&*$0"
                                    let v3574 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3565 v3573 
                                    let _run_target_args'_v3570 = v3574 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3575 : string = "&*$0"
                                    let v3576 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3565 v3575 
                                    let _run_target_args'_v3570 = v3576 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3578 : Ref<Str> = v3565 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3570 = v3578 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3582 : Ref<Str> = v3565 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3570 = v3582 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3586 : Ref<Str> = v3565 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3570 = v3586 
                                    #endif
#else
                                    let v3590 : Ref<Str> = v3565 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3570 = v3590 
                                    #endif
                                    let v3593 : Ref<Str> = _run_target_args'_v3570 
                                    let v3599 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3600 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3593) v3599 
                                    let v3603 : (std_string_String -> US7) = method23()
                                    let v3604 : US7 option = v3600 |> Option.map v3603 
                                    let v3624 : US7 = US7_1
                                    let v3625 : US7 = v3604 |> Option.defaultValue v3624 
                                    let v3632 : std_string_String =
                                        match v3625 with
                                        | US7_1 -> (* None *)
                                            failwith<std_string_String> "Option does not have a value."
                                        | US7_0(v3629) -> (* Some *)
                                            v3629
                                    let v3633 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3634 : string = Fable.Core.RustInterop.emitRustExpr v3632 v3633 
                                    let v3635 : string = method25()
                                    (* run_target_args'
                                    let v3640 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3641 : string = "&*$0"
                                    let v3642 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3635 v3641 
                                    let _run_target_args'_v3640 = v3642 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3643 : string = "&*$0"
                                    let v3644 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3635 v3643 
                                    let _run_target_args'_v3640 = v3644 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3645 : string = "&*$0"
                                    let v3646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3635 v3645 
                                    let _run_target_args'_v3640 = v3646 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3648 : Ref<Str> = v3635 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3640 = v3648 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3652 : Ref<Str> = v3635 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3640 = v3652 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3656 : Ref<Str> = v3635 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3640 = v3656 
                                    #endif
#else
                                    let v3660 : Ref<Str> = v3635 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3640 = v3660 
                                    #endif
                                    let v3663 : Ref<Str> = _run_target_args'_v3640 
                                    let v3669 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                    let v3670 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3663) v3669 
                                    let v3673 : (Vec<std_string_String> -> US11) = method26()
                                    let v3674 : US11 option = v3670 |> Option.map v3673 
                                    let v3694 : US11 = US11_1
                                    let v3695 : US11 = v3674 |> Option.defaultValue v3694 
                                    let v3699 : (std_string_String []) = [||]
                                    let v3700 : string = "$0.to_vec()"
                                    let v3701 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3699 v3700 
                                    let v3704 : Vec<std_string_String> =
                                        match v3695 with
                                        | US11_1 -> (* None *)
                                            v3701
                                        | US11_0(v3702) -> (* Some *)
                                            v3702
                                    let v3705 : string = method207()
                                    (* run_target_args'
                                    let v3710 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3711 : string = "&*$0"
                                    let v3712 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3705 v3711 
                                    let _run_target_args'_v3710 = v3712 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3713 : string = "&*$0"
                                    let v3714 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3705 v3713 
                                    let _run_target_args'_v3710 = v3714 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3715 : string = "&*$0"
                                    let v3716 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3705 v3715 
                                    let _run_target_args'_v3710 = v3716 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3718 : Ref<Str> = v3705 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3710 = v3718 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3722 : Ref<Str> = v3705 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3710 = v3722 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3726 : Ref<Str> = v3705 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3710 = v3726 
                                    #endif
#else
                                    let v3730 : Ref<Str> = v3705 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3710 = v3730 
                                    #endif
                                    let v3733 : Ref<Str> = _run_target_args'_v3710 
                                    let v3739 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                    let v3740 : bool = Fable.Core.RustInterop.emitRustExpr struct (v41, v3733) v3739 
                                    let v3741 : string = method208()
                                    (* run_target_args'
                                    let v3746 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3747 : string = "&*$0"
                                    let v3748 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3741 v3747 
                                    let _run_target_args'_v3746 = v3748 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3749 : string = "&*$0"
                                    let v3750 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3741 v3749 
                                    let _run_target_args'_v3746 = v3750 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3751 : string = "&*$0"
                                    let v3752 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3741 v3751 
                                    let _run_target_args'_v3746 = v3752 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3754 : Ref<Str> = v3741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3746 = v3754 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3758 : Ref<Str> = v3741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3746 = v3758 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3762 : Ref<Str> = v3741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3746 = v3762 
                                    #endif
#else
                                    let v3766 : Ref<Str> = v3741 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3746 = v3766 
                                    #endif
                                    let v3769 : Ref<Str> = _run_target_args'_v3746 
                                    let v3775 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3776 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3769) v3775 
                                    let v3779 : (std_string_String -> US7) = method23()
                                    let v3780 : US7 option = v3776 |> Option.map v3779 
                                    let v3800 : US7 = US7_1
                                    let v3801 : US7 = v3780 |> Option.defaultValue v3800 
                                    let v3811 : US5 =
                                        match v3801 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v3805) -> (* Some *)
                                            let v3806 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3807 : string = Fable.Core.RustInterop.emitRustExpr v3805 v3806 
                                            US5_0(v3807)
                                    let v3812 : string = method209()
                                    (* run_target_args'
                                    let v3817 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3818 : string = "&*$0"
                                    let v3819 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3812 v3818 
                                    let _run_target_args'_v3817 = v3819 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3820 : string = "&*$0"
                                    let v3821 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3812 v3820 
                                    let _run_target_args'_v3817 = v3821 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3822 : string = "&*$0"
                                    let v3823 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3812 v3822 
                                    let _run_target_args'_v3817 = v3823 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3825 : Ref<Str> = v3812 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3817 = v3825 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3829 : Ref<Str> = v3812 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3817 = v3829 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3833 : Ref<Str> = v3812 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3817 = v3833 
                                    #endif
#else
                                    let v3837 : Ref<Str> = v3812 |> unbox<Ref<Str>>
                                    let _run_target_args'_v3817 = v3837 
                                    #endif
                                    let v3840 : Ref<Str> = _run_target_args'_v3817 
                                    let v3846 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                    let v3847 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v3840) v3846 
                                    let v3850 : (std_string_String -> US7) = method23()
                                    let v3851 : US7 option = v3847 |> Option.map v3850 
                                    let v3871 : US7 = US7_1
                                    let v3872 : US7 = v3851 |> Option.defaultValue v3871 
                                    let v3882 : US5 =
                                        match v3872 with
                                        | US7_1 -> (* None *)
                                            US5_1
                                        | US7_0(v3876) -> (* Some *)
                                            let v3877 : string = "fable_library_rust::String_::fromString($0)"
                                            let v3878 : string = Fable.Core.RustInterop.emitRustExpr v3876 v3877 
                                            US5_0(v3878)
                                    let v3891 : US39 =
                                        match v3811 with
                                        | US5_0(v3883) -> (* Some *)
                                            let v3884 : US40 = US40_0(v3883)
                                            US39_0(v3884)
                                        | _ ->
                                            match v3882 with
                                            | US5_0(v3886) -> (* Some *)
                                                let v3887 : US40 = US40_1(v3886)
                                                US39_0(v3887)
                                            | _ ->
                                                US39_1
                                    (* run_target_args'
                                    let v3896 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    (* run_target_args'
                                    let v3901 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3902 : string = "std::fs::read(&*$0)"
                                    let v3903 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3634 v3902 
                                    (* run_target_args'
                                    let v3905 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3906 : string = "$0.unwrap()"
                                    let v3907 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3903 v3906 
                                    let _run_target_args'_v3905 = v3907 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3908 : string = "$0.unwrap()"
                                    let v3909 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3903 v3908 
                                    let _run_target_args'_v3905 = v3909 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3910 : string = "$0.unwrap()"
                                    let v3911 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3903 v3910 
                                    let _run_target_args'_v3905 = v3911 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3912 : Vec<uint8> = match v3903 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3905 = v3912 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3913 : Vec<uint8> = match v3903 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3905 = v3913 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3914 : Vec<uint8> = match v3903 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3905 = v3914 
                                    #endif
#else
                                    let v3915 : Vec<uint8> = match v3903 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3905 = v3915 
                                    #endif
                                    let v3916 : Vec<uint8> = _run_target_args'_v3905 
                                    let _run_target_args'_v3901 = v3916 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3920 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3901 = v3920 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3924 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3901 = v3924 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3928 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3901 = v3928 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3932 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3901 = v3932 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3936 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _run_target_args'_v3901 = v3936 
                                    #endif
#else
                                    let v3939 : (uint8 []) = v3634 |> System.IO.File.ReadAllBytes
                                    let v3940 : string = "$0.to_vec()"
                                    let v3941 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3939 v3940 
                                    let _run_target_args'_v3901 = v3941 
                                    #endif
                                    let v3942 : Vec<uint8> = _run_target_args'_v3901 
                                    let v3948 : Vec<uint8> = method27(v3942)
                                    let v3949 : string = "std::string::String::from_utf8($0)"
                                    let v3950 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3948 v3949 
                                    (* run_target_args'
                                    let v3952 : unit = ()
                                    run_target_args' *)
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v3953 : string = "$0.unwrap()"
                                    let v3954 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3950 v3953 
                                    let _run_target_args'_v3952 = v3954 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3955 : string = "$0.unwrap()"
                                    let v3956 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3950 v3955 
                                    let _run_target_args'_v3952 = v3956 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3957 : string = "$0.unwrap()"
                                    let v3958 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3950 v3957 
                                    let _run_target_args'_v3952 = v3958 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3959 : std_string_String = match v3950 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3952 = v3959 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3960 : std_string_String = match v3950 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3952 = v3960 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3961 : std_string_String = match v3950 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3952 = v3961 
                                    #endif
#else
                                    let v3962 : std_string_String = match v3950 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _run_target_args'_v3952 = v3962 
                                    #endif
                                    let v3963 : std_string_String = _run_target_args'_v3952 
                                    let v3966 : string = "fable_library_rust::String_::fromString($0)"
                                    let v3967 : string = Fable.Core.RustInterop.emitRustExpr v3963 v3966 
                                    let _run_target_args'_v3896 = v3967 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v3969 : string = null |> unbox<string>
                                    let _run_target_args'_v3896 = v3969 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v3973 : string = null |> unbox<string>
                                    let _run_target_args'_v3896 = v3973 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v3977 : string = null |> unbox<string>
                                    let _run_target_args'_v3896 = v3977 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v3981 : string = null |> unbox<string>
                                    let _run_target_args'_v3896 = v3981 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v3985 : string = null |> unbox<string>
                                    let _run_target_args'_v3896 = v3985 
                                    #endif
#else
                                    let v3988 : string = v3634 |> System.IO.File.ReadAllText
                                    let _run_target_args'_v3896 = v3988 
                                    #endif
                                    let v3989 : string = _run_target_args'_v3896 
                                    let v3995 : string = "rs"
                                    let v3996 : string = method210(v3995, v3989, v3891)
                                    let v3997 : string = method29(v3996)
                                    let v3998 : string = method34()
                                    let v3999 : US5 = method35(v3998)
                                    let v4005 : US5 =
                                        match v3999 with
                                        | US5_1 -> (* None *)
                                            let v4002 : string = __SOURCE_DIRECTORY__
                                            method35(v4002)
                                        | US5_0(v4000) -> (* Some *)
                                            US5_0(v4000)
                                    let v4011 : US5 =
                                        match v4005 with
                                        | US5_1 -> (* None *)
                                            let v4008 : string = "/workspaces"
                                            method35(v4008)
                                        | US5_0(v4006) -> (* Some *)
                                            US5_0(v4006)
                                    let v4015 : string =
                                        match v4011 with
                                        | US5_1 -> (* None *)
                                            failwith<string> "Option does not have a value."
                                        | US5_0(v4012) -> (* Some *)
                                            v4012
                                    let v4016 : string = method55(v4015)
                                    let v4017 : bool = "deps" = v4016
                                    let v4028 : string =
                                        if v4017 then
                                            let v4018 : string option = method41(v4015)
                                            let v4020 : string = v4018 |> Option.get
                                            let v4023 : US5 = method35(v4020)
                                            match v4023 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v4024) -> (* Some *)
                                                v4024
                                        else
                                            v4015
                                    let v4029 : string = "polyglot"
                                    let v4030 : string = method36(v4028, v4029)
                                    let v4031 : string = method34()
                                    let v4033 : (unit -> string) = v4031.ToLower
                                    let v4034 : string = v4033 ()
                                    let v4038 : (unit -> string) = v4030.ToLower
                                    let v4039 : string = v4038 ()
                                    let v4043 : bool = v4034.StartsWith (v4039, false, null)
                                    let v4048 : US13 =
                                        if v4043 then
                                            US13_1(v4039)
                                        else
                                            US13_0(v4039)
                                    let v4060 : Result<string, string> =
                                        match v4048 with
                                        | US13_1(v4054) -> (* Error *)
                                            let v4056 : Result<string, string> = Error v4054 
                                            v4056
                                        | US13_0(v4049) -> (* Ok *)
                                            let v4051 : Result<string, string> = Ok v4049 
                                            v4051
                                    let v4061 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                    let v4062 : bool = Fable.Core.RustInterop.emitRustExpr v4060 v4061 
                                    let v4063 : string = "x"
                                    let v4064 : string = Fable.Core.RustInterop.emitRustExpr () v4063 
                                    let v4065 : string = "true; $0 })"
                                    let v4066 : bool = Fable.Core.RustInterop.emitRustExpr v4064 v4065 
                                    let v4067 : string = "_result_unwrap_or_else"
                                    let v4068 : string = Fable.Core.RustInterop.emitRustExpr () v4067 
                                    let v4069 : string = "spiral"
                                    let v4070 : US41 = US41_0
                                    let v4071 : US42 = US42_0(v4070)
                                    let v4072 : US5 = US5_0(v3997)
                                    let v4073 : string = method211(v4072, v4069, v4071, v4068)
                                    let v4074 : string = "Fable.Core"
                                    let v4075 : string = "4.3.0"
                                    let v4076 : UH4 = UH4_0
                                    let v4077 : UH4 = UH4_1(v4074, v4075, v4076)
                                    let v4078 : UH2 = UH2_0
                                    let v4079 : string = method212(v3989, v4069, v4078, v4077, v4073, v4068)
                                    let v4080 : string = "../../.."
                                    let v4081 : string = method36(v4073, v4080)
                                    let v4082 : string = "Cargo.toml"
                                    let v4083 : string = method36(v4081, v4082)
                                    let v4084 : bool = method38(v4083)
                                    let v4085 : bool = v4084 = false
                                    if v4085 then
                                        (* run_target_args'
                                        let v4088 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4089 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4088 = v4089 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4090 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4088 = v4090 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4092 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v4088 = v4092 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4095 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4088 = v4095 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4096 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4088 = v4096 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4097 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4088 = v4097 
                                        #endif
#else
                                        let v4098 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4088 = v4098 
                                        #endif
                                        let v4099 : System.DateTime = _run_target_args'_v4088 
                                        let v4105 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v4106 : System.Guid = v4105 ()
                                        let v4109 : System.Guid = method215(v4106, v4099)
                                        let v4111 : (System.Guid -> string) = _.ToString()
                                        let v4112 : string = v4111 v4109
                                        let v4115 : string = $"[package]"
                                        let v4116 : string = $"name = \"spiral_{v4112}\""
                                        let v4117 : string = "\n"
                                        let v4118 : string = v4115 + v4117 
                                        let v4119 : string = v4118 + v4116 
                                        let v4120 : string = $"version = \"0.0.1\""
                                        let v4121 : string = v4119 + v4117 
                                        let v4122 : string = v4121 + v4120 
                                        let v4123 : string = $"edition = \"2021\""
                                        let v4124 : string = v4122 + v4117 
                                        let v4125 : string = v4124 + v4123 
                                        let v4126 : string = $""
                                        let v4127 : string = v4125 + v4117 
                                        let v4128 : string = v4127 + v4126 
                                        let v4129 : string = $"[[bin]]"
                                        let v4130 : string = v4128 + v4117 
                                        let v4131 : string = v4130 + v4129 
                                        let v4132 : string = $"name = \"spiral_{v4112}\""
                                        let v4133 : string = v4131 + v4117 
                                        let v4134 : string = v4133 + v4132 
                                        let v4135 : string = $"path = \"spiral.rs\""
                                        let v4136 : string = v4134 + v4117 
                                        let v4137 : string = v4136 + v4135 
                                        (* run_target_args'
                                        let v4138 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4139 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v4083, v4137) v4139 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v4083, v4137)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v4140 : string = method36(v4073, v4082)
                                    let v4141 : bool = method38(v4140)
                                    let v4142 : bool = v4141 = false
                                    if v4142 then
                                        (* run_target_args'
                                        let v4145 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4146 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4145 = v4146 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v4147 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4145 = v4147 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v4149 : System.DateTime = null |> unbox<System.DateTime>
                                        let _run_target_args'_v4145 = v4149 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v4152 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4145 = v4152 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v4153 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4145 = v4153 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v4154 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4145 = v4154 
                                        #endif
#else
                                        let v4155 : System.DateTime = System.DateTime.Now
                                        let _run_target_args'_v4145 = v4155 
                                        #endif
                                        let v4156 : System.DateTime = _run_target_args'_v4145 
                                        let v4162 : (unit -> System.Guid) = System.Guid.NewGuid
                                        let v4163 : System.Guid = v4162 ()
                                        let v4166 : System.Guid = method215(v4163, v4156)
                                        let v4168 : (System.Guid -> string) = _.ToString()
                                        let v4169 : string = v4168 v4166
                                        let v4172 : string = $"[package]"
                                        let v4173 : string = $"name = \"spiral_{v4169}\""
                                        let v4174 : string = "\n"
                                        let v4175 : string = v4172 + v4174 
                                        let v4176 : string = v4175 + v4173 
                                        let v4177 : string = $"version = \"0.0.1\""
                                        let v4178 : string = v4176 + v4174 
                                        let v4179 : string = v4178 + v4177 
                                        let v4180 : string = $"edition = \"2021\""
                                        let v4181 : string = v4179 + v4174 
                                        let v4182 : string = v4181 + v4180 
                                        let v4183 : string = $""
                                        let v4184 : string = v4182 + v4174 
                                        let v4185 : string = v4184 + v4183 
                                        let v4186 : string = $"[[bin]]"
                                        let v4187 : string = v4185 + v4174 
                                        let v4188 : string = v4187 + v4186 
                                        let v4189 : string = $"name = \"spiral_{v4169}\""
                                        let v4190 : string = v4188 + v4174 
                                        let v4191 : string = v4190 + v4189 
                                        let v4192 : string = $"path = \"spiral.rs\""
                                        let v4193 : string = v4191 + v4174 
                                        let v4194 : string = v4193 + v4192 
                                        (* run_target_args'
                                        let v4195 : unit = ()
                                        run_target_args' *)
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v4196 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                        Fable.Core.RustInterop.emitRustExpr struct (v4140, v4194) v4196 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        #endif
#else
                                        System.IO.File.WriteAllText (v4140, v4194)
                                        #endif
                                        // run_target_args' is_unit
                                        ()
                                    let v4197 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                    let v4198 : string = method36(v4068, v4197)
                                    let v4199 : string = "fable_modules/fable-library-rust"
                                    let v4200 : string = method36(v4073, v4199)
                                    method220(v4198, v4200)
                                    let struct (v4201 : int32, v4202 : string) = method221(v3891, v4073, v3995, v4079, v4048)
                                    let v4204 : bool = v4201 <> 0 
                                    let struct (v5526 : US5, v5527 : US5, v5528 : US5, v5529 : US5) =
                                        if v4204 then
                                            let v4207 : unit = ()
                                            let v4208 : (unit -> unit) = closure89(v4202, v4201)
                                            let v4209 : unit = (fun () -> v4208 (); v4207) ()
                                            let v4256 : US5 = US5_0(v3995)
                                            let v4257 : US5 = US5_1
                                            let v4258 : US5 = US5_1
                                            let v4259 : US5 = US5_0(v4202)
                                            struct (v4256, v4257, v4258, v4259)
                                        else
                                            let v4260 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4360 : Vec<std_string_String> =
                                                if v4260 then
                                                    v3704
                                                else
                                                    let v4261 : (std_string_String -> bool) = method231()
                                                    let v4262 : Vec<std_string_String> = method232(v3704)
                                                    let v4263 : string = "v4262.into_iter().filter(|x| v4261(x.clone().clone())).collect::<Vec<_>>()"
                                                    let v4264 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4263 
                                                    let v4265 : string = "$0.len()"
                                                    let v4266 : unativeint = Fable.Core.RustInterop.emitRustExpr v4264 v4265 
                                                    let v4272 : int32 = v4266 |> int32 
                                                    let v4280 : bool = v4272 > 0
                                                    if v4280 then
                                                        v3704
                                                    else
                                                        let v4281 : string = "near-sdk"
                                                        (* run_target_args'
                                                        let v4286 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4287 : string = "&*$0"
                                                        let v4288 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4281 v4287 
                                                        let _run_target_args'_v4286 = v4288 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4289 : string = "&*$0"
                                                        let v4290 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4281 v4289 
                                                        let _run_target_args'_v4286 = v4290 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4291 : string = "&*$0"
                                                        let v4292 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4281 v4291 
                                                        let _run_target_args'_v4286 = v4292 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4294 : Ref<Str> = v4281 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v4286 = v4294 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4298 : Ref<Str> = v4281 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v4286 = v4298 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4302 : Ref<Str> = v4281 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v4286 = v4302 
                                                        #endif
#else
                                                        let v4306 : Ref<Str> = v4281 |> unbox<Ref<Str>>
                                                        let _run_target_args'_v4286 = v4306 
                                                        #endif
                                                        let v4309 : Ref<Str> = _run_target_args'_v4286 
                                                        (* run_target_args'
                                                        let v4319 : unit = ()
                                                        run_target_args' *)
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4320 : string = "String::from($0)"
                                                        let v4321 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4309 v4320 
                                                        let _run_target_args'_v4319 = v4321 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4322 : string = "String::from($0)"
                                                        let v4323 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4309 v4322 
                                                        let _run_target_args'_v4319 = v4323 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4324 : string = "String::from($0)"
                                                        let v4325 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4309 v4324 
                                                        let _run_target_args'_v4319 = v4325 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4327 : std_string_String = v4309 |> unbox<std_string_String>
                                                        let _run_target_args'_v4319 = v4327 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4331 : std_string_String = v4309 |> unbox<std_string_String>
                                                        let _run_target_args'_v4319 = v4331 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4335 : std_string_String = v4309 |> unbox<std_string_String>
                                                        let _run_target_args'_v4319 = v4335 
                                                        #endif
#else
                                                        let v4339 : std_string_String = v4309 |> unbox<std_string_String>
                                                        let _run_target_args'_v4319 = v4339 
                                                        #endif
                                                        let v4342 : std_string_String = _run_target_args'_v4319 
                                                        let v4348 : (std_string_String []) = [|v4342|]
                                                        let v4349 : string = "$0.to_vec()"
                                                        let v4350 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4348 v4349 
                                                        let v4351 : Vec<std_string_String> = method73(v4350)
                                                        let v4352 : Vec<std_string_String> = method74(v3704)
                                                        let v4353 : string = "true; let mut v4352 = v4352"
                                                        let v4354 : bool = Fable.Core.RustInterop.emitRustExpr () v4353 
                                                        let v4355 : string = "true; v4352.extend(v4351)"
                                                        let v4356 : bool = Fable.Core.RustInterop.emitRustExpr () v4355 
                                                        let v4357 : string = "v4352"
                                                        let v4358 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4357 
                                                        v4358
                                            let v4361 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                            let v4362 : bool = Fable.Core.RustInterop.emitRustExpr v4360 v4361 
                                            let v4363 : string = "x"
                                            let v4364 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4363 
                                            let v4365 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4366 : string = Fable.Core.RustInterop.emitRustExpr v4364 v4365 
                                            let v4369 : string = "="
                                            let v4370 : bool = v4366.Contains v4369 
                                            let v4385 : string =
                                                if v4370 then
                                                    v4366
                                                else
                                                    let v4375 : string = "]"
                                                    let v4376 : bool = v4366.EndsWith (v4375, false, null)
                                                    if v4376 then
                                                        let v4379 : string = $"={{version='*',features=["
                                                        let v4380 : string = "["
                                                        let v4381 : string = v4366.Replace (v4380, v4379)
                                                        let v4382 : string = $"{v4381}}}"
                                                        v4382
                                                    else
                                                        let v4383 : string = $"{v4366}='*'"
                                                        v4383
                                            let v4386 : string = "true; $0 }).collect::<Vec<_>>()"
                                            let v4387 : bool = Fable.Core.RustInterop.emitRustExpr v4385 v4386 
                                            let v4388 : string = "_vec_map"
                                            let v4389 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4388 
                                            let v4390 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v4391 : (string []) = Fable.Core.RustInterop.emitRustExpr v4389 v4390 
                                            let v4396 : unit = ()
                                            let _let'_v4396 =
                                                seq {
                                                    for i = 0 to v4391.Length - 1 do yield v4391.[i]
                                                    (* indent
                                                    ()
                                                indent *)
                                                }
                                                (* indent
                                                ()
                                            indent *)
                                            let v4399 : string seq = _let'_v4396 
                                            let v4407 : string = method75()
                                            let v4408 : (string -> (string seq -> string)) = String.concat
                                            let v4409 : (string seq -> string) = v4408 v4407
                                            let v4410 : string = v4409 v4399
                                            let v4414 : string = $"{v4069}.{v3995}"
                                            let v4415 : string = method36(v4073, v4414)
                                            (* run_target_args'
                                            let v4420 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4425 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4426 : string = "std::fs::read(&*$0)"
                                            let v4427 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4415 v4426 
                                            (* run_target_args'
                                            let v4429 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4430 : string = "$0.unwrap()"
                                            let v4431 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4427 v4430 
                                            let _run_target_args'_v4429 = v4431 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4432 : string = "$0.unwrap()"
                                            let v4433 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4427 v4432 
                                            let _run_target_args'_v4429 = v4433 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4434 : string = "$0.unwrap()"
                                            let v4435 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4427 v4434 
                                            let _run_target_args'_v4429 = v4435 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4436 : Vec<uint8> = match v4427 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4429 = v4436 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4437 : Vec<uint8> = match v4427 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4429 = v4437 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4438 : Vec<uint8> = match v4427 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4429 = v4438 
                                            #endif
#else
                                            let v4439 : Vec<uint8> = match v4427 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4429 = v4439 
                                            #endif
                                            let v4440 : Vec<uint8> = _run_target_args'_v4429 
                                            let _run_target_args'_v4425 = v4440 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4444 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4425 = v4444 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4448 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4425 = v4448 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4452 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4425 = v4452 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4456 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4425 = v4456 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4460 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4425 = v4460 
                                            #endif
#else
                                            let v4463 : (uint8 []) = v4415 |> System.IO.File.ReadAllBytes
                                            let v4464 : string = "$0.to_vec()"
                                            let v4465 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4463 v4464 
                                            let _run_target_args'_v4425 = v4465 
                                            #endif
                                            let v4466 : Vec<uint8> = _run_target_args'_v4425 
                                            let v4472 : Vec<uint8> = method27(v4466)
                                            let v4473 : string = "std::string::String::from_utf8($0)"
                                            let v4474 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4472 v4473 
                                            (* run_target_args'
                                            let v4476 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4477 : string = "$0.unwrap()"
                                            let v4478 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4474 v4477 
                                            let _run_target_args'_v4476 = v4478 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4479 : string = "$0.unwrap()"
                                            let v4480 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4474 v4479 
                                            let _run_target_args'_v4476 = v4480 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4481 : string = "$0.unwrap()"
                                            let v4482 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4474 v4481 
                                            let _run_target_args'_v4476 = v4482 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4483 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4476 = v4483 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4484 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4476 = v4484 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4485 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4476 = v4485 
                                            #endif
#else
                                            let v4486 : std_string_String = match v4474 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4476 = v4486 
                                            #endif
                                            let v4487 : std_string_String = _run_target_args'_v4476 
                                            let v4490 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4491 : string = Fable.Core.RustInterop.emitRustExpr v4487 v4490 
                                            let _run_target_args'_v4420 = v4491 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4493 : string = null |> unbox<string>
                                            let _run_target_args'_v4420 = v4493 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4497 : string = null |> unbox<string>
                                            let _run_target_args'_v4420 = v4497 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4501 : string = null |> unbox<string>
                                            let _run_target_args'_v4420 = v4501 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4505 : string = null |> unbox<string>
                                            let _run_target_args'_v4420 = v4505 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4509 : string = null |> unbox<string>
                                            let _run_target_args'_v4420 = v4509 
                                            #endif
#else
                                            let v4512 : string = v4415 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4420 = v4512 
                                            #endif
                                            let v4513 : string = _run_target_args'_v4420 
                                            let v4519 : string = method233()
                                            let v4520 : string = "on_startup!"
                                            let v4521 : string = v4520 + v4519 
                                            let v4522 : string = method234()
                                            let v4523 : string = " method0"
                                            let v4524 : string = v4523 + v4522 
                                            let v4526 : bool = v4513.Contains v4521 
                                            let v4534 : bool =
                                                if v4526 then
                                                    let v4530 : bool = v4513.Contains v4524 
                                                    let v4533 : bool = v4530 = false
                                                    v4533
                                                else
                                                    false
                                            let v4535 : string = $"[package]"
                                            let v4536 : string = $"name = \"spiral_{v3997}\""
                                            let v4537 : string = "\n"
                                            let v4538 : string = v4535 + v4537 
                                            let v4539 : string = v4538 + v4536 
                                            let v4540 : string = $"version = \"0.0.1\""
                                            let v4541 : string = v4539 + v4537 
                                            let v4542 : string = v4541 + v4540 
                                            let v4543 : string = $"edition = \"2021\""
                                            let v4544 : string = v4542 + v4537 
                                            let v4545 : string = v4544 + v4543 
                                            let v4546 : string = $""
                                            let v4547 : string = v4545 + v4537 
                                            let v4548 : string = v4547 + v4546 
                                            let v4549 : string = $"[dependencies]"
                                            let v4550 : string = v4548 + v4537 
                                            let v4551 : string = v4550 + v4549 
                                            let v4554 : US39 = US39_1
                                            let v4555 : bool = v3891 <> v4554 
                                            let v4573 : string =
                                                if v4555 then
                                                    let v4559 : string = $"fable_library_rust = {{ workspace = true }}"
                                                    v4559
                                                else
                                                    let v4560 : string = $"fable_library_rust = {{"
                                                    let v4561 : string = $" workspace = true,"
                                                    let v4562 : string = v4560 + v4561 
                                                    let v4563 : string = $" features = ["
                                                    let v4564 : string = v4562 + v4563 
                                                    let v4567 : string =
                                                        if v4534 then
                                                            let v4565 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                            v4565
                                                        else
                                                            let v4566 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                            v4566
                                                    let v4568 : string = v4564 + v4567 
                                                    let v4569 : string = $"]"
                                                    let v4570 : string = v4568 + v4569 
                                                    let v4571 : string = $"}}"
                                                    let v4572 : string = v4570 + v4571 
                                                    v4572
                                            let v4574 : string = v4551 + v4537 
                                            let v4575 : string = v4574 + v4573 
                                            let v4576 : string = $"inline_colorization = {{ workspace = true }}"
                                            let v4577 : string = v4575 + v4537 
                                            let v4578 : string = v4577 + v4576 
                                            let v4579 : string = $"{v4410}"
                                            let v4580 : string = v4578 + v4537 
                                            let v4581 : string = v4580 + v4579 
                                            let v4582 : string = $""
                                            let v4583 : string = v4581 + v4537 
                                            let v4584 : string = v4583 + v4582 
                                            let v4585 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4594 : string =
                                                if v4585 then
                                                    let v4586 : string = $"[[bin]]"
                                                    let v4587 : string = $"name = \"spiral_{v3997}\""
                                                    let v4588 : string = v4586 + v4537 
                                                    let v4589 : string = v4588 + v4587 
                                                    v4589
                                                else
                                                    let v4590 : string = $"[lib]"
                                                    let v4591 : string = $"crate-type = [\"cdylib\"]"
                                                    let v4592 : string = v4590 + v4537 
                                                    let v4593 : string = v4592 + v4591 
                                                    v4593
                                            let v4595 : string = v4584 + v4537 
                                            let v4596 : string = v4595 + v4594 
                                            let v4597 : string = $"path = \"spiral.rs\""
                                            let v4598 : string = v4596 + v4537 
                                            let v4599 : string = v4598 + v4597 
                                            let v4600 : string = method46(v4068)
                                            let v4601 : string = $"cargo-features = [\"profile-rustflags\"]"
                                            let v4602 : string = $""
                                            let v4603 : string = v4601 + v4537 
                                            let v4604 : string = v4603 + v4602 
                                            let v4605 : string = $"[workspace]"
                                            let v4606 : string = v4604 + v4537 
                                            let v4607 : string = v4606 + v4605 
                                            let v4608 : string = $"resolver = \"2\""
                                            let v4609 : string = v4607 + v4537 
                                            let v4610 : string = v4609 + v4608 
                                            let v4611 : string = $"members = [\"packages/Rust/*\"]"
                                            let v4612 : string = v4610 + v4537 
                                            let v4613 : string = v4612 + v4611 
                                            let v4614 : string = $""
                                            let v4615 : string = v4613 + v4537 
                                            let v4616 : string = v4615 + v4614 
                                            let v4617 : string = $"[workspace.dependencies.fable_library_rust]"
                                            let v4618 : string = v4616 + v4537 
                                            let v4619 : string = v4618 + v4617 
                                            let v4620 : string = $"path = \"{v4600}/lib/rust/fable/fable_modules/fable-library-rust\""
                                            let v4621 : string = v4619 + v4537 
                                            let v4622 : string = v4621 + v4620 
                                            let v4623 : string = $"default-features = false"
                                            let v4624 : string = v4622 + v4537 
                                            let v4625 : string = v4624 + v4623 
                                            let v4626 : string = $"features = []"
                                            let v4627 : string = v4625 + v4537 
                                            let v4628 : string = v4627 + v4626 
                                            let v4629 : string = $""
                                            let v4630 : string = v4628 + v4537 
                                            let v4631 : string = v4630 + v4629 
                                            let v4632 : string = $"[workspace.dependencies]"
                                            let v4633 : string = v4631 + v4537 
                                            let v4634 : string = v4633 + v4632 
                                            let v4635 : string = $"inline_colorization = \"~0.1\""
                                            let v4636 : string = v4634 + v4537 
                                            let v4637 : string = v4636 + v4635 
                                            let v4638 : string = $""
                                            let v4639 : string = v4637 + v4537 
                                            let v4640 : string = v4639 + v4638 
                                            let v4641 : string = $"[profile.release]"
                                            let v4642 : string = v4640 + v4537 
                                            let v4643 : string = v4642 + v4641 
                                            let v4644 : string = $"codegen-units = 1"
                                            let v4645 : string = v4643 + v4537 
                                            let v4646 : string = v4645 + v4644 
                                            let v4647 : string = $"opt-level = \"z\""
                                            let v4648 : string = v4646 + v4537 
                                            let v4649 : string = v4648 + v4647 
                                            let v4650 : string = $"lto = true"
                                            let v4651 : string = v4649 + v4537 
                                            let v4652 : string = v4651 + v4650 
                                            let v4653 : string = $"debug = false"
                                            let v4654 : string = v4652 + v4537 
                                            let v4655 : string = v4654 + v4653 
                                            let v4656 : string = $"panic = \"abort\""
                                            let v4657 : string = v4655 + v4537 
                                            let v4658 : string = v4657 + v4656 
                                            let v4659 : string = $"overflow-checks = true"
                                            let v4660 : string = v4658 + v4537 
                                            let v4661 : string = v4660 + v4659 
                                            let v4662 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                            let v4663 : string = v4661 + v4537 
                                            let v4664 : string = v4663 + v4662 
                                            method76(v4140, v4599)
                                            method76(v4083, v4664)
                                            let v4665 : string = "src/Range.rs"
                                            let v4666 : string = method36(v4200, v4665)
                                            let v4667 : bool = method38(v4666)
                                            if v4667 then
                                                (* run_target_args'
                                                let v4672 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                (* run_target_args'
                                                let v4677 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4678 : string = "std::fs::read(&*$0)"
                                                let v4679 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4666 v4678 
                                                (* run_target_args'
                                                let v4681 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4682 : string = "$0.unwrap()"
                                                let v4683 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4679 v4682 
                                                let _run_target_args'_v4681 = v4683 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4684 : string = "$0.unwrap()"
                                                let v4685 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4679 v4684 
                                                let _run_target_args'_v4681 = v4685 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4686 : string = "$0.unwrap()"
                                                let v4687 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4679 v4686 
                                                let _run_target_args'_v4681 = v4687 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4688 : Vec<uint8> = match v4679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4681 = v4688 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4689 : Vec<uint8> = match v4679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4681 = v4689 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4690 : Vec<uint8> = match v4679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4681 = v4690 
                                                #endif
#else
                                                let v4691 : Vec<uint8> = match v4679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4681 = v4691 
                                                #endif
                                                let v4692 : Vec<uint8> = _run_target_args'_v4681 
                                                let _run_target_args'_v4677 = v4692 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4696 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4677 = v4696 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4700 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4677 = v4700 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4704 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4677 = v4704 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4708 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4677 = v4708 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4712 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _run_target_args'_v4677 = v4712 
                                                #endif
#else
                                                let v4715 : (uint8 []) = v4666 |> System.IO.File.ReadAllBytes
                                                let v4716 : string = "$0.to_vec()"
                                                let v4717 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4715 v4716 
                                                let _run_target_args'_v4677 = v4717 
                                                #endif
                                                let v4718 : Vec<uint8> = _run_target_args'_v4677 
                                                let v4724 : Vec<uint8> = method27(v4718)
                                                let v4725 : string = "std::string::String::from_utf8($0)"
                                                let v4726 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4724 v4725 
                                                (* run_target_args'
                                                let v4728 : unit = ()
                                                run_target_args' *)
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4729 : string = "$0.unwrap()"
                                                let v4730 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4726 v4729 
                                                let _run_target_args'_v4728 = v4730 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4731 : string = "$0.unwrap()"
                                                let v4732 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4726 v4731 
                                                let _run_target_args'_v4728 = v4732 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4733 : string = "$0.unwrap()"
                                                let v4734 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4726 v4733 
                                                let _run_target_args'_v4728 = v4734 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4735 : std_string_String = match v4726 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4728 = v4735 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4736 : std_string_String = match v4726 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4728 = v4736 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4737 : std_string_String = match v4726 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4728 = v4737 
                                                #endif
#else
                                                let v4738 : std_string_String = match v4726 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _run_target_args'_v4728 = v4738 
                                                #endif
                                                let v4739 : std_string_String = _run_target_args'_v4728 
                                                let v4742 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4743 : string = Fable.Core.RustInterop.emitRustExpr v4739 v4742 
                                                let _run_target_args'_v4672 = v4743 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4745 : string = null |> unbox<string>
                                                let _run_target_args'_v4672 = v4745 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4749 : string = null |> unbox<string>
                                                let _run_target_args'_v4672 = v4749 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4753 : string = null |> unbox<string>
                                                let _run_target_args'_v4672 = v4753 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4757 : string = null |> unbox<string>
                                                let _run_target_args'_v4672 = v4757 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4761 : string = null |> unbox<string>
                                                let _run_target_args'_v4672 = v4761 
                                                #endif
#else
                                                let v4764 : string = v4666 |> System.IO.File.ReadAllText
                                                let _run_target_args'_v4672 = v4764 
                                                #endif
                                                let v4765 : string = _run_target_args'_v4672 
                                                let v4771 : string = "use crate::String_::fromCharCode;"
                                                let v4772 : string = "use crate::String_::fromChar;"
                                                let v4773 : string = v4765.Replace (v4771, v4772)
                                                let v4774 : string = "fromCharCode(c)"
                                                let v4775 : string = "std::char::from_u32(c).unwrap()"
                                                let v4776 : string = v4773.Replace (v4774, v4775)
                                                method76(v4666, v4776)
                                            let v4777 : uint8 = 1uy
                                            let struct (v4778 : int32, v4779 : string) = method235(v4048, v4140, v4777)
                                            let v4781 : bool = v4778 <> 0 
                                            if v4781 then
                                                let v4784 : unit = ()
                                                let v4785 : (unit -> unit) = closure93(v4779, v4778)
                                                let v4786 : unit = (fun () -> v4785 (); v4784) ()
                                                ()
                                            (* run_target_args'
                                            let v4837 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v4842 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4843 : string = "std::fs::read(&*$0)"
                                            let v4844 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4415 v4843 
                                            (* run_target_args'
                                            let v4846 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4847 : string = "$0.unwrap()"
                                            let v4848 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4844 v4847 
                                            let _run_target_args'_v4846 = v4848 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4849 : string = "$0.unwrap()"
                                            let v4850 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4844 v4849 
                                            let _run_target_args'_v4846 = v4850 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4851 : string = "$0.unwrap()"
                                            let v4852 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4844 v4851 
                                            let _run_target_args'_v4846 = v4852 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4853 : Vec<uint8> = match v4844 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4846 = v4853 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4854 : Vec<uint8> = match v4844 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4846 = v4854 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4855 : Vec<uint8> = match v4844 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4846 = v4855 
                                            #endif
#else
                                            let v4856 : Vec<uint8> = match v4844 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4846 = v4856 
                                            #endif
                                            let v4857 : Vec<uint8> = _run_target_args'_v4846 
                                            let _run_target_args'_v4842 = v4857 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4861 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4842 = v4861 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4865 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4842 = v4865 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4869 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4842 = v4869 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4873 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4842 = v4873 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4877 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v4842 = v4877 
                                            #endif
#else
                                            let v4880 : (uint8 []) = v4415 |> System.IO.File.ReadAllBytes
                                            let v4881 : string = "$0.to_vec()"
                                            let v4882 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4880 v4881 
                                            let _run_target_args'_v4842 = v4882 
                                            #endif
                                            let v4883 : Vec<uint8> = _run_target_args'_v4842 
                                            let v4889 : Vec<uint8> = method27(v4883)
                                            let v4890 : string = "std::string::String::from_utf8($0)"
                                            let v4891 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4889 v4890 
                                            (* run_target_args'
                                            let v4893 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v4894 : string = "$0.unwrap()"
                                            let v4895 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4891 v4894 
                                            let _run_target_args'_v4893 = v4895 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4896 : string = "$0.unwrap()"
                                            let v4897 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4891 v4896 
                                            let _run_target_args'_v4893 = v4897 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4898 : string = "$0.unwrap()"
                                            let v4899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4891 v4898 
                                            let _run_target_args'_v4893 = v4899 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4900 : std_string_String = match v4891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4893 = v4900 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4901 : std_string_String = match v4891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4893 = v4901 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4902 : std_string_String = match v4891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4893 = v4902 
                                            #endif
#else
                                            let v4903 : std_string_String = match v4891 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v4893 = v4903 
                                            #endif
                                            let v4904 : std_string_String = _run_target_args'_v4893 
                                            let v4907 : string = "fable_library_rust::String_::fromString($0)"
                                            let v4908 : string = Fable.Core.RustInterop.emitRustExpr v4904 v4907 
                                            let _run_target_args'_v4837 = v4908 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v4910 : string = null |> unbox<string>
                                            let _run_target_args'_v4837 = v4910 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v4914 : string = null |> unbox<string>
                                            let _run_target_args'_v4837 = v4914 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v4918 : string = null |> unbox<string>
                                            let _run_target_args'_v4837 = v4918 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v4922 : string = null |> unbox<string>
                                            let _run_target_args'_v4837 = v4922 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v4926 : string = null |> unbox<string>
                                            let _run_target_args'_v4837 = v4926 
                                            #endif
#else
                                            let v4929 : string = v4415 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v4837 = v4929 
                                            #endif
                                            let v4930 : string = _run_target_args'_v4837 
                                            let v4936 : string = method241()
                                            let v4937 : string = "pub fn main() -> Result<(), String> "
                                            let v4938 : string = v4937 + v4936 
                                            let v4939 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4972 : string =
                                                if v4939 then
                                                    let v4940 : string = ""
                                                    v4940
                                                else
                                                    let v4941 : string = $"#[near_sdk::near_bindgen]"
                                                    let v4942 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                    let v4943 : string = v4941 + v4537 
                                                    let v4944 : string = v4943 + v4942 
                                                    let v4945 : string = $"pub struct MainState {{"
                                                    let v4946 : string = v4944 + v4537 
                                                    let v4947 : string = v4946 + v4945 
                                                    let v4948 : string = $"}}"
                                                    let v4949 : string = v4947 + v4537 
                                                    let v4950 : string = v4949 + v4948 
                                                    let v4951 : string = $""
                                                    let v4952 : string = v4950 + v4537 
                                                    let v4953 : string = v4952 + v4951 
                                                    let v4954 : string = $"#[near_sdk::near_bindgen]"
                                                    let v4955 : string = v4953 + v4537 
                                                    let v4956 : string = v4955 + v4954 
                                                    let v4957 : string = $"impl MainState {{"
                                                    let v4958 : string = v4956 + v4537 
                                                    let v4959 : string = v4958 + v4957 
                                                    let v4960 : string = $"    pub fn state_main() {{"
                                                    let v4961 : string = v4959 + v4537 
                                                    let v4962 : string = v4961 + v4960 
                                                    let v4963 : string = $"        Spiral::method0();"
                                                    let v4964 : string = v4962 + v4537 
                                                    let v4965 : string = v4964 + v4963 
                                                    let v4966 : string = $"    }}"
                                                    let v4967 : string = v4965 + v4537 
                                                    let v4968 : string = v4967 + v4966 
                                                    let v4969 : string = $"}}"
                                                    let v4970 : string = v4968 + v4537 
                                                    let v4971 : string = v4970 + v4969 
                                                    v4971
                                            let v4973 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v4980 : bool =
                                                if v4973 then
                                                    let v4974 : string = "Spiral::method0()"
                                                    let v4975 : string = v4521 + v4974 
                                                    let v4977 : bool = v4930.Contains v4975 
                                                    v4977
                                                else
                                                    false
                                            let v4983 : string =
                                                if v4980 then
                                                    let v4981 : string = $"{v4938} Ok(Spiral::method0()) }}"
                                                    v4981
                                                else
                                                    let v4982 : string = $"{v4938} Ok(()) }}"
                                                    v4982
                                            let v4984 : string = v4972 + v4537 
                                            let v4985 : string = v4984 + v4983 
                                            let v4987 : bool = v4930.Contains v4938 
                                            let v4990 : string = $"{v4930}\n\n{v4985}\n"
                                            let v5089 : string =
                                                if v4987 then
                                                    v4930
                                                else
                                                    let v4994 : bool =
                                                        match v3891 with
                                                        | US39_0(v4991) -> (* Some *)
                                                            match v4991 with
                                                            | US40_1(v4992) -> (* Contract *)
                                                                true
                                                            | _ ->
                                                                false
                                                        | _ ->
                                                            false
                                                    let v4995 : string = "\";\".into()"
                                                    let v4996 : string = Fable.Core.RustInterop.emitRustExpr () v4995 
                                                    let v4997 : string = "),)"
                                                    let v4998 : string = v4997 + v4996 
                                                    let v4999 : string = "));"
                                                    let v5000 : string = v4990.Replace (v4998, v4999)
                                                    let v5001 : string = "\";\".into()"
                                                    let v5002 : string = Fable.Core.RustInterop.emitRustExpr () v5001 
                                                    let v5003 : string = "},)"
                                                    let v5004 : string = v5003 + v5002 
                                                    let v5005 : string = "});"
                                                    let v5006 : string = v5000.Replace (v5004, v5005)
                                                    let v5007 : string = "\\s\\sdefaultOf\\(\\);"
                                                    let v5008 : string = " defaultOf::<()>();"
                                                    let v5009 : string = method66(v5007, v5008, v5006)
                                                    let v5010 : string = "\\s\\sgetZero\\(\\);"
                                                    let v5011 : string = " getZero::<()>();"
                                                    let v5012 : string = method66(v5010, v5011, v5009)
                                                    let v5013 : string = "\"t\".into()"
                                                    let v5014 : string = Fable.Core.RustInterop.emitRustExpr () v5013 
                                                    let v5015 : string = "(&e.get_Curren"
                                                    let v5016 : string = v5015 + v5014 
                                                    let v5017 : string = "(e.get_Current"
                                                    let v5018 : string = v5012.Replace (v5016, v5017)
                                                    let v5019 : string = "\"::<()>()\".into()"
                                                    let v5020 : string = Fable.Core.RustInterop.emitRustExpr () v5019 
                                                    let v5021 : string = "getNull"
                                                    let v5022 : string = v5021 + v5020 
                                                    let v5023 : string = "fable_library_rust::Native_::getZero()"
                                                    let v5024 : string = v5018.Replace (v5022, v5023)
                                                    let v5025 : string = "\\s\\sfable_library_rust::Native_::getZero\\(\\);"
                                                    let v5026 : string = " fable_library_rust::Native_::getZero::<()>();"
                                                    let v5027 : string = method66(v5025, v5026, v5024)
                                                    let v5028 : string = "::Slice'_"
                                                    let v5029 : string = "::Slice__"
                                                    let v5030 : string = v5027.Replace (v5028, v5029)
                                                    let v5031 : string = " Slice'_"
                                                    let v5032 : string = " Slice__"
                                                    let v5033 : string = v5030.Replace (v5031, v5032)
                                                    let v5034 : string = "\",\".into()"
                                                    let v5035 : string = Fable.Core.RustInterop.emitRustExpr () v5034 
                                                    let v5036 : string = "defaultOf()"
                                                    let v5037 : string = v5036 + v5035 
                                                    let v5038 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                    let v5039 : string = v5033.Replace (v5037, v5038)
                                                    let v5040 : string = "\"__.\".into()"
                                                    let v5041 : string = Fable.Core.RustInterop.emitRustExpr () v5040 
                                                    let v5042 : string = "__self"
                                                    let v5043 : string = v5042 + v5041 
                                                    let v5044 : string = "self."
                                                    let v5045 : string = v5039.Replace (v5043, v5044)
                                                    let v5046 : string = "\"_.\".into()"
                                                    let v5047 : string = Fable.Core.RustInterop.emitRustExpr () v5046 
                                                    let v5048 : string = "_self"
                                                    let v5049 : string = v5048 + v5047 
                                                    let v5050 : string = v5045.Replace (v5049, v5044)
                                                    let v5051 : string = "\"h\".into()"
                                                    let v5052 : string = Fable.Core.RustInterop.emitRustExpr () v5051 
                                                    let v5053 : string = "get_or_insert_wit"
                                                    let v5054 : string = v5053 + v5052 
                                                    let v5055 : string = "get_or_init"
                                                    let v5056 : string = v5050.Replace (v5054, v5055)
                                                    let v5057 : string = "\";\".into()"
                                                    let v5058 : string = Fable.Core.RustInterop.emitRustExpr () v5057 
                                                    let v5059 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                    let v5060 : string = v5059 + v5058 
                                                    let v5061 : string = "type ConcurrentStack_1<T> = T;"
                                                    let v5062 : string = v5056.Replace (v5060, v5061)
                                                    let v5063 : string = "\";\".into()"
                                                    let v5064 : string = Fable.Core.RustInterop.emitRustExpr () v5063 
                                                    let v5065 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                    let v5066 : string = v5065 + v5064 
                                                    let v5067 : string = "type TimeZoneInfo = i64;"
                                                    let v5068 : string = v5062.Replace (v5066, v5067)
                                                    let v5069 : string = "\";\".into()"
                                                    let v5070 : string = Fable.Core.RustInterop.emitRustExpr () v5069 
                                                    let v5071 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                    let v5072 : string = v5071 + v5070 
                                                    let v5073 : string = "type TaskCanceledException = ();"
                                                    let v5074 : string = v5068.Replace (v5072, v5073)
                                                    let v5079 : (string -> string) =
                                                        if v4534 then
                                                            closure94()
                                                        else
                                                            let v5076 : string = "// "
                                                            let v5077 : string = v5076 + v4521 
                                                            closure95(v4521, v5077)
                                                    let v5080 : string = v5079 v5074
                                                    let v5081 : bool = v4994 = false
                                                    let v5087 : (string -> string) =
                                                        if v5081 then
                                                            closure94()
                                                        else
                                                            let v5083 : string = "use fable_library_rust::DateTime_::DateTime"
                                                            let v5084 : string = ";"
                                                            let v5085 : string = v5083 + v5084 
                                                            closure96(v5085)
                                                    v5087 v5080
                                            let v5090 : bool = v4987 = false
                                            if v5090 then
                                                method76(v4415, v5089)
                                            let v5091 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v5092 : bool = v5091 <> true
                                            let v5095 : string =
                                                if v5092 then
                                                    let v5093 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v4140}\""
                                                    v5093
                                                else
                                                    let v5094 : string = $"cargo run --manifest-path \"{v4140}\""
                                                    v5094
                                            let v5096 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v5097 : bool = v5096 <> true
                                            let v5108 : (struct (string * string) []) =
                                                if v5097 then
                                                    [||]
                                                else
                                                    let v5099 : string = "TRACE_LEVEL"
                                                    let v5100 : string = "Verbose"
                                                    let v5101 : string = "RUSTC_WRAPPER"
                                                    let v5102 : string = "sccache"
                                                    let v5103 : string = "RUST_BACKTRACE"
                                                    let v5104 : string = "full"
                                                    let v5105 : string = "RUSTFLAGS"
                                                    let v5106 : string = "-C prefer-dynamic"
                                                    [|struct (v5099, v5100); struct (v5101, v5102); struct (v5103, v5104); struct (v5105, v5106)|]
                                            let v5110 : System.Threading.CancellationToken option = None
                                            let v5113 : (struct (string * string) []) = [||]
                                            let v5115 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                            let v5119 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                            let v5123 : string option = None
                                            let v5137 : Result<string, string> =
                                                match v4048 with
                                                | US13_1(v5131) -> (* Error *)
                                                    let v5133 : Result<string, string> = Error v5131 
                                                    v5133
                                                | US13_0(v5126) -> (* Ok *)
                                                    let v5128 : Result<string, string> = Ok v5126 
                                                    v5128
                                            (* run_target_args'
                                            let v5139 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5140 : string = "$0.ok()"
                                            let v5141 : string option = Fable.Core.RustInterop.emitRustExpr v5137 v5140 
                                            let _run_target_args'_v5139 = v5141 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5142 : string = "$0.ok()"
                                            let v5143 : string option = Fable.Core.RustInterop.emitRustExpr v5137 v5142 
                                            let _run_target_args'_v5139 = v5143 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5144 : string = "$0.ok()"
                                            let v5145 : string option = Fable.Core.RustInterop.emitRustExpr v5137 v5144 
                                            let _run_target_args'_v5139 = v5145 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5146 : string option = match v5137 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v5139 = v5146 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5147 : string option = match v5137 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v5139 = v5147 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5148 : string option = match v5137 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v5139 = v5148 
                                            #endif
#else
                                            let v5149 : string option = match v5137 with Ok x -> Some x | Error _ -> None
                                            let _run_target_args'_v5139 = v5149 
                                            #endif
                                            let v5150 : string option = _run_target_args'_v5139 
                                            let v5153 : bool = true
                                            let struct (v5154 : int32, v5155 : string) = method101(v5095, v5110, v5108, v5115, v5119, v5153, v5150)
                                            let v5156 : bool =
                                                match v3891 with
                                                | US39_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let struct (v5436 : US5, v5437 : US5, v5438 : US5, v5439 : US5) =
                                                if v5156 then
                                                    let v5157 : int32 = v5108.Length
                                                    let v5158 : (string []) = Array.zeroCreate<string> (v5157)
                                                    let v5159 : Mut5 = {l0 = 0} : Mut5
                                                    while method32(v5157, v5159) do
                                                        let v5161 : int32 = v5159.l0
                                                        let struct (v5162 : string, v5163 : string) = v5108.[int v5161]
                                                        let v5164 : string = $"$env:{v5162}=''{v5163}''"
                                                        v5158.[int v5161] <- v5164
                                                        let v5165 : int32 = v5161 + 1
                                                        v5159.l0 <- v5165
                                                        ()
                                                    let v5167 : string seq = v5158 |> Seq.ofArray
                                                    let v5172 : (string -> (string seq -> string)) = String.concat
                                                    let v5173 : string = ";"
                                                    let v5174 : (string seq -> string) = v5172 v5173
                                                    let v5175 : string = v5174 v5167
                                                    let v5178 : (string []) = [|v5175; v5095|]
                                                    let v5180 : string seq = v5178 |> Seq.ofArray
                                                    let v5184 : (string -> (string seq -> string)) = String.concat
                                                    let v5185 : (string seq -> string) = v5184 v5173
                                                    let v5186 : string = v5185 v5180
                                                    let v5189 : string = $"pwsh -c '{v5186}'"
                                                    let v5191 : bool = v5154 <> 0 
                                                    let struct (v5273 : US5, v5274 : US5, v5275 : US5, v5276 : US5) =
                                                        if v5191 then
                                                            let v5194 : unit = ()
                                                            let v5195 : (unit -> unit) = closure97(v3740, v4415, v5155, v5154, v5189)
                                                            let v5196 : unit = (fun () -> v5195 (); v5194) ()
                                                            let v5243 : US5 = US5_0(v3995)
                                                            let v5244 : US5 = US5_1
                                                            let v5245 : US5 = US5_1
                                                            let v5246 : US5 = US5_1
                                                            struct (v5243, v5244, v5245, v5246)
                                                        else
                                                            let v5247 : (string -> US5) = closure72()
                                                            let v5248 : (unit -> string) = closure98(v5155)
                                                            let v5249 : (exn -> US5) = closure100(v4415, v5155, v5189)
                                                            let v5251 : US5 = US5_1
                                                            let result = ref v5251
                                                            try
                                                                result.Value <- v5248 () |> v5247 
                                                            with ex ->
                                                                result.Value <- v5249 ex 
                                                            let v5252 : US5 = result.Value
                                                            let v5266 : string option =
                                                                match v5252 with
                                                                | US5_1 -> (* None *)
                                                                    let v5262 : string option = None
                                                                    v5262
                                                                | US5_0(v5256) -> (* Some *)
                                                                    let v5258 : string option = Some v5256 
                                                                    v5258
                                                            let v5267 : string = "$0.unwrap()"
                                                            let v5268 : string = Fable.Core.RustInterop.emitRustExpr v5266 v5267 
                                                            let v5269 : US5 = US5_0(v3995)
                                                            let v5270 : US5 = US5_0(v5089)
                                                            let v5271 : US5 = US5_0(v4415)
                                                            let v5272 : US5 = US5_0(v5268)
                                                            struct (v5269, v5270, v5271, v5272)
                                                    struct (v5273, v5274, v5275, v5276)
                                                else
                                                    let v5277 : string = $"target/spiral/{v4069}/target/wasm32-unknown-unknown/release/spiral_{v3997}.wasm"
                                                    let v5284 : string =
                                                        match v3891 with
                                                        | US39_0(v5278) -> (* Some *)
                                                            match v5278 with
                                                            | US40_1(v5280) -> (* Contract *)
                                                                v5280
                                                            | US40_0(v5279) -> (* Wasm *)
                                                                v5279
                                                        | _ ->
                                                            let v5283 : string = ""
                                                            v5283
                                                    let v5285 : string = $"'deps/spiral/workspace/target/release/spiral_wasm -w {v5277} -t debug {v5284}'"
                                                    let v5286 : string = "AUTOMATION"
                                                    let v5287 : string = method3(v5286)
                                                    let v5288 : string = "scripts/invoke-block.ps1"
                                                    let v5289 : string = $"pwsh -c \"pwsh {v5288} {v5285} -Linux -EnvironmentVariables AUTOMATION={v5287}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                    let v5290 : bool = v5154 = 0
                                                    let struct (v5432 : US5, v5433 : US5, v5434 : US5, v5435 : US5) =
                                                        if v5290 then
                                                            let v5292 : System.Threading.CancellationToken option = None
                                                            let v5295 : (struct (string * string) []) = [||]
                                                            let v5297 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v5301 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v5305 : string option = None
                                                            let v5309 : string option = Some v4068 
                                                            let v5312 : bool = true
                                                            let struct (v5313 : int32, v5314 : string) = method101(v5289, v5292, v5295, v5297, v5301, v5312, v5309)
                                                            let v5315 : bool = v5313 = 0
                                                            let struct (v5374 : US5, v5375 : US5, v5376 : US5, v5377 : US5) =
                                                                if v5315 then
                                                                    let v5316 : US5 = US5_0(v3995)
                                                                    let v5317 : US5 = US5_0(v5089)
                                                                    let v5318 : US5 = US5_0(v4415)
                                                                    let v5319 : US5 = US5_0(v5314)
                                                                    struct (v5316, v5317, v5318, v5319)
                                                                else
                                                                    let v5320 : unit = ()
                                                                    let v5321 : (unit -> unit) = closure102(v3740, v4415, v5155, v5314, v5313)
                                                                    let v5322 : unit = (fun () -> v5321 (); v5320) ()
                                                                    let v5370 : US5 = US5_0(v3995)
                                                                    let v5371 : US5 = US5_1
                                                                    let v5372 : US5 = US5_1
                                                                    let v5373 : US5 = US5_1
                                                                    struct (v5370, v5371, v5372, v5373)
                                                            struct (v5374, v5375, v5376, v5377)
                                                        else
                                                            let v5378 : unit = ()
                                                            let v5379 : (unit -> unit) = closure103(v3740, v4415, v5155, v5154, v5277, v5289)
                                                            let v5380 : unit = (fun () -> v5379 (); v5378) ()
                                                            let v5428 : US5 = US5_0(v3995)
                                                            let v5429 : US5 = US5_1
                                                            let v5430 : US5 = US5_1
                                                            let v5431 : US5 = US5_1
                                                            struct (v5428, v5429, v5430, v5431)
                                                    struct (v5432, v5433, v5434, v5435)
                                            if v3740 then
                                                let v5440 : bool =
                                                    match v3891 with
                                                    | US39_1 -> (* None *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v5441 : bool = v5440 <> true
                                                let v5444 : string =
                                                    if v5441 then
                                                        let v5442 : string = "wasm32-unknown-unknown/release"
                                                        v5442
                                                    else
                                                        let v5443 : string = "debug"
                                                        v5443
                                                let v5445 : string = ""
                                                let v5446 : string = $"target/{v5444}/spiral_{v3997}{v5445}"
                                                let v5447 : string = method36(v4081, v5446)
                                                let v5448 : string = ".wasm"
                                                let v5449 : string = $"target/{v5444}/spiral_{v3997}{v5448}"
                                                let v5450 : string = method36(v4081, v5449)
                                                let v5451 : string = ".pdb"
                                                let v5452 : string = $"target/{v5444}/spiral_{v3997}{v5451}"
                                                let v5453 : string = method36(v4081, v5452)
                                                let v5454 : string = ".exe"
                                                let v5455 : string = $"target/{v5444}/spiral_{v3997}{v5454}"
                                                let v5456 : string = method36(v4081, v5455)
                                                let v5457 : string = ".d"
                                                let v5458 : string = $"target/{v5444}/spiral_{v3997}{v5457}"
                                                let v5459 : string = method36(v4081, v5458)
                                                let v5460 : bool = method38(v5447)
                                                let v5461 : bool = method38(v5450)
                                                let v5462 : bool = method38(v5453)
                                                let v5463 : bool = method38(v5456)
                                                let v5464 : bool = method38(v5459)
                                                let v5465 : unit = ()
                                                let v5466 : (unit -> unit) = closure104(v4415, v5459, v5464, v5456, v5463, v5453, v5462, v5450, v5461, v5447, v5460)
                                                let v5467 : unit = (fun () -> v5466 (); v5465) ()
                                                let v5517 : UH5 =
                                                    if v5460 then
                                                        let v5514 : UH5 = UH5_0
                                                        UH5_1(v5447, v5460, v5514)
                                                    else
                                                        UH5_0
                                                let v5519 : UH5 =
                                                    if v5461 then
                                                        UH5_1(v5450, v5461, v5517)
                                                    else
                                                        v5517
                                                let v5521 : UH5 =
                                                    if v5462 then
                                                        UH5_1(v5453, v5462, v5519)
                                                    else
                                                        v5519
                                                let v5523 : UH5 =
                                                    if v5463 then
                                                        UH5_1(v5456, v5463, v5521)
                                                    else
                                                        v5521
                                                let v5525 : UH5 =
                                                    if v5464 then
                                                        UH5_1(v5459, v5464, v5523)
                                                    else
                                                        v5523
                                                method252(v5525)
                                            struct (v5436, v5437, v5438, v5439)
                                    struct (v5526, v5527, v5528, v5529)
                                else
                                    let v5530 : string = "fable_library_rust::String_::fromString($0)"
                                    let v5531 : string = Fable.Core.RustInterop.emitRustExpr v40 v5530 
                                    let v5532 : bool = v5531 = "typescript"
                                    let struct (v7330 : US5, v7331 : US5, v7332 : US5, v7333 : US5) =
                                        if v5532 then
                                            let v5533 : string = method191()
                                            (* run_target_args'
                                            let v5538 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5539 : string = "&*$0"
                                            let v5540 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5533 v5539 
                                            let _run_target_args'_v5538 = v5540 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5541 : string = "&*$0"
                                            let v5542 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5533 v5541 
                                            let _run_target_args'_v5538 = v5542 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5543 : string = "&*$0"
                                            let v5544 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5533 v5543 
                                            let _run_target_args'_v5538 = v5544 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5546 : Ref<Str> = v5533 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5538 = v5546 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5550 : Ref<Str> = v5533 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5538 = v5550 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5554 : Ref<Str> = v5533 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5538 = v5554 
                                            #endif
#else
                                            let v5558 : Ref<Str> = v5533 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5538 = v5558 
                                            #endif
                                            let v5561 : Ref<Str> = _run_target_args'_v5538 
                                            let v5567 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                            let v5568 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v5561) v5567 
                                            let v5571 : (std_string_String -> US7) = method23()
                                            let v5572 : US7 option = v5568 |> Option.map v5571 
                                            let v5592 : US7 = US7_1
                                            let v5593 : US7 = v5572 |> Option.defaultValue v5592 
                                            let v5600 : std_string_String =
                                                match v5593 with
                                                | US7_1 -> (* None *)
                                                    failwith<std_string_String> "Option does not have a value."
                                                | US7_0(v5597) -> (* Some *)
                                                    v5597
                                            let v5601 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5602 : string = Fable.Core.RustInterop.emitRustExpr v5600 v5601 
                                            let v5603 : string = method25()
                                            (* run_target_args'
                                            let v5608 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5609 : string = "&*$0"
                                            let v5610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5603 v5609 
                                            let _run_target_args'_v5608 = v5610 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5611 : string = "&*$0"
                                            let v5612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5603 v5611 
                                            let _run_target_args'_v5608 = v5612 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5613 : string = "&*$0"
                                            let v5614 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5603 v5613 
                                            let _run_target_args'_v5608 = v5614 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5616 : Ref<Str> = v5603 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5608 = v5616 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5620 : Ref<Str> = v5603 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5608 = v5620 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5624 : Ref<Str> = v5603 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5608 = v5624 
                                            #endif
#else
                                            let v5628 : Ref<Str> = v5603 |> unbox<Ref<Str>>
                                            let _run_target_args'_v5608 = v5628 
                                            #endif
                                            let v5631 : Ref<Str> = _run_target_args'_v5608 
                                            let v5637 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                            let v5638 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v5631) v5637 
                                            let v5641 : (Vec<std_string_String> -> US11) = method26()
                                            let v5642 : US11 option = v5638 |> Option.map v5641 
                                            let v5662 : US11 = US11_1
                                            let v5663 : US11 = v5642 |> Option.defaultValue v5662 
                                            let v5667 : (std_string_String []) = [||]
                                            let v5668 : string = "$0.to_vec()"
                                            let v5669 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v5667 v5668 
                                            let v5672 : Vec<std_string_String> =
                                                match v5663 with
                                                | US11_1 -> (* None *)
                                                    v5669
                                                | US11_0(v5670) -> (* Some *)
                                                    v5670
                                            (* run_target_args'
                                            let v5677 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            (* run_target_args'
                                            let v5682 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5683 : string = "std::fs::read(&*$0)"
                                            let v5684 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v5602 v5683 
                                            (* run_target_args'
                                            let v5686 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5687 : string = "$0.unwrap()"
                                            let v5688 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5684 v5687 
                                            let _run_target_args'_v5686 = v5688 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5689 : string = "$0.unwrap()"
                                            let v5690 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5684 v5689 
                                            let _run_target_args'_v5686 = v5690 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5691 : string = "$0.unwrap()"
                                            let v5692 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5684 v5691 
                                            let _run_target_args'_v5686 = v5692 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5693 : Vec<uint8> = match v5684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5686 = v5693 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5694 : Vec<uint8> = match v5684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5686 = v5694 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5695 : Vec<uint8> = match v5684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5686 = v5695 
                                            #endif
#else
                                            let v5696 : Vec<uint8> = match v5684 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5686 = v5696 
                                            #endif
                                            let v5697 : Vec<uint8> = _run_target_args'_v5686 
                                            let _run_target_args'_v5682 = v5697 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5701 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5682 = v5701 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5705 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5682 = v5705 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5709 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5682 = v5709 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5713 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5682 = v5713 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5717 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _run_target_args'_v5682 = v5717 
                                            #endif
#else
                                            let v5720 : (uint8 []) = v5602 |> System.IO.File.ReadAllBytes
                                            let v5721 : string = "$0.to_vec()"
                                            let v5722 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5720 v5721 
                                            let _run_target_args'_v5682 = v5722 
                                            #endif
                                            let v5723 : Vec<uint8> = _run_target_args'_v5682 
                                            let v5729 : Vec<uint8> = method27(v5723)
                                            let v5730 : string = "std::string::String::from_utf8($0)"
                                            let v5731 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v5729 v5730 
                                            (* run_target_args'
                                            let v5733 : unit = ()
                                            run_target_args' *)
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v5734 : string = "$0.unwrap()"
                                            let v5735 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5731 v5734 
                                            let _run_target_args'_v5733 = v5735 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5736 : string = "$0.unwrap()"
                                            let v5737 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5731 v5736 
                                            let _run_target_args'_v5733 = v5737 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5738 : string = "$0.unwrap()"
                                            let v5739 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5731 v5738 
                                            let _run_target_args'_v5733 = v5739 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5740 : std_string_String = match v5731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5733 = v5740 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5741 : std_string_String = match v5731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5733 = v5741 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5742 : std_string_String = match v5731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5733 = v5742 
                                            #endif
#else
                                            let v5743 : std_string_String = match v5731 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _run_target_args'_v5733 = v5743 
                                            #endif
                                            let v5744 : std_string_String = _run_target_args'_v5733 
                                            let v5747 : string = "fable_library_rust::String_::fromString($0)"
                                            let v5748 : string = Fable.Core.RustInterop.emitRustExpr v5744 v5747 
                                            let _run_target_args'_v5677 = v5748 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v5750 : string = null |> unbox<string>
                                            let _run_target_args'_v5677 = v5750 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v5754 : string = null |> unbox<string>
                                            let _run_target_args'_v5677 = v5754 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v5758 : string = null |> unbox<string>
                                            let _run_target_args'_v5677 = v5758 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v5762 : string = null |> unbox<string>
                                            let _run_target_args'_v5677 = v5762 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v5766 : string = null |> unbox<string>
                                            let _run_target_args'_v5677 = v5766 
                                            #endif
#else
                                            let v5769 : string = v5602 |> System.IO.File.ReadAllText
                                            let _run_target_args'_v5677 = v5769 
                                            #endif
                                            let v5770 : string = _run_target_args'_v5677 
                                            let v5778 : string = "ts"
                                            let v5779 : string = $"%A{struct (v5778, v5770)}"
                                            let v5782 : string = method29(v5779)
                                            let v5783 : string = method34()
                                            let v5784 : US5 = method35(v5783)
                                            let v5790 : US5 =
                                                match v5784 with
                                                | US5_1 -> (* None *)
                                                    let v5787 : string = __SOURCE_DIRECTORY__
                                                    method35(v5787)
                                                | US5_0(v5785) -> (* Some *)
                                                    US5_0(v5785)
                                            let v5796 : US5 =
                                                match v5790 with
                                                | US5_1 -> (* None *)
                                                    let v5793 : string = "/workspaces"
                                                    method35(v5793)
                                                | US5_0(v5791) -> (* Some *)
                                                    US5_0(v5791)
                                            let v5800 : string =
                                                match v5796 with
                                                | US5_1 -> (* None *)
                                                    failwith<string> "Option does not have a value."
                                                | US5_0(v5797) -> (* Some *)
                                                    v5797
                                            let v5801 : string = method55(v5800)
                                            let v5802 : bool = "deps" = v5801
                                            let v5813 : string =
                                                if v5802 then
                                                    let v5803 : string option = method41(v5800)
                                                    let v5805 : string = v5803 |> Option.get
                                                    let v5808 : US5 = method35(v5805)
                                                    match v5808 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v5809) -> (* Some *)
                                                        v5809
                                                else
                                                    v5800
                                            let v5814 : string = "polyglot"
                                            let v5815 : string = method36(v5813, v5814)
                                            let v5816 : string = method34()
                                            let v5818 : (unit -> string) = v5816.ToLower
                                            let v5819 : string = v5818 ()
                                            let v5823 : (unit -> string) = v5815.ToLower
                                            let v5824 : string = v5823 ()
                                            let v5828 : bool = v5819.StartsWith (v5824, false, null)
                                            let v5833 : US13 =
                                                if v5828 then
                                                    US13_1(v5824)
                                                else
                                                    US13_0(v5824)
                                            let v5845 : Result<string, string> =
                                                match v5833 with
                                                | US13_1(v5839) -> (* Error *)
                                                    let v5841 : Result<string, string> = Error v5839 
                                                    v5841
                                                | US13_0(v5834) -> (* Ok *)
                                                    let v5836 : Result<string, string> = Ok v5834 
                                                    v5836
                                            let v5846 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                            let v5847 : bool = Fable.Core.RustInterop.emitRustExpr v5845 v5846 
                                            let v5848 : string = "x"
                                            let v5849 : string = Fable.Core.RustInterop.emitRustExpr () v5848 
                                            let v5850 : string = "true; $0 })"
                                            let v5851 : bool = Fable.Core.RustInterop.emitRustExpr v5849 v5850 
                                            let v5852 : string = "_result_unwrap_or_else"
                                            let v5853 : string = Fable.Core.RustInterop.emitRustExpr () v5852 
                                            let v5854 : string = "spiral"
                                            let v5855 : US41 = US41_1
                                            let v5856 : US42 = US42_0(v5855)
                                            let v5857 : US5 = US5_0(v5782)
                                            let v5858 : string = method211(v5857, v5854, v5856, v5853)
                                            let v5859 : string = "Fable.Core"
                                            let v5860 : string = "4.3.0"
                                            let v5861 : UH4 = UH4_0
                                            let v5862 : UH4 = UH4_1(v5859, v5860, v5861)
                                            let v5863 : UH2 = UH2_0
                                            let v5864 : string = method212(v5770, v5854, v5863, v5862, v5858, v5853)
                                            let v5865 : string = "lib/typescript/fable/fable_modules"
                                            let v5866 : string = method36(v5853, v5865)
                                            let v5867 : string = $"fable-library-{v5778}"
                                            let v5868 : string = method257(v5867)
                                            let v5869 : string = "async_walkdir::WalkDir::new(&*$0)"
                                            let v5870 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v5866 v5869 
                                            let v5871 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                            let v5872 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure108(v5867)
                                            let v5873 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v5870, v5872) v5871 
                                            let v5874 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method261(v5868)
                                            let v5875 : string = "futures::stream::StreamExt::filter_map(v5873, |x| async { v5874(x) })"
                                            let v5876 : _ = Fable.Core.RustInterop.emitRustExpr () v5875 
                                            let v5877 : string = "Box::pin(futures::stream::StreamExt::collect(v5876))"
                                            let v5878 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v5877 
                                            let v5879 : string = "v5878.await"
                                            let v5880 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v5879 
                                            let v5881 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                            let v5882 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v5880 v5881 
                                            let v5883 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                            let v5884 : (struct (string * string) -> struct (string * string)) = closure116()
                                            let v5885 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v5882, v5884) v5883 
                                            let v5886 : string = "rayon::iter::ParallelIterator::collect($0)"
                                            let v5887 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v5885 v5886 
                                            let v5888 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                            let v5889 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v5887 v5888 
                                            let v5890 : struct (string * string) option = v5889 |> Array.tryItem 0 
                                            let v5893 : (struct (string * string) -> US51) = method267()
                                            let v5894 : US51 option = v5890 |> Option.map v5893 
                                            let v5915 : US51 = US51_1
                                            let v5916 : US51 = v5894 |> Option.defaultValue v5915 
                                            let v5920 : unit = ()
                                            let v5921 : (unit -> unit) = closure118(v5916)
                                            let v5922 : unit = (fun () -> v5921 (); v5920) ()
                                            method270(v5858, v5866, v5916)
                                            let v5969 : US39 = US39_1
                                            let struct (v5970 : int32, v5971 : string) = method221(v5969, v5858, v5778, v5864, v5833)
                                            method270(v5858, v5866, v5916)
                                            let v5973 : bool = v5970 <> 0 
                                            let struct (v6473 : US5, v6474 : US5, v6475 : US5, v6476 : US5) =
                                                if v5973 then
                                                    let v5976 : unit = ()
                                                    let v5977 : (unit -> unit) = closure119(v5971, v5970)
                                                    let v5978 : unit = (fun () -> v5977 (); v5976) ()
                                                    let v6025 : US5 = US5_0(v5778)
                                                    let v6026 : US5 = US5_1
                                                    let v6027 : US5 = US5_1
                                                    let v6028 : US5 = US5_0(v5971)
                                                    struct (v6025, v6026, v6027, v6028)
                                                else
                                                    let v6029 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                    let v6030 : bool = Fable.Core.RustInterop.emitRustExpr v5672 v6029 
                                                    let v6031 : string = "x"
                                                    let v6032 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6031 
                                                    let v6033 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v6034 : string = Fable.Core.RustInterop.emitRustExpr v6032 v6033 
                                                    let v6037 : string = "="
                                                    let v6038 : bool = v6034.Contains v6037 
                                                    let v6042 : string =
                                                        if v6038 then
                                                            v6034
                                                        else
                                                            let v6041 : string = $"\"{v6034}\":\"*\""
                                                            v6041
                                                    let v6043 : string = "true; $0 }).collect::<Vec<_>>()"
                                                    let v6044 : bool = Fable.Core.RustInterop.emitRustExpr v6042 v6043 
                                                    let v6045 : string = "_vec_map"
                                                    let v6046 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6045 
                                                    let v6047 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                    let v6048 : (string []) = Fable.Core.RustInterop.emitRustExpr v6046 v6047 
                                                    let v6053 : unit = ()
                                                    let _let'_v6053 =
                                                        seq {
                                                            for i = 0 to v6048.Length - 1 do yield v6048.[i]
                                                            (* indent
                                                            ()
                                                        indent *)
                                                        }
                                                        (* indent
                                                        ()
                                                    indent *)
                                                    let v6056 : string seq = _let'_v6053 
                                                    let v6064 : (string -> (string seq -> string)) = String.concat
                                                    let v6065 : string = ",\n"
                                                    let v6066 : (string seq -> string) = v6064 v6065
                                                    let v6067 : string = v6066 v6056
                                                    let v6070 : string = $"{{"
                                                    let v6071 : string = $"  \"name\": \"spiral_{v5782}\","
                                                    let v6072 : string = v6070 + v6071 
                                                    let v6073 : string = $"  \"dependencies\": {{"
                                                    let v6074 : string = v6072 + v6073 
                                                    let v6075 : string = v6074 + v6067 
                                                    let v6076 : string = $"  }},"
                                                    let v6077 : string = v6075 + v6076 
                                                    let v6078 : string = $"    \"devDependencies\": {{"
                                                    let v6079 : string = v6077 + v6078 
                                                    let v6080 : string = $"  }},"
                                                    let v6081 : string = v6079 + v6080 
                                                    let v6082 : string = $"}}"
                                                    let v6083 : string = v6081 + v6082 
                                                    let v6084 : string = "package.json"
                                                    let v6085 : string = method36(v5858, v6084)
                                                    let v6086 : string = "../.."
                                                    let v6087 : string = method36(v5858, v6086)
                                                    let v6088 : string = method36(v6087, v6084)
                                                    method76(v6085, v6083)
                                                    let v6089 : string = ""
                                                    method76(v6088, v6089)
                                                    let v6090 : string = $"{v5854}.{v5778}"
                                                    let v6091 : string = method36(v5858, v6090)
                                                    let v6092 : unit = ()
                                                    let v6093 : (unit -> unit) = closure120(v6091)
                                                    let v6094 : unit = (fun () -> v6093 (); v6092) ()
                                                    (* run_target_args'
                                                    let v6145 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v6150 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6151 : string = "std::fs::read(&*$0)"
                                                    let v6152 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6091 v6151 
                                                    (* run_target_args'
                                                    let v6154 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6155 : string = "$0.unwrap()"
                                                    let v6156 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6152 v6155 
                                                    let _run_target_args'_v6154 = v6156 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6157 : string = "$0.unwrap()"
                                                    let v6158 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6152 v6157 
                                                    let _run_target_args'_v6154 = v6158 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6159 : string = "$0.unwrap()"
                                                    let v6160 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6152 v6159 
                                                    let _run_target_args'_v6154 = v6160 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6161 : Vec<uint8> = match v6152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6154 = v6161 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6162 : Vec<uint8> = match v6152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6154 = v6162 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6163 : Vec<uint8> = match v6152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6154 = v6163 
                                                    #endif
#else
                                                    let v6164 : Vec<uint8> = match v6152 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6154 = v6164 
                                                    #endif
                                                    let v6165 : Vec<uint8> = _run_target_args'_v6154 
                                                    let _run_target_args'_v6150 = v6165 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6169 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6150 = v6169 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6173 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6150 = v6173 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6177 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6150 = v6177 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6181 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6150 = v6181 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6185 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6150 = v6185 
                                                    #endif
#else
                                                    let v6188 : (uint8 []) = v6091 |> System.IO.File.ReadAllBytes
                                                    let v6189 : string = "$0.to_vec()"
                                                    let v6190 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6188 v6189 
                                                    let _run_target_args'_v6150 = v6190 
                                                    #endif
                                                    let v6191 : Vec<uint8> = _run_target_args'_v6150 
                                                    let v6197 : Vec<uint8> = method27(v6191)
                                                    let v6198 : string = "std::string::String::from_utf8($0)"
                                                    let v6199 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6197 v6198 
                                                    (* run_target_args'
                                                    let v6201 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6202 : string = "$0.unwrap()"
                                                    let v6203 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6199 v6202 
                                                    let _run_target_args'_v6201 = v6203 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6204 : string = "$0.unwrap()"
                                                    let v6205 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6199 v6204 
                                                    let _run_target_args'_v6201 = v6205 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6206 : string = "$0.unwrap()"
                                                    let v6207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6199 v6206 
                                                    let _run_target_args'_v6201 = v6207 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6208 : std_string_String = match v6199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6201 = v6208 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6209 : std_string_String = match v6199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6201 = v6209 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6210 : std_string_String = match v6199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6201 = v6210 
                                                    #endif
#else
                                                    let v6211 : std_string_String = match v6199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6201 = v6211 
                                                    #endif
                                                    let v6212 : std_string_String = _run_target_args'_v6201 
                                                    let v6215 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v6216 : string = Fable.Core.RustInterop.emitRustExpr v6212 v6215 
                                                    let _run_target_args'_v6145 = v6216 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6218 : string = null |> unbox<string>
                                                    let _run_target_args'_v6145 = v6218 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6222 : string = null |> unbox<string>
                                                    let _run_target_args'_v6145 = v6222 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6226 : string = null |> unbox<string>
                                                    let _run_target_args'_v6145 = v6226 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6230 : string = null |> unbox<string>
                                                    let _run_target_args'_v6145 = v6230 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6234 : string = null |> unbox<string>
                                                    let _run_target_args'_v6145 = v6234 
                                                    #endif
#else
                                                    let v6237 : string = v6091 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v6145 = v6237 
                                                    #endif
                                                    let v6238 : string = _run_target_args'_v6145 
                                                    let v6246 : string = "// spiral.process_typescript"
                                                    let v6247 : bool = v6238.Contains v6246 
                                                    let v6256 : string =
                                                        if v6247 then
                                                            v6238
                                                        else
                                                            let v6250 : string = $"\"./fable_modules/fable-library-ts.{v5916}/"
                                                            let v6251 : string = $"\"{v5853}/lib/typescript/fable/fable_modules/fable-library-ts.{v5916}/"
                                                            let v6252 : string = v6238.Replace (v6250, v6251)
                                                            let v6253 : string = "\\s\\sdefaultOf\\(\\);"
                                                            let v6254 : string = " defaultOf::<()>();"
                                                            method66(v6253, v6254, v6252)
                                                    let v6257 : bool = v6247 = false
                                                    if v6257 then
                                                        let v6258 : string = $"{v6256}\n\n{v6246}\n"
                                                        method76(v6091, v6258)
                                                    let v6259 : string = $"bun --bun run \"{v6091}\""
                                                    let v6260 : string = "PATH"
                                                    let v6261 : string = method3(v6260)
                                                    let v6262 : bool = v6261 = ""
                                                    let v6301 : US5 =
                                                        if v6262 then
                                                            US5_1
                                                        else
                                                            (* run_target_args'
                                                            let v6268 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v6269 : string = "cfg!(windows)"
                                                            let v6270 : bool = Fable.Core.RustInterop.emitRustExpr () v6269 
                                                            let _run_target_args'_v6268 = v6270 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v6271 : string = "cfg!(windows)"
                                                            let v6272 : bool = Fable.Core.RustInterop.emitRustExpr () v6271 
                                                            let _run_target_args'_v6268 = v6272 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v6273 : string = "cfg!(windows)"
                                                            let v6274 : bool = Fable.Core.RustInterop.emitRustExpr () v6273 
                                                            let _run_target_args'_v6268 = v6274 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v6275 : US3 = US3_0
                                                            let v6276 : US4 = US4_4(v6275)
                                                            let v6277 : string = $"platform.is_windows / target: {v6276}"
                                                            let v6278 : bool = failwith<bool> v6277
                                                            let _run_target_args'_v6268 = v6278 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v6279 : US3 = US3_0
                                                            let v6280 : US4 = US4_5(v6279)
                                                            let v6281 : string = $"platform.is_windows / target: {v6280}"
                                                            let v6282 : bool = failwith<bool> v6281
                                                            let _run_target_args'_v6268 = v6282 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v6283 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v6284 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v6285 : bool = v6284 v6283
                                                            let _run_target_args'_v6268 = v6285 
                                                            #endif
#else
                                                            let v6286 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                            let v6287 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                            let v6288 : bool = v6287 v6286
                                                            let _run_target_args'_v6268 = v6288 
                                                            #endif
                                                            let v6289 : bool = _run_target_args'_v6268 
                                                            let v6297 : string =
                                                                if v6289 then
                                                                    let v6295 : string = ";"
                                                                    v6295
                                                                else
                                                                    let v6296 : string = ":"
                                                                    v6296
                                                            let v6298 : string = "~/.bun/bin"
                                                            let v6299 : string = $"{v6298}{v6297}{v6261}"
                                                            US5_0(v6299)
                                                    let v6307 : UH4 =
                                                        match v6301 with
                                                        | US5_1 -> (* None *)
                                                            UH4_0
                                                        | US5_0(v6302) -> (* Some *)
                                                            let v6303 : UH4 = UH4_0
                                                            UH4_1(v6260, v6302, v6303)
                                                    let v6308 : string = "TRACE_LEVEL"
                                                    let v6309 : string = "Verbose"
                                                    let v6310 : UH4 = UH4_0
                                                    let v6311 : UH4 = UH4_1(v6308, v6309, v6310)
                                                    let v6312 : UH4 = method274(v6307, v6311)
                                                    let v6313 : struct (string * string) list = []
                                                    let v6314 : struct (string * string) list = method275(v6312, v6313)
                                                    let v6316 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                    let v6317 : (struct (string * string) []) = v6316 v6314
                                                    let v6321 : System.Threading.CancellationToken option = None
                                                    let v6324 : (struct (string * string) []) = [||]
                                                    let v6326 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                    let v6330 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                    let v6334 : string option = None
                                                    let v6348 : Result<string, string> =
                                                        match v5833 with
                                                        | US13_1(v6342) -> (* Error *)
                                                            let v6344 : Result<string, string> = Error v6342 
                                                            v6344
                                                        | US13_0(v6337) -> (* Ok *)
                                                            let v6339 : Result<string, string> = Ok v6337 
                                                            v6339
                                                    (* run_target_args'
                                                    let v6350 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6351 : string = "$0.ok()"
                                                    let v6352 : string option = Fable.Core.RustInterop.emitRustExpr v6348 v6351 
                                                    let _run_target_args'_v6350 = v6352 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6353 : string = "$0.ok()"
                                                    let v6354 : string option = Fable.Core.RustInterop.emitRustExpr v6348 v6353 
                                                    let _run_target_args'_v6350 = v6354 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6355 : string = "$0.ok()"
                                                    let v6356 : string option = Fable.Core.RustInterop.emitRustExpr v6348 v6355 
                                                    let _run_target_args'_v6350 = v6356 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6357 : string option = match v6348 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v6350 = v6357 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6358 : string option = match v6348 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v6350 = v6358 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6359 : string option = match v6348 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v6350 = v6359 
                                                    #endif
#else
                                                    let v6360 : string option = match v6348 with Ok x -> Some x | Error _ -> None
                                                    let _run_target_args'_v6350 = v6360 
                                                    #endif
                                                    let v6361 : string option = _run_target_args'_v6350 
                                                    let v6364 : bool = true
                                                    let struct (v6365 : int32, v6366 : string) = method101(v6259, v6321, v6317, v6326, v6330, v6364, v6361)
                                                    let v6367 : int32 = v6317.Length
                                                    let v6368 : (string []) = Array.zeroCreate<string> (v6367)
                                                    let v6369 : Mut5 = {l0 = 0} : Mut5
                                                    while method32(v6367, v6369) do
                                                        let v6371 : int32 = v6369.l0
                                                        let struct (v6372 : string, v6373 : string) = v6317.[int v6371]
                                                        let v6374 : string = $"$env:{v6372}=''{v6373}''"
                                                        v6368.[int v6371] <- v6374
                                                        let v6375 : int32 = v6371 + 1
                                                        v6369.l0 <- v6375
                                                        ()
                                                    let v6377 : string seq = v6368 |> Seq.ofArray
                                                    let v6382 : (string -> (string seq -> string)) = String.concat
                                                    let v6383 : string = ";"
                                                    let v6384 : (string seq -> string) = v6382 v6383
                                                    let v6385 : string = v6384 v6377
                                                    let v6388 : string = $"pwsh -c '{v6385}; {v6259}'"
                                                    let v6389 : bool = v6365 = 0
                                                    let struct (v6469 : US5, v6470 : US5, v6471 : US5, v6472 : US5) =
                                                        if v6389 then
                                                            let v6390 : (string -> US5) = closure72()
                                                            let v6391 : (unit -> string) = closure121(v6366)
                                                            let v6392 : (exn -> US5) = closure122(v6091, v6366, v6388)
                                                            let v6394 : US5 = US5_1
                                                            let result = ref v6394
                                                            try
                                                                result.Value <- v6391 () |> v6390 
                                                            with ex ->
                                                                result.Value <- v6392 ex 
                                                            let v6395 : US5 = result.Value
                                                            let v6409 : string option =
                                                                match v6395 with
                                                                | US5_1 -> (* None *)
                                                                    let v6405 : string option = None
                                                                    v6405
                                                                | US5_0(v6399) -> (* Some *)
                                                                    let v6401 : string option = Some v6399 
                                                                    v6401
                                                            let v6410 : string = "$0.unwrap()"
                                                            let v6411 : string = Fable.Core.RustInterop.emitRustExpr v6409 v6410 
                                                            let v6412 : US5 = US5_0(v5778)
                                                            let v6413 : US5 = US5_0(v6256)
                                                            let v6414 : US5 = US5_0(v6091)
                                                            let v6415 : US5 = US5_0(v6411)
                                                            struct (v6412, v6413, v6414, v6415)
                                                        else
                                                            let v6416 : unit = ()
                                                            let v6417 : (unit -> unit) = closure124(v6091, v6366, v6365, v6388)
                                                            let v6418 : unit = (fun () -> v6417 (); v6416) ()
                                                            let v6465 : US5 = US5_0(v5778)
                                                            let v6466 : US5 = US5_1
                                                            let v6467 : US5 = US5_1
                                                            let v6468 : US5 = US5_1
                                                            struct (v6465, v6466, v6467, v6468)
                                                    struct (v6469, v6470, v6471, v6472)
                                            struct (v6473, v6474, v6475, v6476)
                                        else
                                            let v6477 : string = "fable_library_rust::String_::fromString($0)"
                                            let v6478 : string = Fable.Core.RustInterop.emitRustExpr v40 v6477 
                                            let v6479 : bool = v6478 = "python"
                                            let struct (v7326 : US5, v7327 : US5, v7328 : US5, v7329 : US5) =
                                                if v6479 then
                                                    let v6480 : string = method191()
                                                    (* run_target_args'
                                                    let v6485 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6486 : string = "&*$0"
                                                    let v6487 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6480 v6486 
                                                    let _run_target_args'_v6485 = v6487 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6488 : string = "&*$0"
                                                    let v6489 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6480 v6488 
                                                    let _run_target_args'_v6485 = v6489 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6490 : string = "&*$0"
                                                    let v6491 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6480 v6490 
                                                    let _run_target_args'_v6485 = v6491 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6493 : Ref<Str> = v6480 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6485 = v6493 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6497 : Ref<Str> = v6480 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6485 = v6497 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6501 : Ref<Str> = v6480 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6485 = v6501 
                                                    #endif
#else
                                                    let v6505 : Ref<Str> = v6480 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6485 = v6505 
                                                    #endif
                                                    let v6508 : Ref<Str> = _run_target_args'_v6485 
                                                    let v6514 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                    let v6515 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6508) v6514 
                                                    let v6518 : (std_string_String -> US7) = method23()
                                                    let v6519 : US7 option = v6515 |> Option.map v6518 
                                                    let v6539 : US7 = US7_1
                                                    let v6540 : US7 = v6519 |> Option.defaultValue v6539 
                                                    let v6547 : std_string_String =
                                                        match v6540 with
                                                        | US7_1 -> (* None *)
                                                            failwith<std_string_String> "Option does not have a value."
                                                        | US7_0(v6544) -> (* Some *)
                                                            v6544
                                                    let v6548 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v6549 : string = Fable.Core.RustInterop.emitRustExpr v6547 v6548 
                                                    let v6550 : string = method25()
                                                    (* run_target_args'
                                                    let v6555 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6556 : string = "&*$0"
                                                    let v6557 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6550 v6556 
                                                    let _run_target_args'_v6555 = v6557 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6558 : string = "&*$0"
                                                    let v6559 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6550 v6558 
                                                    let _run_target_args'_v6555 = v6559 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6560 : string = "&*$0"
                                                    let v6561 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6550 v6560 
                                                    let _run_target_args'_v6555 = v6561 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6563 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6555 = v6563 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6567 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6555 = v6567 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6571 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6555 = v6571 
                                                    #endif
#else
                                                    let v6575 : Ref<Str> = v6550 |> unbox<Ref<Str>>
                                                    let _run_target_args'_v6555 = v6575 
                                                    #endif
                                                    let v6578 : Ref<Str> = _run_target_args'_v6555 
                                                    let v6584 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                    let v6585 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v41, v6578) v6584 
                                                    let v6588 : (Vec<std_string_String> -> US11) = method26()
                                                    let v6589 : US11 option = v6585 |> Option.map v6588 
                                                    let v6609 : US11 = US11_1
                                                    let v6610 : US11 = v6589 |> Option.defaultValue v6609 
                                                    let v6614 : (std_string_String []) = [||]
                                                    let v6615 : string = "$0.to_vec()"
                                                    let v6616 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6614 v6615 
                                                    let v6619 : Vec<std_string_String> =
                                                        match v6610 with
                                                        | US11_1 -> (* None *)
                                                            v6616
                                                        | US11_0(v6617) -> (* Some *)
                                                            v6617
                                                    let v6620 : bool =
                                                        match v0 with
                                                        | US0_0 -> (* Verbose *)
                                                            true
                                                        | _ ->
                                                            false
                                                    (* run_target_args'
                                                    let v6625 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    (* run_target_args'
                                                    let v6630 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6631 : string = "std::fs::read(&*$0)"
                                                    let v6632 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6549 v6631 
                                                    (* run_target_args'
                                                    let v6634 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6635 : string = "$0.unwrap()"
                                                    let v6636 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6632 v6635 
                                                    let _run_target_args'_v6634 = v6636 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6637 : string = "$0.unwrap()"
                                                    let v6638 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6632 v6637 
                                                    let _run_target_args'_v6634 = v6638 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6639 : string = "$0.unwrap()"
                                                    let v6640 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6632 v6639 
                                                    let _run_target_args'_v6634 = v6640 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6641 : Vec<uint8> = match v6632 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6634 = v6641 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6642 : Vec<uint8> = match v6632 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6634 = v6642 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6643 : Vec<uint8> = match v6632 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6634 = v6643 
                                                    #endif
#else
                                                    let v6644 : Vec<uint8> = match v6632 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6634 = v6644 
                                                    #endif
                                                    let v6645 : Vec<uint8> = _run_target_args'_v6634 
                                                    let _run_target_args'_v6630 = v6645 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6649 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6630 = v6649 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6653 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6630 = v6653 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6657 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6630 = v6657 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6661 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6630 = v6661 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6665 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                    let _run_target_args'_v6630 = v6665 
                                                    #endif
#else
                                                    let v6668 : (uint8 []) = v6549 |> System.IO.File.ReadAllBytes
                                                    let v6669 : string = "$0.to_vec()"
                                                    let v6670 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v6668 v6669 
                                                    let _run_target_args'_v6630 = v6670 
                                                    #endif
                                                    let v6671 : Vec<uint8> = _run_target_args'_v6630 
                                                    let v6677 : Vec<uint8> = method27(v6671)
                                                    let v6678 : string = "std::string::String::from_utf8($0)"
                                                    let v6679 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v6677 v6678 
                                                    (* run_target_args'
                                                    let v6681 : unit = ()
                                                    run_target_args' *)
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v6682 : string = "$0.unwrap()"
                                                    let v6683 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6679 v6682 
                                                    let _run_target_args'_v6681 = v6683 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6684 : string = "$0.unwrap()"
                                                    let v6685 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6679 v6684 
                                                    let _run_target_args'_v6681 = v6685 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6686 : string = "$0.unwrap()"
                                                    let v6687 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6679 v6686 
                                                    let _run_target_args'_v6681 = v6687 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6688 : std_string_String = match v6679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6681 = v6688 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6689 : std_string_String = match v6679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6681 = v6689 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6690 : std_string_String = match v6679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6681 = v6690 
                                                    #endif
#else
                                                    let v6691 : std_string_String = match v6679 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                    let _run_target_args'_v6681 = v6691 
                                                    #endif
                                                    let v6692 : std_string_String = _run_target_args'_v6681 
                                                    let v6695 : string = "fable_library_rust::String_::fromString($0)"
                                                    let v6696 : string = Fable.Core.RustInterop.emitRustExpr v6692 v6695 
                                                    let _run_target_args'_v6625 = v6696 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v6698 : string = null |> unbox<string>
                                                    let _run_target_args'_v6625 = v6698 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v6702 : string = null |> unbox<string>
                                                    let _run_target_args'_v6625 = v6702 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v6706 : string = null |> unbox<string>
                                                    let _run_target_args'_v6625 = v6706 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v6710 : string = null |> unbox<string>
                                                    let _run_target_args'_v6625 = v6710 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v6714 : string = null |> unbox<string>
                                                    let _run_target_args'_v6625 = v6714 
                                                    #endif
#else
                                                    let v6717 : string = v6549 |> System.IO.File.ReadAllText
                                                    let _run_target_args'_v6625 = v6717 
                                                    #endif
                                                    let v6718 : string = _run_target_args'_v6625 
                                                    let v6726 : string = "py"
                                                    let v6727 : string = $"%A{struct (v6726, v6718)}"
                                                    let v6730 : string = method29(v6727)
                                                    let v6731 : string = method34()
                                                    let v6732 : US5 = method35(v6731)
                                                    let v6738 : US5 =
                                                        match v6732 with
                                                        | US5_1 -> (* None *)
                                                            let v6735 : string = __SOURCE_DIRECTORY__
                                                            method35(v6735)
                                                        | US5_0(v6733) -> (* Some *)
                                                            US5_0(v6733)
                                                    let v6744 : US5 =
                                                        match v6738 with
                                                        | US5_1 -> (* None *)
                                                            let v6741 : string = "/workspaces"
                                                            method35(v6741)
                                                        | US5_0(v6739) -> (* Some *)
                                                            US5_0(v6739)
                                                    let v6748 : string =
                                                        match v6744 with
                                                        | US5_1 -> (* None *)
                                                            failwith<string> "Option does not have a value."
                                                        | US5_0(v6745) -> (* Some *)
                                                            v6745
                                                    let v6749 : string = method55(v6748)
                                                    let v6750 : bool = "deps" = v6749
                                                    let v6761 : string =
                                                        if v6750 then
                                                            let v6751 : string option = method41(v6748)
                                                            let v6753 : string = v6751 |> Option.get
                                                            let v6756 : US5 = method35(v6753)
                                                            match v6756 with
                                                            | US5_1 -> (* None *)
                                                                failwith<string> "Option does not have a value."
                                                            | US5_0(v6757) -> (* Some *)
                                                                v6757
                                                        else
                                                            v6748
                                                    let v6762 : string = "polyglot"
                                                    let v6763 : string = method36(v6761, v6762)
                                                    let v6764 : string = method34()
                                                    let v6766 : (unit -> string) = v6764.ToLower
                                                    let v6767 : string = v6766 ()
                                                    let v6771 : (unit -> string) = v6763.ToLower
                                                    let v6772 : string = v6771 ()
                                                    let v6776 : bool = v6767.StartsWith (v6772, false, null)
                                                    let v6781 : US13 =
                                                        if v6776 then
                                                            US13_1(v6772)
                                                        else
                                                            US13_0(v6772)
                                                    let v6793 : Result<string, string> =
                                                        match v6781 with
                                                        | US13_1(v6787) -> (* Error *)
                                                            let v6789 : Result<string, string> = Error v6787 
                                                            v6789
                                                        | US13_0(v6782) -> (* Ok *)
                                                            let v6784 : Result<string, string> = Ok v6782 
                                                            v6784
                                                    let v6794 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                    let v6795 : bool = Fable.Core.RustInterop.emitRustExpr v6793 v6794 
                                                    let v6796 : string = "x"
                                                    let v6797 : string = Fable.Core.RustInterop.emitRustExpr () v6796 
                                                    let v6798 : string = "true; $0 })"
                                                    let v6799 : bool = Fable.Core.RustInterop.emitRustExpr v6797 v6798 
                                                    let v6800 : string = "_result_unwrap_or_else"
                                                    let v6801 : string = Fable.Core.RustInterop.emitRustExpr () v6800 
                                                    let v6802 : string = "spiral"
                                                    let v6803 : US41 = US41_2
                                                    let v6804 : US42 = US42_0(v6803)
                                                    let v6805 : US5 = US5_0(v6730)
                                                    let v6806 : string = method211(v6805, v6802, v6804, v6801)
                                                    let v6807 : string = "Fable.Core"
                                                    let v6808 : string = "4.3.0"
                                                    let v6809 : UH4 = UH4_0
                                                    let v6810 : UH4 = UH4_1(v6807, v6808, v6809)
                                                    let v6811 : UH2 = UH2_0
                                                    let v6812 : string = method212(v6718, v6802, v6811, v6810, v6806, v6801)
                                                    let v6813 : string = "lib/python/fable/fable_modules"
                                                    let v6814 : string = method36(v6801, v6813)
                                                    let v6815 : string = $"fable_library"
                                                    let v6816 : string = method36(v6814, v6815)
                                                    let v6817 : string = $"fable_modules/fable_library"
                                                    let v6818 : string = method36(v6806, v6817)
                                                    method220(v6816, v6818)
                                                    let v6819 : US39 = US39_1
                                                    let struct (v6820 : int32, v6821 : string) = method221(v6819, v6806, v6726, v6812, v6781)
                                                    let v6823 : bool = v6820 <> 0 
                                                    let struct (v7269 : US5, v7270 : US5, v7271 : US5, v7272 : US5) =
                                                        if v6823 then
                                                            let v6826 : unit = ()
                                                            let v6827 : (unit -> unit) = closure125(v6821, v6820)
                                                            let v6828 : unit = (fun () -> v6827 (); v6826) ()
                                                            let v6875 : US5 = US5_0(v6726)
                                                            let v6876 : US5 = US5_1
                                                            let v6877 : US5 = US5_1
                                                            let v6878 : US5 = US5_0(v6821)
                                                            struct (v6875, v6876, v6877, v6878)
                                                        else
                                                            let v6879 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                            let v6880 : bool = Fable.Core.RustInterop.emitRustExpr v6619 v6879 
                                                            let v6881 : string = "x"
                                                            let v6882 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v6881 
                                                            let v6883 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v6884 : string = Fable.Core.RustInterop.emitRustExpr v6882 v6883 
                                                            let v6887 : string = "="
                                                            let v6888 : bool = v6884.Contains v6887 
                                                            let v6892 : string =
                                                                if v6888 then
                                                                    v6884
                                                                else
                                                                    let v6891 : string = $"\"{v6884}\":\"*\""
                                                                    v6891
                                                            let v6893 : string = "true; $0 }).collect::<Vec<_>>()"
                                                            let v6894 : bool = Fable.Core.RustInterop.emitRustExpr v6892 v6893 
                                                            let v6895 : string = "_vec_map"
                                                            let v6896 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v6895 
                                                            let v6897 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                                            let v6898 : (string []) = Fable.Core.RustInterop.emitRustExpr v6896 v6897 
                                                            let v6903 : unit = ()
                                                            let _let'_v6903 =
                                                                seq {
                                                                    for i = 0 to v6898.Length - 1 do yield v6898.[i]
                                                                    (* indent
                                                                    ()
                                                                indent *)
                                                                }
                                                                (* indent
                                                                ()
                                                            indent *)
                                                            let v6906 : string seq = _let'_v6903 
                                                            let v6914 : (string -> (string seq -> string)) = String.concat
                                                            let v6915 : string = ",\n"
                                                            let v6916 : (string seq -> string) = v6914 v6915
                                                            let v6917 : string = v6916 v6906
                                                            let v6920 : string = $"{{"
                                                            let v6921 : string = $"  \"name\": \"spiral_{v6730}\","
                                                            let v6922 : string = v6920 + v6921 
                                                            let v6923 : string = $"  \"dependencies\": {{"
                                                            let v6924 : string = v6922 + v6923 
                                                            let v6925 : string = v6924 + v6917 
                                                            let v6926 : string = $"  }},"
                                                            let v6927 : string = v6925 + v6926 
                                                            let v6928 : string = $"    \"devDependencies\": {{"
                                                            let v6929 : string = v6927 + v6928 
                                                            let v6930 : string = $"  }},"
                                                            let v6931 : string = v6929 + v6930 
                                                            let v6932 : string = $"}}"
                                                            let v6933 : string = v6931 + v6932 
                                                            let v6934 : string = "package.json"
                                                            let v6935 : string = method36(v6806, v6934)
                                                            let v6936 : string = "../.."
                                                            let v6937 : string = method36(v6806, v6936)
                                                            let v6938 : string = method36(v6937, v6934)
                                                            method76(v6935, v6933)
                                                            let v6939 : string = ""
                                                            method76(v6938, v6939)
                                                            let v6940 : string = $"{v6802}.{v6726}"
                                                            let v6941 : string = method36(v6806, v6940)
                                                            let v6942 : unit = ()
                                                            let v6943 : (unit -> unit) = closure126(v6941)
                                                            let v6944 : unit = (fun () -> v6943 (); v6942) ()
                                                            (* run_target_args'
                                                            let v6995 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            (* run_target_args'
                                                            let v7000 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v7001 : string = "std::fs::read(&*$0)"
                                                            let v7002 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v6941 v7001 
                                                            (* run_target_args'
                                                            let v7004 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v7005 : string = "$0.unwrap()"
                                                            let v7006 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7002 v7005 
                                                            let _run_target_args'_v7004 = v7006 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v7007 : string = "$0.unwrap()"
                                                            let v7008 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7002 v7007 
                                                            let _run_target_args'_v7004 = v7008 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v7009 : string = "$0.unwrap()"
                                                            let v7010 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7002 v7009 
                                                            let _run_target_args'_v7004 = v7010 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v7011 : Vec<uint8> = match v7002 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7004 = v7011 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v7012 : Vec<uint8> = match v7002 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7004 = v7012 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v7013 : Vec<uint8> = match v7002 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7004 = v7013 
                                                            #endif
#else
                                                            let v7014 : Vec<uint8> = match v7002 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7004 = v7014 
                                                            #endif
                                                            let v7015 : Vec<uint8> = _run_target_args'_v7004 
                                                            let _run_target_args'_v7000 = v7015 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v7019 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v7000 = v7019 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v7023 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v7000 = v7023 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v7027 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v7000 = v7027 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v7031 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v7000 = v7031 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v7035 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                            let _run_target_args'_v7000 = v7035 
                                                            #endif
#else
                                                            let v7038 : (uint8 []) = v6941 |> System.IO.File.ReadAllBytes
                                                            let v7039 : string = "$0.to_vec()"
                                                            let v7040 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v7038 v7039 
                                                            let _run_target_args'_v7000 = v7040 
                                                            #endif
                                                            let v7041 : Vec<uint8> = _run_target_args'_v7000 
                                                            let v7047 : Vec<uint8> = method27(v7041)
                                                            let v7048 : string = "std::string::String::from_utf8($0)"
                                                            let v7049 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v7047 v7048 
                                                            (* run_target_args'
                                                            let v7051 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v7052 : string = "$0.unwrap()"
                                                            let v7053 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7049 v7052 
                                                            let _run_target_args'_v7051 = v7053 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v7054 : string = "$0.unwrap()"
                                                            let v7055 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7049 v7054 
                                                            let _run_target_args'_v7051 = v7055 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v7056 : string = "$0.unwrap()"
                                                            let v7057 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7049 v7056 
                                                            let _run_target_args'_v7051 = v7057 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v7058 : std_string_String = match v7049 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7051 = v7058 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v7059 : std_string_String = match v7049 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7051 = v7059 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v7060 : std_string_String = match v7049 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7051 = v7060 
                                                            #endif
#else
                                                            let v7061 : std_string_String = match v7049 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                            let _run_target_args'_v7051 = v7061 
                                                            #endif
                                                            let v7062 : std_string_String = _run_target_args'_v7051 
                                                            let v7065 : string = "fable_library_rust::String_::fromString($0)"
                                                            let v7066 : string = Fable.Core.RustInterop.emitRustExpr v7062 v7065 
                                                            let _run_target_args'_v6995 = v7066 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v7068 : string = null |> unbox<string>
                                                            let _run_target_args'_v6995 = v7068 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v7072 : string = null |> unbox<string>
                                                            let _run_target_args'_v6995 = v7072 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v7076 : string = null |> unbox<string>
                                                            let _run_target_args'_v6995 = v7076 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v7080 : string = null |> unbox<string>
                                                            let _run_target_args'_v6995 = v7080 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v7084 : string = null |> unbox<string>
                                                            let _run_target_args'_v6995 = v7084 
                                                            #endif
#else
                                                            let v7087 : string = v6941 |> System.IO.File.ReadAllText
                                                            let _run_target_args'_v6995 = v7087 
                                                            #endif
                                                            let v7088 : string = _run_target_args'_v6995 
                                                            let v7096 : string = "# spiral.process_python"
                                                            let v7097 : bool = v7088.Contains v7096 
                                                            let v7109 : string =
                                                                if v7097 then
                                                                    v7088
                                                                else
                                                                    let v7100 : string = "\";\".into()"
                                                                    let v7101 : string = Fable.Core.RustInterop.emitRustExpr () v7100 
                                                                    let v7102 : string = "),)"
                                                                    let v7103 : string = v7102 + v7101 
                                                                    let v7104 : string = "));"
                                                                    let v7105 : string = v7088.Replace (v7103, v7104)
                                                                    let v7106 : string = "\\s\\sdefaultOf\\(\\);"
                                                                    let v7107 : string = " defaultOf::<()>();"
                                                                    method66(v7106, v7107, v7105)
                                                            let v7110 : bool = v7097 = false
                                                            if v7110 then
                                                                let v7111 : string = $"{v7109}\n\n{v7096}\n"
                                                                method76(v6941, v7111)
                                                            let v7112 : string = $"python \"{v6941}\""
                                                            let v7113 : string = "TRACE_LEVEL"
                                                            let v7114 : string = "Verbose"
                                                            let v7115 : (struct (string * string) []) = [|struct (v7113, v7114)|]
                                                            let v7117 : System.Threading.CancellationToken option = None
                                                            let v7120 : (struct (string * string) []) = [||]
                                                            let v7122 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                            let v7126 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                            let v7130 : string option = None
                                                            let v7144 : Result<string, string> =
                                                                match v6781 with
                                                                | US13_1(v7138) -> (* Error *)
                                                                    let v7140 : Result<string, string> = Error v7138 
                                                                    v7140
                                                                | US13_0(v7133) -> (* Ok *)
                                                                    let v7135 : Result<string, string> = Ok v7133 
                                                                    v7135
                                                            (* run_target_args'
                                                            let v7146 : unit = ()
                                                            run_target_args' *)
                                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                            let v7147 : string = "$0.ok()"
                                                            let v7148 : string option = Fable.Core.RustInterop.emitRustExpr v7144 v7147 
                                                            let _run_target_args'_v7146 = v7148 
                                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                                            let v7149 : string = "$0.ok()"
                                                            let v7150 : string option = Fable.Core.RustInterop.emitRustExpr v7144 v7149 
                                                            let _run_target_args'_v7146 = v7150 
                                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                            let v7151 : string = "$0.ok()"
                                                            let v7152 : string option = Fable.Core.RustInterop.emitRustExpr v7144 v7151 
                                                            let _run_target_args'_v7146 = v7152 
                                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                            let v7153 : string option = match v7144 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v7146 = v7153 
                                                            #endif
#if FABLE_COMPILER_PYTHON
                                                            let v7154 : string option = match v7144 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v7146 = v7154 
                                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                            let v7155 : string option = match v7144 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v7146 = v7155 
                                                            #endif
#else
                                                            let v7156 : string option = match v7144 with Ok x -> Some x | Error _ -> None
                                                            let _run_target_args'_v7146 = v7156 
                                                            #endif
                                                            let v7157 : string option = _run_target_args'_v7146 
                                                            let v7160 : bool = true
                                                            let struct (v7161 : int32, v7162 : string) = method101(v7112, v7117, v7115, v7122, v7126, v7160, v7157)
                                                            let v7163 : int32 = v7115.Length
                                                            let v7164 : (string []) = Array.zeroCreate<string> (v7163)
                                                            let v7165 : Mut5 = {l0 = 0} : Mut5
                                                            while method32(v7163, v7165) do
                                                                let v7167 : int32 = v7165.l0
                                                                let struct (v7168 : string, v7169 : string) = v7115.[int v7167]
                                                                let v7170 : string = $"$env:{v7168}=''{v7169}''"
                                                                v7164.[int v7167] <- v7170
                                                                let v7171 : int32 = v7167 + 1
                                                                v7165.l0 <- v7171
                                                                ()
                                                            let v7173 : string seq = v7164 |> Seq.ofArray
                                                            let v7178 : (string -> (string seq -> string)) = String.concat
                                                            let v7179 : string = ";"
                                                            let v7180 : (string seq -> string) = v7178 v7179
                                                            let v7181 : string = v7180 v7173
                                                            let v7184 : string = $"pwsh -c '{v7181}; {v7112}'"
                                                            let v7185 : bool = v7161 = 0
                                                            let struct (v7265 : US5, v7266 : US5, v7267 : US5, v7268 : US5) =
                                                                if v7185 then
                                                                    let v7186 : (string -> US5) = closure72()
                                                                    let v7187 : (unit -> string) = closure127(v7162)
                                                                    let v7188 : (exn -> US5) = closure128(v6941, v7162, v7184)
                                                                    let v7190 : US5 = US5_1
                                                                    let result = ref v7190
                                                                    try
                                                                        result.Value <- v7187 () |> v7186 
                                                                    with ex ->
                                                                        result.Value <- v7188 ex 
                                                                    let v7191 : US5 = result.Value
                                                                    let v7205 : string option =
                                                                        match v7191 with
                                                                        | US5_1 -> (* None *)
                                                                            let v7201 : string option = None
                                                                            v7201
                                                                        | US5_0(v7195) -> (* Some *)
                                                                            let v7197 : string option = Some v7195 
                                                                            v7197
                                                                    let v7206 : string = "$0.unwrap()"
                                                                    let v7207 : string = Fable.Core.RustInterop.emitRustExpr v7205 v7206 
                                                                    let v7208 : US5 = US5_0(v6726)
                                                                    let v7209 : US5 = US5_0(v7109)
                                                                    let v7210 : US5 = US5_0(v6941)
                                                                    let v7211 : US5 = US5_0(v7207)
                                                                    struct (v7208, v7209, v7210, v7211)
                                                                else
                                                                    let v7212 : unit = ()
                                                                    let v7213 : (unit -> unit) = closure130(v6941, v7162, v7161, v7184)
                                                                    let v7214 : unit = (fun () -> v7213 (); v7212) ()
                                                                    let v7261 : US5 = US5_0(v6726)
                                                                    let v7262 : US5 = US5_1
                                                                    let v7263 : US5 = US5_1
                                                                    let v7264 : US5 = US5_1
                                                                    struct (v7261, v7262, v7263, v7264)
                                                            struct (v7265, v7266, v7267, v7268)
                                                    struct (v7269, v7270, v7271, v7272)
                                                else
                                                    let v7273 : unit = ()
                                                    let v7274 : (unit -> unit) = closure131(v41, v40)
                                                    let v7275 : unit = (fun () -> v7274 (); v7273) ()
                                                    let v7322 : US5 = US5_1
                                                    let v7323 : US5 = US5_1
                                                    let v7324 : US5 = US5_1
                                                    let v7325 : US5 = US5_1
                                                    struct (v7322, v7323, v7324, v7325)
                                            struct (v7326, v7327, v7328, v7329)
                                    struct (v7330, v7331, v7332, v7333)
                            let v7341 : string =
                                match v7334 with
                                | US5_1 -> (* None *)
                                    let v7339 : string = ""
                                    v7339
                                | US5_0(v7338) -> (* Some *)
                                    v7338
                            let v7342 : string = "extension"
                            let v7346 : string =
                                match v7335 with
                                | US5_1 -> (* None *)
                                    let v7344 : string = ""
                                    v7344
                                | US5_0(v7343) -> (* Some *)
                                    v7343
                            let v7347 : string = "code"
                            let v7351 : string =
                                match v7336 with
                                | US5_1 -> (* None *)
                                    let v7349 : string = ""
                                    v7349
                                | US5_0(v7348) -> (* Some *)
                                    v7348
                            let v7352 : string = "code_path"
                            let v7356 : string =
                                match v7337 with
                                | US5_1 -> (* None *)
                                    let v7354 : string = ""
                                    v7354
                                | US5_0(v7353) -> (* Some *)
                                    v7353
                            let v7357 : string = "output"
                            [|struct (v7342, v7341); struct (v7347, v7346); struct (v7352, v7351); struct (v7357, v7356)|]
        | _ ->
            let v7363 : string = "extension"
            let v7364 : string = ""
            let v7365 : string = "code"
            let v7366 : string = "code_path"
            let v7367 : string = "output"
            [|struct (v7363, v7364); struct (v7365, v7364); struct (v7366, v7364); struct (v7367, v7364)|]
    let v7370 : string = "$0.to_vec()"
    let v7371 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v7369 v7370 
    let v7372 : unit = ()
    let v7373 : string = $"true; let _func1_from_v7372 = Func1::from(move |value| {{ //"
    let v7374 : bool = Fable.Core.RustInterop.emitRustExpr () v7373 
    let v7375 : string = $"value"
    let struct (v7376 : string, v7377 : string) = Fable.Core.RustInterop.emitRustExpr () v7375 
    (* run_target_args'
    let v7382 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7383 : string = "&*$0"
    let v7384 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7376 v7383 
    let _run_target_args'_v7382 = v7384 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7385 : string = "&*$0"
    let v7386 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7376 v7385 
    let _run_target_args'_v7382 = v7386 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7387 : string = "&*$0"
    let v7388 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7376 v7387 
    let _run_target_args'_v7382 = v7388 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7390 : Ref<Str> = v7376 |> unbox<Ref<Str>>
    let _run_target_args'_v7382 = v7390 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7394 : Ref<Str> = v7376 |> unbox<Ref<Str>>
    let _run_target_args'_v7382 = v7394 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7398 : Ref<Str> = v7376 |> unbox<Ref<Str>>
    let _run_target_args'_v7382 = v7398 
    #endif
#else
    let v7402 : Ref<Str> = v7376 |> unbox<Ref<Str>>
    let _run_target_args'_v7382 = v7402 
    #endif
    let v7405 : Ref<Str> = _run_target_args'_v7382 
    (* run_target_args'
    let v7415 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7416 : string = "String::from($0)"
    let v7417 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7405 v7416 
    let _run_target_args'_v7415 = v7417 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7418 : string = "String::from($0)"
    let v7419 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7405 v7418 
    let _run_target_args'_v7415 = v7419 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7420 : string = "String::from($0)"
    let v7421 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7405 v7420 
    let _run_target_args'_v7415 = v7421 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7423 : std_string_String = v7405 |> unbox<std_string_String>
    let _run_target_args'_v7415 = v7423 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7427 : std_string_String = v7405 |> unbox<std_string_String>
    let _run_target_args'_v7415 = v7427 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7431 : std_string_String = v7405 |> unbox<std_string_String>
    let _run_target_args'_v7415 = v7431 
    #endif
#else
    let v7435 : std_string_String = v7405 |> unbox<std_string_String>
    let _run_target_args'_v7415 = v7435 
    #endif
    let v7438 : std_string_String = _run_target_args'_v7415 
    (* run_target_args'
    let v7448 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7449 : string = "&*$0"
    let v7450 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7377 v7449 
    let _run_target_args'_v7448 = v7450 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7451 : string = "&*$0"
    let v7452 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7377 v7451 
    let _run_target_args'_v7448 = v7452 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7453 : string = "&*$0"
    let v7454 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v7377 v7453 
    let _run_target_args'_v7448 = v7454 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7456 : Ref<Str> = v7377 |> unbox<Ref<Str>>
    let _run_target_args'_v7448 = v7456 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7460 : Ref<Str> = v7377 |> unbox<Ref<Str>>
    let _run_target_args'_v7448 = v7460 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7464 : Ref<Str> = v7377 |> unbox<Ref<Str>>
    let _run_target_args'_v7448 = v7464 
    #endif
#else
    let v7468 : Ref<Str> = v7377 |> unbox<Ref<Str>>
    let _run_target_args'_v7448 = v7468 
    #endif
    let v7471 : Ref<Str> = _run_target_args'_v7448 
    (* run_target_args'
    let v7481 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7482 : string = "String::from($0)"
    let v7483 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7471 v7482 
    let _run_target_args'_v7481 = v7483 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7484 : string = "String::from($0)"
    let v7485 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7471 v7484 
    let _run_target_args'_v7481 = v7485 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7486 : string = "String::from($0)"
    let v7487 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7471 v7486 
    let _run_target_args'_v7481 = v7487 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7489 : std_string_String = v7471 |> unbox<std_string_String>
    let _run_target_args'_v7481 = v7489 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7493 : std_string_String = v7471 |> unbox<std_string_String>
    let _run_target_args'_v7481 = v7493 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7497 : std_string_String = v7471 |> unbox<std_string_String>
    let _run_target_args'_v7481 = v7497 
    #endif
#else
    let v7501 : std_string_String = v7471 |> unbox<std_string_String>
    let _run_target_args'_v7481 = v7501 
    #endif
    let v7504 : std_string_String = _run_target_args'_v7481 
    let v7511 : (std_string_String * std_string_String) = v7438, v7504 
    let func1_from_result = v7511 //
    let v7514 : _ = func1_from_result
    let v7515 : string = $"true; $0 /*"
    let v7516 : bool = Fable.Core.RustInterop.emitRustExpr v7514 v7515 
    let v7517 : string = $"*/ }}); //"
    let v7518 : bool = Fable.Core.RustInterop.emitRustExpr () v7517 
    let v7519 : string = $"_func1_from_v7372"
    let v7520 : Func0<struct (string * string), (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v7519 
    let v7521 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7522 : (struct (string * string) -> (std_string_String * std_string_String)) = closure76(v7520)
    let v7523 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v7371, v7522) v7521 
    let v7524 : string = "std::collections::BTreeMap::from_iter(v7523.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v7525 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v7524 
    let v7526 : string = "serde_json::to_string(&v7525)"
    let v7527 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v7526 
    let v7528 : (serde_json_Error -> string) = method285()
    (* run_target_args'
    let v7530 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7531 : string = "$0.map_err(|x| $1(x))"
    let v7532 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v7527, v7528) v7531 
    let _run_target_args'_v7530 = v7532 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7533 : string = "$0.map_err(|x| $1(x))"
    let v7534 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v7527, v7528) v7533 
    let _run_target_args'_v7530 = v7534 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7535 : string = "$0.map_err(|x| $1(x))"
    let v7536 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v7527, v7528) v7535 
    let _run_target_args'_v7530 = v7536 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7537 : Result<std_string_String, string> = match v7527 with Ok x -> Ok x | Error x -> Error (v7528 x)
    let _run_target_args'_v7530 = v7537 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7538 : Result<std_string_String, string> = match v7527 with Ok x -> Ok x | Error x -> Error (v7528 x)
    let _run_target_args'_v7530 = v7538 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7539 : Result<std_string_String, string> = match v7527 with Ok x -> Ok x | Error x -> Error (v7528 x)
    let _run_target_args'_v7530 = v7539 
    #endif
#else
    let v7540 : Result<std_string_String, string> = match v7527 with Ok x -> Ok x | Error x -> Error (v7528 x)
    let _run_target_args'_v7530 = v7540 
    #endif
    let v7541 : Result<std_string_String, string> = _run_target_args'_v7530 
    let v7544 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v7545 : bool = Fable.Core.RustInterop.emitRustExpr v7541 v7544 
    let v7546 : string = "x"
    let v7547 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7546 
    let v7548 : string = "fable_library_rust::String_::fromString($0)"
    let v7549 : string = Fable.Core.RustInterop.emitRustExpr v7547 v7548 
    let v7550 : string = "true; $0 })"
    let v7551 : bool = Fable.Core.RustInterop.emitRustExpr v7549 v7550 
    let v7552 : string = "_result_map_"
    let v7553 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v7552 
    let v7554 : string = ""
    let v7555 : string = "}"
    let v7556 : string = v7554 + v7555 
    let x = v7553 //
    let v7557 : _ = x
    let v7558 : unit = ()
    (* run_target_args'
    let v7559 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7560 : string = $"true; let _fix_closure_v7558 = $0"
    let v7561 : bool = Fable.Core.RustInterop.emitRustExpr v7557 v7560 
    let _run_target_args'_v7559 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7562 : string = $"true; let _fix_closure_v7558 = $0"
    let v7563 : bool = Fable.Core.RustInterop.emitRustExpr v7557 v7562 
    let _run_target_args'_v7559 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7564 : string = $"true; let _fix_closure_v7558 = $0"
    let v7565 : bool = Fable.Core.RustInterop.emitRustExpr v7557 v7564 
    let _run_target_args'_v7559 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v7559 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v7559 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v7559 = false 
    #endif
#else
    let _run_target_args'_v7559 = false 
    #endif
    let v7566 : bool = _run_target_args'_v7559 
    let v7568 : string = $"true; _fix_closure_v7558 " + v7556 + "); " + v7554 + " // rust.fix_closure'"
    let v7569 : bool = Fable.Core.RustInterop.emitRustExpr () v7568 
    let v7570 : string = "__future_init"
    let v7571 : _ = Fable.Core.RustInterop.emitRustExpr () v7570 
    let v7572 : string = "v7571"
    let v7573 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v7572 
    v7573
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure5(v0)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v90 : clap_Command = method0()
    let v91 : string = "clap::Command::get_matches($0)"
    let v92 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : US0 = v28.l0
    let v94 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v93, v92)
    let v95 : string = "futures::executor::block_on($0)"
    let v96 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v94 v95 
    (* run_target_args'
    let v98 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = "$0.unwrap()"
    let v100 : string = Fable.Core.RustInterop.emitRustExpr v96 v99 
    let _run_target_args'_v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = "$0.unwrap()"
    let v102 : string = Fable.Core.RustInterop.emitRustExpr v96 v101 
    let _run_target_args'_v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = "$0.unwrap()"
    let v104 : string = Fable.Core.RustInterop.emitRustExpr v96 v103 
    let _run_target_args'_v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v105 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v107 
    #endif
#else
    let v108 : string = match v96 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v98 = v108 
    #endif
    let v109 : string = _run_target_args'_v98 
    let v112 : US0 = v28.l0
    let v113 : bool =
        match v112 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v113 then
        let v114 : unit = ()
        let v115 : (unit -> unit) = closure10(v109)
        let v116 : unit = (fun () -> v115 (); v114) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
